/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#define BUILDING_NODE_EXTENSION

#ifdef BUILDING_NODE_EXTENSION
#include <node.h>
#else
#include <v8.h>
#endif

#include <errno.h>
#include <limits.h>
#include <iostream>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

void SWIG_V8_Raise(const char* msg) {
  v8::ThrowException(v8::Exception::Error(v8::String::New(msg)));
}

/* 
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.
  
  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload', 
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual void error(int code, const char* msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char* msg) {
    err = v8::Exception::Error(v8::String::New(msg));
    if(code != SWIG_TypeError) {
      v8::ThrowException(err);
    }
  }
  v8::Handle<v8::Value> err;
};



// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    v8::V8::AdjustAmountOfExternalAllocatedMemory(SWIGV8_AVG_OBJ_SIZE);
  };
  
  ~SWIGV8_Proxy() { 
#ifdef BUILDING_NODE_EXTENSION
    handle.ClearWeak();
#else
    handle.ClearWeak(v8::Isolate::GetCurrent());
#endif

    handle->SetInternalField(0, v8::Undefined());

#ifdef BUILDING_NODE_EXTENSION
    handle.Dispose();
#else
    handle.Dispose(v8::Isolate::GetCurrent());
#endif
    handle.Clear();
    v8::V8::AdjustAmountOfExternalAllocatedMemory(-SWIGV8_AVG_OBJ_SIZE);
  }
  
  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Handle<v8::FunctionTemplate> class_templ;

#ifdef BUILDING_NODE_EXTENSION
  void (*dtor) (v8::Persistent< v8::Value > object, void *parameter);
#else
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter);
#endif
};

v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void** ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;
  
  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);

#ifdef BUILDING_NODE_EXTENSION
  SWIGV8_Proxy *cdata = (SWIGV8_Proxy *) v8::External::Unwrap(cdataRef);
#else
  void* value = External::Cast(cdataRef)->Value();
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(value);
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}

#ifdef BUILDING_NODE_EXTENSION
void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) 
#else
void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy) {
    delete proxy;
  }
}

void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void* ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy* cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;  
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#ifdef BUILDING_NODE_EXTENSION
  obj->SetPointerInInternalField(0, cdata);
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#endif


#ifdef BUILDING_NODE_EXTENSION
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
  cdata->handle.MarkIndependent();
#else
  if(cdata->swigCMemOwn) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#endif
}

int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void** ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;

  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

v8::Handle<v8::Object> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;
  
  v8::Handle<v8::FunctionTemplate> class_templ;
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);
  
  return scope.Close(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)




/**
 * Creates a class template for a class with specified initialization function. 
 */
v8::Persistent<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    v8::Local<v8::FunctionTemplate> class_templ = v8::FunctionTemplate::New();
    class_templ->SetClassName(v8::String::NewSymbol(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

#ifdef BUILDING_NODE_EXTENSION
    return v8::Persistent<v8::FunctionTemplate>::New(class_templ);
#else
    return v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class_templ);
#endif

}

/**
 * Registers a class method with given name for a given class template. 
 */
void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol, v8::InvocationCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(v8::String::NewSymbol(symbol), v8::FunctionTemplate::New(_func));    
}

/**
 * Registers a class property with given name for a given class template. 
 */
void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol, v8::AccessorGetter getter, v8::AccessorSetter setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(v8::String::NewSymbol(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object. 
 */
void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol, v8::InvocationCallback _func) {
  obj->Set(v8::String::NewSymbol(symbol), v8::FunctionTemplate::New(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object. 
 */
void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol, v8::AccessorGetter getter, v8::AccessorSetter setter) {
  obj->SetAccessor(v8::String::NewSymbol(symbol), getter, setter);
}

void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    char buffer[256];
    char msg[512];
    int res;
    
    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    
    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GLenum swig_types[0]
#define SWIGTYPE_p_GLfloat swig_types[1]
#define SWIGTYPE_p_GLint swig_types[2]
#define SWIGTYPE_p_GLuint swig_types[3]
#define SWIGTYPE_p_Poco__FastMutex swig_types[4]
#define SWIGTYPE_p_Poco__File swig_types[5]
#define SWIGTYPE_p_TESSindex swig_types[6]
#define SWIGTYPE_p_char swig_types[7]
#define SWIGTYPE_p_charProps swig_types[8]
#define SWIGTYPE_p_double swig_types[9]
#define SWIGTYPE_p_filebuf swig_types[10]
#define SWIGTYPE_p_float swig_types[11]
#define SWIGTYPE_p_int swig_types[12]
#define SWIGTYPE_p_istream swig_types[13]
#define SWIGTYPE_p_ofAudioEventArgs swig_types[14]
#define SWIGTYPE_p_ofBaseApp swig_types[15]
#define SWIGTYPE_p_ofBaseHasTexture swig_types[16]
#define SWIGTYPE_p_ofBaseLoggerChannel swig_types[17]
#define SWIGTYPE_p_ofBuffer swig_types[18]
#define SWIGTYPE_p_ofCamera swig_types[19]
#define SWIGTYPE_p_ofColor_T_float_t swig_types[20]
#define SWIGTYPE_p_ofColor_T_unsigned_char_t swig_types[21]
#define SWIGTYPE_p_ofColor_T_unsigned_short_t swig_types[22]
#define SWIGTYPE_p_ofConsoleLoggerChannel swig_types[23]
#define SWIGTYPE_p_ofCoreEvents swig_types[24]
#define SWIGTYPE_p_ofDirectory swig_types[25]
#define SWIGTYPE_p_ofDragInfo swig_types[26]
#define SWIGTYPE_p_ofEasyCam swig_types[27]
#define SWIGTYPE_p_ofEntryEventArgs swig_types[28]
#define SWIGTYPE_p_ofEventArgs swig_types[29]
#define SWIGTYPE_p_ofEventT_ofAudioEventArgs_t swig_types[30]
#define SWIGTYPE_p_ofEventT_ofDragInfo_t swig_types[31]
#define SWIGTYPE_p_ofEventT_ofEntryEventArgs_t swig_types[32]
#define SWIGTYPE_p_ofEventT_ofEventArgs_t swig_types[33]
#define SWIGTYPE_p_ofEventT_ofKeyEventArgs_t swig_types[34]
#define SWIGTYPE_p_ofEventT_ofMessage_t swig_types[35]
#define SWIGTYPE_p_ofEventT_ofMouseEventArgs_t swig_types[36]
#define SWIGTYPE_p_ofEventT_ofResizeEventArgs_t swig_types[37]
#define SWIGTYPE_p_ofEventT_ofTouchEventArgs_t swig_types[38]
#define SWIGTYPE_p_ofFbo swig_types[39]
#define SWIGTYPE_p_ofFbo__Settings swig_types[40]
#define SWIGTYPE_p_ofFile swig_types[41]
#define SWIGTYPE_p_ofFileDialogResult swig_types[42]
#define SWIGTYPE_p_ofFileLoggerChannel swig_types[43]
#define SWIGTYPE_p_ofFilePath swig_types[44]
#define SWIGTYPE_p_ofImage_T_float_t swig_types[45]
#define SWIGTYPE_p_ofImage_T_unsigned_char_t swig_types[46]
#define SWIGTYPE_p_ofImage_T_unsigned_short_t swig_types[47]
#define SWIGTYPE_p_ofKeyEventArgs swig_types[48]
#define SWIGTYPE_p_ofLight swig_types[49]
#define SWIGTYPE_p_ofLog swig_types[50]
#define SWIGTYPE_p_ofLogError swig_types[51]
#define SWIGTYPE_p_ofLogFatalError swig_types[52]
#define SWIGTYPE_p_ofLogNotice swig_types[53]
#define SWIGTYPE_p_ofLogVerbose swig_types[54]
#define SWIGTYPE_p_ofLogWarning swig_types[55]
#define SWIGTYPE_p_ofMaterial swig_types[56]
#define SWIGTYPE_p_ofMatrix3x3 swig_types[57]
#define SWIGTYPE_p_ofMatrix4x4 swig_types[58]
#define SWIGTYPE_p_ofMesh swig_types[59]
#define SWIGTYPE_p_ofMessage swig_types[60]
#define SWIGTYPE_p_ofMouseEventArgs swig_types[61]
#define SWIGTYPE_p_ofNode swig_types[62]
#define SWIGTYPE_p_ofPath swig_types[63]
#define SWIGTYPE_p_ofPixels_T_float_t swig_types[64]
#define SWIGTYPE_p_ofPixels_T_unsigned_char_t swig_types[65]
#define SWIGTYPE_p_ofPixels_T_unsigned_short_t swig_types[66]
#define SWIGTYPE_p_ofPolyline swig_types[67]
#define SWIGTYPE_p_ofPtrT_ofBaseLoggerChannel_t swig_types[68]
#define SWIGTYPE_p_ofPtrT_ofBaseRenderer_t swig_types[69]
#define SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t swig_types[70]
#define SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t swig_types[71]
#define SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t swig_types[72]
#define SWIGTYPE_p_ofPtrT_ofGLRenderer_t swig_types[73]
#define SWIGTYPE_p_ofQuaternion swig_types[74]
#define SWIGTYPE_p_ofRectangle swig_types[75]
#define SWIGTYPE_p_ofResizeEventArgs swig_types[76]
#define SWIGTYPE_p_ofSerialDeviceInfo swig_types[77]
#define SWIGTYPE_p_ofShader swig_types[78]
#define SWIGTYPE_p_ofSoundPlayer swig_types[79]
#define SWIGTYPE_p_ofStyle swig_types[80]
#define SWIGTYPE_p_ofSubPath swig_types[81]
#define SWIGTYPE_p_ofSubPath__Command swig_types[82]
#define SWIGTYPE_p_ofTessellator swig_types[83]
#define SWIGTYPE_p_ofTexture swig_types[84]
#define SWIGTYPE_p_ofTextureData swig_types[85]
#define SWIGTYPE_p_ofTouchEventArgs swig_types[86]
#define SWIGTYPE_p_ofTrueTypeFont swig_types[87]
#define SWIGTYPE_p_ofVbo swig_types[88]
#define SWIGTYPE_p_ofVboMesh swig_types[89]
#define SWIGTYPE_p_ofVec2f swig_types[90]
#define SWIGTYPE_p_ofVec3f swig_types[91]
#define SWIGTYPE_p_ofVec4f swig_types[92]
#define SWIGTYPE_p_ofVideoGrabber swig_types[93]
#define SWIGTYPE_p_ofVideoPlayer swig_types[94]
#define SWIGTYPE_p_ostream swig_types[95]
#define SWIGTYPE_p_std__string swig_types[96]
#define SWIGTYPE_p_std__vectorT_TESSindex_t swig_types[97]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[98]
#define SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t swig_types[99]
#define SWIGTYPE_p_std__vectorT_ofFile_t swig_types[100]
#define SWIGTYPE_p_std__vectorT_ofPath_t swig_types[101]
#define SWIGTYPE_p_std__vectorT_ofPolyline_t swig_types[102]
#define SWIGTYPE_p_std__vectorT_ofSubPath__Command_t swig_types[103]
#define SWIGTYPE_p_std__vectorT_ofSubPath_t swig_types[104]
#define SWIGTYPE_p_std__vectorT_ofVec2f_t swig_types[105]
#define SWIGTYPE_p_std__vectorT_ofVec3f_t swig_types[106]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[107]
#define SWIGTYPE_p_uint64_t swig_types[108]
#define SWIGTYPE_p_unsigned_char swig_types[109]
#define SWIGTYPE_p_unsigned_int swig_types[110]
#define SWIGTYPE_p_unsigned_short swig_types[111]
#define SWIGTYPE_p_va_list swig_types[112]
static swig_type_info *swig_types[114];
static swig_module_info swig_module = {swig_types, 113, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x020006 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>



#ifdef SWIG_init
#undef SWIG_init
#endif
#define SWIG_init of_openlibs

#define SWIG_FILE_WITH_INIT
#include "../../../libs/openFrameworks/ofMain.h"

#undef check
#define BUILDING_NODE_EXTENSION

inline unsigned char
ofColor__Sl_unsigned_SS_char_Sg__r_set(ofColor_< unsigned char > *o, unsigned char v)
{ o->r = v; }

inline unsigned char
ofColor__Sl_unsigned_SS_char_Sg__r_get(ofColor_< unsigned char > *o)
{ return o->r; }
inline unsigned char
ofColor__Sl_unsigned_SS_char_Sg__g_set(ofColor_< unsigned char > *o, unsigned char v)
{ o->g = v; }

inline unsigned char
ofColor__Sl_unsigned_SS_char_Sg__g_get(ofColor_< unsigned char > *o)
{ return o->g; }
inline unsigned char
ofColor__Sl_unsigned_SS_char_Sg__b_set(ofColor_< unsigned char > *o, unsigned char v)
{ o->b = v; }

inline unsigned char
ofColor__Sl_unsigned_SS_char_Sg__b_get(ofColor_< unsigned char > *o)
{ return o->b; }
inline unsigned char
ofColor__Sl_unsigned_SS_char_Sg__a_set(ofColor_< unsigned char > *o, unsigned char v)
{ o->a = v; }

inline unsigned char
ofColor__Sl_unsigned_SS_char_Sg__a_get(ofColor_< unsigned char > *o)
{ return o->a; }
inline float
ofColor__Sl_float_Sg__r_set(ofColor_< float > *o, float v)
{ o->r = v; }

inline float
ofColor__Sl_float_Sg__r_get(ofColor_< float > *o)
{ return o->r; }
inline float
ofColor__Sl_float_Sg__g_set(ofColor_< float > *o, float v)
{ o->g = v; }

inline float
ofColor__Sl_float_Sg__g_get(ofColor_< float > *o)
{ return o->g; }
inline float
ofColor__Sl_float_Sg__b_set(ofColor_< float > *o, float v)
{ o->b = v; }

inline float
ofColor__Sl_float_Sg__b_get(ofColor_< float > *o)
{ return o->b; }
inline float
ofColor__Sl_float_Sg__a_set(ofColor_< float > *o, float v)
{ o->a = v; }

inline float
ofColor__Sl_float_Sg__a_get(ofColor_< float > *o)
{ return o->a; }
inline unsigned short
ofColor__Sl_unsigned_SS_short_Sg__r_set(ofColor_< unsigned short > *o, unsigned short v)
{ o->r = v; }

inline unsigned short
ofColor__Sl_unsigned_SS_short_Sg__r_get(ofColor_< unsigned short > *o)
{ return o->r; }
inline unsigned short
ofColor__Sl_unsigned_SS_short_Sg__g_set(ofColor_< unsigned short > *o, unsigned short v)
{ o->g = v; }

inline unsigned short
ofColor__Sl_unsigned_SS_short_Sg__g_get(ofColor_< unsigned short > *o)
{ return o->g; }
inline unsigned short
ofColor__Sl_unsigned_SS_short_Sg__b_set(ofColor_< unsigned short > *o, unsigned short v)
{ o->b = v; }

inline unsigned short
ofColor__Sl_unsigned_SS_short_Sg__b_get(ofColor_< unsigned short > *o)
{ return o->b; }
inline unsigned short
ofColor__Sl_unsigned_SS_short_Sg__a_set(ofColor_< unsigned short > *o, unsigned short v)
{ o->a = v; }

inline unsigned short
ofColor__Sl_unsigned_SS_short_Sg__a_get(ofColor_< unsigned short > *o)
{ return o->a; }



SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}





#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN 
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();
  
  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN 
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val) 
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  
  long longVal = (long) obj->NumberValue();
  
  if(longVal < 0) {
      return SWIG_OverflowError;
  }
  
  if(val) *val = longVal; 
  
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (v8::Handle<v8::Value> obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned int)(v);
    }
  }  
  return res;
}


std::string* SWIGV8_valueToStringPtr(v8::Handle<v8::Value> val) {

  if (!val->IsString()) return 0;

  int alloc;
  size_t size;
  char* chars;
  int res = SWIG_AsCharPtrAndSize(val, &chars, &size, &alloc);

  if(res != SWIG_OK) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Could not convert to string.")));
    return 0;
  }

  // copies the data (again)
  std::string *str = new std::string(chars);

  if (alloc) delete[] chars;

  return str;
}


SWIGINTERNINLINE 
v8::Handle<v8::Value> 
SWIG_From_bool  (bool value)
{
  return v8::Boolean::New(value);
}


SWIGINTERN 
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();
  
  return SWIG_OK;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return v8::Undefined();
    } else {
      v8::Handle<v8::String> js_str = v8::String::New(carray, size);
      return js_str;
    }
  } else {
    return v8::Undefined();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


v8::Handle<v8::Value> SWIGV8_stringToValue(const std::string &str) {
  return SWIG_FromCharPtrAndSize(str.c_str(), str.length());
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return v8::Number::New(value);
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }
  
  if (val) *val = obj->BooleanValue();
  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return v8::Int32::New(value);
}


SWIGINTERN 
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsInt32()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();
  
  return SWIG_OK;
}


SWIGINTERNINLINE 
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    v8::Integer::NewFromUnsigned(value) : v8::Integer::New((long)(value)); 
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_float (v8::Handle<v8::Value> obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (float)(v);
    }
  }  
  return res;
}


SWIGINTERN 
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return v8::Number::New(val);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (v8::Handle<v8::Value> obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned char)(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (v8::Handle<v8::Value> obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned short)(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharArray(v8::Handle<v8::Value> obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (v8::Handle<v8::Value> obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = (char)(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsVal_short (v8::Handle<v8::Value> obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (short)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  ((unsigned long)(value));
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = (size_t)(v);
  return res;
}


SWIGV8_ClientData _ofBuffer_clientData;
SWIGV8_ClientData _ofFilePath_clientData;
SWIGV8_ClientData _ofFile_clientData;
SWIGV8_ClientData _ofDirectory_clientData;
SWIGV8_ClientData _ofRectangle_clientData;
SWIGV8_ClientData _ofSerialDeviceInfo_clientData;
SWIGV8_ClientData _ofStyle_clientData;
SWIGV8_ClientData _ofColor_T_unsigned_char_t_clientData;
SWIGV8_ClientData _ofColor_T_float_t_clientData;
SWIGV8_ClientData _ofColor_T_unsigned_short_t_clientData;
SWIGV8_ClientData _ofImage_T_unsigned_char_t_clientData;
SWIGV8_ClientData _ofImage_T_float_t_clientData;
SWIGV8_ClientData _ofImage_T_unsigned_short_t_clientData;
SWIGV8_ClientData _ofPixels_T_unsigned_char_t_clientData;
SWIGV8_ClientData _ofPixels_T_float_t_clientData;
SWIGV8_ClientData _ofPixels_T_unsigned_short_t_clientData;
SWIGV8_ClientData _ofDragInfo_clientData;
SWIGV8_ClientData _ofEventArgs_clientData;
SWIGV8_ClientData _ofEntryEventArgs_clientData;
SWIGV8_ClientData _ofKeyEventArgs_clientData;
SWIGV8_ClientData _ofMouseEventArgs_clientData;
SWIGV8_ClientData _ofTouchEventArgs_clientData;
SWIGV8_ClientData _ofAudioEventArgs_clientData;
SWIGV8_ClientData _ofResizeEventArgs_clientData;
SWIGV8_ClientData _ofMessage_clientData;
SWIGV8_ClientData _ofCoreEvents_clientData;
SWIGV8_ClientData _ofNode_clientData;
SWIGV8_ClientData _ofCamera_clientData;
SWIGV8_ClientData _ofEasyCam_clientData;
SWIGV8_ClientData _ofMesh_clientData;
SWIGV8_ClientData _ofFbo_clientData;
SWIGV8_ClientData _ofLight_clientData;
SWIGV8_ClientData _ofMaterial_clientData;
SWIGV8_ClientData _ofShader_clientData;
SWIGV8_ClientData _ofTextureData_clientData;
SWIGV8_ClientData _ofTexture_clientData;
SWIGV8_ClientData _ofVbo_clientData;
SWIGV8_ClientData _ofVboMesh_clientData;
SWIGV8_ClientData _ofPath_clientData;
SWIGV8_ClientData _ofSubPath_clientData;
SWIGV8_ClientData _ofPolyline_clientData;
SWIGV8_ClientData _ofTessellator_clientData;
SWIGV8_ClientData _charProps_clientData;
SWIGV8_ClientData _ofTrueTypeFont_clientData;
SWIGV8_ClientData _ofMatrix3x3_clientData;
SWIGV8_ClientData _ofMatrix4x4_clientData;
SWIGV8_ClientData _ofQuaternion_clientData;
SWIGV8_ClientData _ofVec2f_clientData;
SWIGV8_ClientData _ofVec3f_clientData;
SWIGV8_ClientData _ofVec4f_clientData;
SWIGV8_ClientData _ofSoundPlayer_clientData;
SWIGV8_ClientData _ofLog_clientData;
SWIGV8_ClientData _ofLogVerbose_clientData;
SWIGV8_ClientData _ofLogNotice_clientData;
SWIGV8_ClientData _ofLogWarning_clientData;
SWIGV8_ClientData _ofLogError_clientData;
SWIGV8_ClientData _ofLogFatalError_clientData;
SWIGV8_ClientData _ofBaseLoggerChannel_clientData;
SWIGV8_ClientData _ofConsoleLoggerChannel_clientData;
SWIGV8_ClientData _ofFileLoggerChannel_clientData;
SWIGV8_ClientData _ofFileDialogResult_clientData;
SWIGV8_ClientData _ofVideoGrabber_clientData;
SWIGV8_ClientData _ofVideoPlayer_clientData;
SWIGV8_ClientData SWIGTYPE_p_std__vectorT_ofPath_t_clientData;
SWIGV8_ClientData SWIGTYPE_p_std__vectorT_std__string_t_clientData;
SWIGV8_ClientData SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t_clientData;
SWIGV8_ClientData SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t_clientData;
SWIGV8_ClientData SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t_clientData;
SWIGV8_ClientData SWIGTYPE_p_ofPtrT_ofGLRenderer_t_clientData;
SWIGV8_ClientData SWIGTYPE_p_uint64_t_clientData;
SWIGV8_ClientData SWIGTYPE_p_TESSindex_clientData;
SWIGV8_ClientData SWIGTYPE_p_GLuint_clientData;
SWIGV8_ClientData SWIGTYPE_p_GLint_clientData;
SWIGV8_ClientData SWIGTYPE_p_std__vectorT_ofFile_t_clientData;


v8::Handle<v8::Value> _wrap_new_ofBuffer__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofBuffer *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofBuffer__SWIG_0.");  
  result = (ofBuffer *)new ofBuffer();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofBuffer, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofBuffer__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  ofBuffer *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofBuffer__SWIG_1.");  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofBuffer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofBuffer" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  result = (ofBuffer *)new ofBuffer((char const *)arg1,arg2);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofBuffer, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofBuffer__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  ofBuffer *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofBuffer__SWIG_2.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofBuffer *)new ofBuffer((std::string const &)*arg1);
  
  
  if (arg1) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofBuffer, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofBuffer__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  istream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofBuffer *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofBuffer__SWIG_3.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofBuffer" "', argument " "1"" of type '" "istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofBuffer" "', argument " "1"" of type '" "istream &""'"); 
  }
  arg1 = (istream *)(argp1);
  result = (ofBuffer *)new ofBuffer(*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofBuffer, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofBuffer__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofBuffer *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofBuffer *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofBuffer__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofBuffer" "', argument " "1"" of type '" "ofBuffer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofBuffer" "', argument " "1"" of type '" "ofBuffer const &""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  result = (ofBuffer *)new ofBuffer((ofBuffer const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofBuffer, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofBuffer(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofBuffer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofBuffer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofBuffer__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofBuffer__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofBuffer__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofBuffer");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofBuffer(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofBuffer(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofBuffer *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofBuffer_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_set" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBuffer_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBuffer_set" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  (arg1)->set((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBuffer_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_set" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  
  arg2 = SWIGV8_valueToStringPtr(args[0]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  (arg1)->set((std::string const &)*arg2);
  jsresult = v8::Undefined();
  
  
  if (arg2) delete arg2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBuffer_set__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_set" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBuffer_set" "', argument " "2"" of type '" "istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBuffer_set" "', argument " "2"" of type '" "istream &""'"); 
  }
  arg2 = (istream *)(argp2);
  result = (bool)(arg1)->set(*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBuffer_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBuffer_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBuffer_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBuffer_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_append__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_append" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  
  arg2 = SWIGV8_valueToStringPtr(args[0]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  (arg1)->append((std::string const &)*arg2);
  jsresult = v8::Undefined();
  
  
  if (arg2) delete arg2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBuffer_append__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_append" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBuffer_append" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBuffer_append" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  (arg1)->append((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBuffer_append(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBuffer_append__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBuffer_append__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function append.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_writeTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBuffer_writeTo.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_writeTo" "', argument " "1"" of type '" "ofBuffer const *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBuffer_writeTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBuffer_writeTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = (ostream *)(argp2);
  result = (bool)((ofBuffer const *)arg1)->writeTo(*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBuffer_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_clear" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_allocate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBuffer_allocate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_allocate" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBuffer_allocate" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = (long)(val2);
  (arg1)->allocate(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_getBinaryBuffer__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_getBinaryBuffer" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  result = (char *)(arg1)->getBinaryBuffer();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBuffer_getBinaryBuffer__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_getBinaryBuffer" "', argument " "1"" of type '" "ofBuffer const *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  result = (char *)((ofBuffer const *)arg1)->getBinaryBuffer();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBuffer_getBinaryBuffer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBuffer_getBinaryBuffer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBuffer_getBinaryBuffer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getBinaryBuffer.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_getText(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBuffer_getText.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_getText" "', argument " "1"" of type '" "ofBuffer const *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  result = ((ofBuffer const *)arg1)->getText();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_size(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBuffer_size.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_size" "', argument " "1"" of type '" "ofBuffer const *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  result = (long)((ofBuffer const *)arg1)->size();
  jsresult = SWIG_From_long((long)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_getNextLine(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBuffer_getNextLine.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_getNextLine" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  result = (arg1)->getNextLine();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_getFirstLine(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBuffer_getFirstLine.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_getFirstLine" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  result = (arg1)->getFirstLine();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_isLastLine(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBuffer_isLastLine.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_isLastLine" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  result = (bool)(arg1)->isLastLine();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBuffer_resetLineReader(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBuffer *arg1 = (ofBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBuffer_resetLineReader.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBuffer_resetLineReader" "', argument " "1"" of type '" "ofBuffer *""'"); 
  }
  arg1 = (ofBuffer *)(argp1);
  (arg1)->resetLineReader();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBufferFromFile__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  ofBuffer result;
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBufferFromFile" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = ofBufferFromFile((std::string const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new ofBuffer((const ofBuffer&)(result))), SWIGTYPE_p_ofBuffer, SWIG_POINTER_OWN |  0 );
  
  if (arg1) delete arg1;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBufferFromFile__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  ofBuffer result;
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = ofBufferFromFile((std::string const &)*arg1);
  jsresult = SWIG_NewPointerObj((new ofBuffer((const ofBuffer&)(result))), SWIGTYPE_p_ofBuffer, SWIG_POINTER_OWN |  0 );
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofBufferFromFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBufferFromFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBufferFromFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofBufferFromFile.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBufferToFile__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  bool arg3 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBufferToFile" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBufferToFile" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBufferToFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)ofBufferToFile((std::string const &)*arg1,*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (arg1) delete arg1;
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBufferToFile__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBufferToFile" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBufferToFile" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  result = (bool)ofBufferToFile((std::string const &)*arg1,*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (arg1) delete arg1;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofBufferToFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBufferToFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBufferToFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofBufferToFile.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getFileExt(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_getFileExt.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::getFileExt(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_removeExt(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_removeExt.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::removeExt(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_addLeadingSlash(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_addLeadingSlash.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::addLeadingSlash(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_addTrailingSlash(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_addTrailingSlash.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::addTrailingSlash(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_removeTrailingSlash(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_removeTrailingSlash.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::removeTrailingSlash(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getPathForDirectory(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_getPathForDirectory.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::getPathForDirectory(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getAbsolutePath__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFilePath_getAbsolutePath" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = ofFilePath::getAbsolutePath(arg1,arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFilePath_getAbsolutePath__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::getAbsolutePath(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFilePath_getAbsolutePath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFilePath_getAbsolutePath__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFilePath_getAbsolutePath__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getAbsolutePath.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_isAbsolute(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_isAbsolute.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = (bool)ofFilePath::isAbsolute(arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getFileName__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFilePath_getFileName" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = ofFilePath::getFileName(arg1,arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFilePath_getFileName__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::getFileName(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFilePath_getFileName(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFilePath_getFileName__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFilePath_getFileName__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getFileName.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getBaseName(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_getBaseName.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::getBaseName(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getEnclosingDirectory__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFilePath_getEnclosingDirectory" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = ofFilePath::getEnclosingDirectory(arg1,arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFilePath_getEnclosingDirectory__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofFilePath::getEnclosingDirectory(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFilePath_getEnclosingDirectory(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFilePath_getEnclosingDirectory__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFilePath_getEnclosingDirectory__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getEnclosingDirectory.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getCurrentWorkingDirectory(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_getCurrentWorkingDirectory.");  
  
  result = ofFilePath::getCurrentWorkingDirectory();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_join(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  std::string result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_join.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = ofFilePath::join(arg1,arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getCurrentExePath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_getCurrentExePath.");  
  
  result = ofFilePath::getCurrentExePath();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getCurrentExeDir(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_getCurrentExeDir.");  
  
  result = ofFilePath::getCurrentExeDir();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFilePath_getUserHomeDir(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFilePath_getUserHomeDir.");  
  
  result = ofFilePath::getUserHomeDir();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFilePath(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFilePath *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFilePath.");  
  result = (ofFilePath *)new ofFilePath();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFilePath, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofFilePath(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofFilePath(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofFilePath *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofFile_Reference(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofFile::Reference));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_ReadOnly(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofFile::ReadOnly));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_WriteOnly(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofFile::WriteOnly));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_ReadWrite(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofFile::ReadWrite));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_Append(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofFile::Append));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFile__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFile *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFile__SWIG_0.");  
  result = (ofFile *)new ofFile();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFile, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFile__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  ofFile::Mode arg2 ;
  bool arg3 ;
  std::string *tmp1 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  ofFile *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFile__SWIG_1.");  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofFile" "', argument " "2"" of type '" "ofFile::Mode""'");
  } 
  arg2 = (ofFile::Mode)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (ofFile *)new ofFile(arg1,arg2,arg3);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFile, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFile__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  ofFile::Mode arg2 ;
  std::string *tmp1 ;
  int val2 ;
  int ecode2 = 0 ;
  ofFile *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFile__SWIG_2.");  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofFile" "', argument " "2"" of type '" "ofFile::Mode""'");
  } 
  arg2 = (ofFile::Mode)(val2);
  result = (ofFile *)new ofFile(arg1,arg2);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFile, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFile__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  std::string *tmp1 ;
  ofFile *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFile__SWIG_3.");  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = (ofFile *)new ofFile(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFile, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFile__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFile *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofFile *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFile__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofFile" "', argument " "1"" of type '" "ofFile const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofFile" "', argument " "1"" of type '" "ofFile const &""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (ofFile *)new ofFile((ofFile const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFile, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFile(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFile__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFile__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFile__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofFile");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofFile(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofFile(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofFile *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofFile_open__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  ofFile::Mode arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_open" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_open" "', argument " "3"" of type '" "ofFile::Mode""'");
  } 
  arg3 = (ofFile::Mode)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFile_open" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->open(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_open__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  ofFile::Mode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_open" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_open" "', argument " "3"" of type '" "ofFile::Mode""'");
  } 
  arg3 = (ofFile::Mode)(val3);
  result = (bool)(arg1)->open(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_open__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_open" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->open(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_open(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_open__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_open__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_open__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function open.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_changeMode__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  ofFile::Mode arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_changeMode" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFile_changeMode" "', argument " "2"" of type '" "ofFile::Mode""'");
  } 
  arg2 = (ofFile::Mode)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_changeMode" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)(arg1)->changeMode(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_changeMode__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  ofFile::Mode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_changeMode" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFile_changeMode" "', argument " "2"" of type '" "ofFile::Mode""'");
  } 
  arg2 = (ofFile::Mode)(val2);
  result = (bool)(arg1)->changeMode(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_changeMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_changeMode__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_changeMode__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function changeMode.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_close(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_close.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_close" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  (arg1)->close();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_create(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_create.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_create" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)(arg1)->create();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_exists(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_exists.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_exists" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)((ofFile const *)arg1)->exists();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_path(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_path.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_path" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = ((ofFile const *)arg1)->path();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_getExtension(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_getExtension.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_getExtension" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = ((ofFile const *)arg1)->getExtension();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_getFileName(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_getFileName.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_getFileName" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = ((ofFile const *)arg1)->getFileName();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_getBaseName(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_getBaseName.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_getBaseName" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = ((ofFile const *)arg1)->getBaseName();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_getEnclosingDirectory(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_getEnclosingDirectory.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_getEnclosingDirectory" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = ((ofFile const *)arg1)->getEnclosingDirectory();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_getAbsolutePath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_getAbsolutePath.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_getAbsolutePath" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = ((ofFile const *)arg1)->getAbsolutePath();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_canRead(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_canRead.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_canRead" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)((ofFile const *)arg1)->canRead();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_canWrite(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_canWrite.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_canWrite" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)((ofFile const *)arg1)->canWrite();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_canExecute(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_canExecute.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_canExecute" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)((ofFile const *)arg1)->canExecute();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_isFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_isFile.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_isFile" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)((ofFile const *)arg1)->isFile();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_isLink(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_isLink.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_isLink" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)((ofFile const *)arg1)->isLink();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_isDirectory(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_isDirectory.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_isDirectory" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)((ofFile const *)arg1)->isDirectory();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_isDevice(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_isDevice.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_isDevice" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)((ofFile const *)arg1)->isDevice();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_isHidden(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_isHidden.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_isHidden" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)((ofFile const *)arg1)->isHidden();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_setWriteable(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_setWriteable.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_setWriteable" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFile_setWriteable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setWriteable(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_setReadOnly(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_setReadOnly.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_setReadOnly" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFile_setReadOnly" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setReadOnly(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_setExecutable(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_setExecutable.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_setExecutable" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFile_setExecutable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setExecutable(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_copyTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_copyTo" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_copyTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFile_copyTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->copyTo(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_copyTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_copyTo" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_copyTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)(arg1)->copyTo(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_copyTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_copyTo" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->copyTo(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_copyTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_copyTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_copyTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_copyTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function copyTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_moveTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_moveTo" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_moveTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFile_moveTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->moveTo(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_moveTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_moveTo" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_moveTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)(arg1)->moveTo(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_moveTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_moveTo" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->moveTo(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_moveTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_moveTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_moveTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_moveTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function moveTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_renameTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_renameTo" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_renameTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFile_renameTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->renameTo(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_renameTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_renameTo" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_renameTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)(arg1)->renameTo(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_renameTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_renameTo" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->renameTo(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_renameTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_renameTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_renameTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_renameTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function renameTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_remove__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_remove" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFile_remove" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (bool)(arg1)->remove(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_remove__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_remove" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (bool)(arg1)->remove();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_remove(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_remove__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_remove__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function remove.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_getSize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_getSize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_getSize" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = ((ofFile const *)arg1)->getSize();
  jsresult = SWIG_NewPointerObj((new uint64_t((const uint64_t&)(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_getPocoFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Poco::File *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_getPocoFile.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_getPocoFile" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (Poco::File *) &(arg1)->getPocoFile();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Poco__File, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_readToBuffer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofBuffer result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_readToBuffer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_readToBuffer" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (arg1)->readToBuffer();
  jsresult = SWIG_NewPointerObj((new ofBuffer((const ofBuffer&)(result))), SWIGTYPE_p_ofBuffer, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_writeFromBuffer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_writeFromBuffer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_writeFromBuffer" "', argument " "1"" of type '" "ofFile *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFile_writeFromBuffer" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFile_writeFromBuffer" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  result = (bool)(arg1)->writeFromBuffer(*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_getFileBuffer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFile *arg1 = (ofFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  filebuf *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFile_getFileBuffer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFile_getFileBuffer" "', argument " "1"" of type '" "ofFile const *""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (filebuf *)((ofFile const *)arg1)->getFileBuffer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_filebuf, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_copyFromTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_copyFromTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFile_copyFromTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)ofFile::copyFromTo(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_copyFromTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  bool arg3 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_copyFromTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)ofFile::copyFromTo(arg1,arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_copyFromTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)ofFile::copyFromTo(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_copyFromTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_copyFromTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_copyFromTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_copyFromTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function copyFromTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_moveFromTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_moveFromTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFile_moveFromTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)ofFile::moveFromTo(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_moveFromTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  bool arg3 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFile_moveFromTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)ofFile::moveFromTo(arg1,arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_moveFromTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)ofFile::moveFromTo(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_moveFromTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_moveFromTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_moveFromTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_moveFromTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function moveFromTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_doesFileExist__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFile_doesFileExist" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (bool)ofFile::doesFileExist(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_doesFileExist__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = (bool)ofFile::doesFileExist(arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_doesFileExist(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_doesFileExist__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_doesFileExist__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function doesFileExist.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFile_removeFile__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFile_removeFile" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (bool)ofFile::removeFile(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_removeFile__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = (bool)ofFile::removeFile(arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFile_removeFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_removeFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFile_removeFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function removeFile.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofDirectory__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofDirectory *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofDirectory__SWIG_0.");  
  result = (ofDirectory *)new ofDirectory();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofDirectory, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofDirectory__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  std::string *tmp1 ;
  ofDirectory *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofDirectory__SWIG_1.");  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = (ofDirectory *)new ofDirectory(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofDirectory, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofDirectory(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofDirectory__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofDirectory__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofDirectory");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_open(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_open.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_open" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  (arg1)->open(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_close(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_close.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_close" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  (arg1)->close();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_create__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_create" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_create" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (bool)(arg1)->create(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_create__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_create" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (bool)(arg1)->create();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_create(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_create__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_create__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function create.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_exists(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_exists.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_exists" "', argument " "1"" of type '" "ofDirectory const *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (bool)((ofDirectory const *)arg1)->exists();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_path(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_path.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_path" "', argument " "1"" of type '" "ofDirectory const *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = ((ofDirectory const *)arg1)->path();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_getAbsolutePath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_getAbsolutePath.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getAbsolutePath" "', argument " "1"" of type '" "ofDirectory const *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = ((ofDirectory const *)arg1)->getAbsolutePath();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_isDirectory(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_isDirectory.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_isDirectory" "', argument " "1"" of type '" "ofDirectory const *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (bool)((ofDirectory const *)arg1)->isDirectory();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_isHidden(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_isHidden.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_isHidden" "', argument " "1"" of type '" "ofDirectory const *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (bool)((ofDirectory const *)arg1)->isHidden();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_setWriteable(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_setWriteable.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_setWriteable" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_setWriteable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setWriteable(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_setReadOnly(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_setReadOnly.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_setReadOnly" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_setReadOnly" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setReadOnly(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_setExecutable(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_setExecutable.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_setExecutable" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_setExecutable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setExecutable(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_setShowHidden(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_setShowHidden.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_setShowHidden" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_setShowHidden" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setShowHidden(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_copyTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_copyTo" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_copyTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDirectory_copyTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->copyTo(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_copyTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_copyTo" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_copyTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)(arg1)->copyTo(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_copyTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_copyTo" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->copyTo(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_copyTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_copyTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_copyTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_copyTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function copyTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_moveTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_moveTo" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_moveTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDirectory_moveTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->moveTo(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_moveTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_moveTo" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_moveTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)(arg1)->moveTo(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_moveTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_moveTo" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->moveTo(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_moveTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_moveTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_moveTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_moveTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function moveTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_renameTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_renameTo" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_renameTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDirectory_renameTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->renameTo(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_renameTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_renameTo" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_renameTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)(arg1)->renameTo(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_renameTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_renameTo" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->renameTo(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_renameTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_renameTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_renameTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_renameTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function renameTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_remove(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_remove.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_remove" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_remove" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (bool)(arg1)->remove(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_allowExt(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_allowExt.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_allowExt" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  (arg1)->allowExt(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_listDir__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_listDir" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (int)(arg1)->listDir(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_listDir__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_listDir" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (int)(arg1)->listDir();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_listDir(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_listDir__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_listDir__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function listDir.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_getOriginalDirectory(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_getOriginalDirectory.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getOriginalDirectory" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (arg1)->getOriginalDirectory();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_getName(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_getName.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getName" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_getName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  result = (arg1)->getName(arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_getPath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_getPath.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getPath" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_getPath" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  result = (arg1)->getPath(arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_getFile__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ;
  ofFile::Mode arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  ofFile result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getFile" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_getFile" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_getFile" "', argument " "3"" of type '" "ofFile::Mode""'");
  } 
  arg3 = (ofFile::Mode)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDirectory_getFile" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (arg1)->getFile(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofFile((const ofFile&)(result))), SWIGTYPE_p_ofFile, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_getFile__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ;
  ofFile::Mode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofFile result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getFile" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_getFile" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_getFile" "', argument " "3"" of type '" "ofFile::Mode""'");
  } 
  arg3 = (ofFile::Mode)(val3);
  result = (arg1)->getFile(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofFile((const ofFile&)(result))), SWIGTYPE_p_ofFile, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_getFile__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  ofFile result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getFile" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_getFile" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  result = (arg1)->getFile(arg2);
  jsresult = SWIG_NewPointerObj((new ofFile((const ofFile&)(result))), SWIGTYPE_p_ofFile, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_getFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_getFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_getFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_getFile__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getFile.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_getFiles(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< ofFile > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_getFiles.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getFiles" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (arg1)->getFiles();
  jsresult = SWIG_NewPointerObj((new std::vector< ofFile >((const std::vector< ofFile >&)(result))), SWIGTYPE_p_std__vectorT_ofFile_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_getShowHidden(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_getShowHidden.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getShowHidden" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (bool)(arg1)->getShowHidden();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_reset(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_reset.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_reset" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  (arg1)->reset();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_sort(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_sort.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_sort" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  (arg1)->sort();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_size(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_size.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_size" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (unsigned int)(arg1)->size();
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_numFiles(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_numFiles.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_numFiles" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (int)(arg1)->numFiles();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_getPocoFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDirectory *arg1 = (ofDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Poco::File *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDirectory_getPocoFile.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDirectory_getPocoFile" "', argument " "1"" of type '" "ofDirectory *""'"); 
  }
  arg1 = (ofDirectory *)(argp1);
  result = (Poco::File *) &(arg1)->getPocoFile();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Poco__File, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_createDirectory__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_createDirectory" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_createDirectory" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)ofDirectory::createDirectory(arg1,arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_createDirectory__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_createDirectory" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (bool)ofDirectory::createDirectory(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_createDirectory__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = (bool)ofDirectory::createDirectory(arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_createDirectory(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_createDirectory__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_createDirectory__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_createDirectory__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function createDirectory.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_isDirectoryEmpty__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_isDirectoryEmpty" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (bool)ofDirectory::isDirectoryEmpty(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_isDirectoryEmpty__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = (bool)ofDirectory::isDirectoryEmpty(arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_isDirectoryEmpty(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_isDirectoryEmpty__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_isDirectoryEmpty__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function isDirectoryEmpty.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_doesDirectoryExist__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_doesDirectoryExist" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (bool)ofDirectory::doesDirectoryExist(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_doesDirectoryExist__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = (bool)ofDirectory::doesDirectoryExist(arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_doesDirectoryExist(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_doesDirectoryExist__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_doesDirectoryExist__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function doesDirectoryExist.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDirectory_removeDirectory__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_removeDirectory" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDirectory_removeDirectory" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)ofDirectory::removeDirectory(arg1,arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_removeDirectory__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDirectory_removeDirectory" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (bool)ofDirectory::removeDirectory(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDirectory_removeDirectory(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_removeDirectory__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDirectory_removeDirectory__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function removeDirectory.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofDirectory(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofDirectory(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofDirectory *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofRectangle__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofRectangle *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofRectangle__SWIG_0.");  
  result = (ofRectangle *)new ofRectangle();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofRectangle(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofRectangle(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofRectangle *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofRectangle__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofRectangle *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofRectangle__SWIG_1.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofRectangle" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofRectangle" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofRectangle" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofRectangle" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (ofRectangle *)new ofRectangle(arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofRectangle__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPoint *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofRectangle *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofRectangle__SWIG_2.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofRectangle" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofRectangle" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofRectangle" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofRectangle" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofRectangle *)new ofRectangle((ofPoint const &)*arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofRectangle__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofRectangle *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofRectangle *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofRectangle__SWIG_3.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofRectangle" "', argument " "1"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofRectangle" "', argument " "1"" of type '" "ofRectangle const &""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (ofRectangle *)new ofRectangle((ofRectangle const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofRectangle__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPoint *arg1 = 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofRectangle *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofRectangle__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofRectangle" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofRectangle" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ofRectangle" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofRectangle" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  result = (ofRectangle *)new ofRectangle((ofPoint const &)*arg1,(ofPoint const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofRectangle(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofRectangle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    self = _wrap_new_ofRectangle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    self = _wrap_new_ofRectangle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofRectangle__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofRectangle__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofRectangle");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_set" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofRectangle_set" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_set" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_set" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_set" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->set((ofPoint const &)*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_set__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_set" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_set" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_set" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  (arg1)->set((ofRectangle const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_set__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_set" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_set" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_set" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofRectangle_set" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_set" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  (arg1)->set((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_set__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_setX(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_setX.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_setX" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_setX" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setX(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_setY(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_setY.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_setY" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_setY" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setY(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_setWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_setWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_setWidth" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_setWidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setWidth(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_setHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_setHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_setHeight" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_setHeight" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setHeight(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_setPosition__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_setPosition" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_setPosition" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_setPosition" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setPosition(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_setPosition__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_setPosition" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_setPosition" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_setPosition" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->setPosition((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_setPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_setPosition__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_setPosition__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setPosition.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_setFromCenter__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_setFromCenter" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_setFromCenter" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_setFromCenter" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_setFromCenter" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofRectangle_setFromCenter" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->setFromCenter(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_setFromCenter__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_setFromCenter" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_setFromCenter" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_setFromCenter" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_setFromCenter" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_setFromCenter" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setFromCenter((ofPoint const &)*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_setFromCenter(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_setFromCenter__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_setFromCenter__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setFromCenter.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_translate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_translate" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_translate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_translate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->translate(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_translate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_translate" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_translate" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_translate" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->translate((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_translate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_translate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_translate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function translate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_translateX(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_translateX.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_translateX" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_translateX" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->translateX(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_translateY(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_translateY.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_translateY" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_translateY" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->translateY(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_scale__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scale" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->scale(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scale__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scale" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_scale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->scale(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scale__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scale" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_scale" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_scale" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->scale((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scale__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scale__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scale__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function scale.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_scaleWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleWidth" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_scaleWidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->scaleWidth(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_scaleHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleHeight" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_scaleHeight" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->scaleHeight(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleFromCenter__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleFromCenter" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_scaleFromCenter" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->scaleFromCenter(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleFromCenter__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleFromCenter" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_scaleFromCenter" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_scaleFromCenter" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->scaleFromCenter(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleFromCenter__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleFromCenter" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_scaleFromCenter" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_scaleFromCenter" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->scaleFromCenter((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleFromCenter(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scaleFromCenter__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scaleFromCenter__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scaleFromCenter__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function scaleFromCenter.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofScaleMode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_scaleTo" "', argument " "3"" of type '" "ofScaleMode""'");
  } 
  arg3 = (ofScaleMode)(val3);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  (arg1)->scaleTo((ofRectangle const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAspectRatioMode arg3 ;
  ofAlignHorz arg4 ;
  ofAlignVert arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_scaleTo" "', argument " "3"" of type '" "ofAspectRatioMode""'");
  } 
  arg3 = (ofAspectRatioMode)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_scaleTo" "', argument " "4"" of type '" "ofAlignHorz""'");
  } 
  arg4 = (ofAlignHorz)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofRectangle_scaleTo" "', argument " "5"" of type '" "ofAlignVert""'");
  } 
  arg5 = (ofAlignVert)(val5);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleTo__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAspectRatioMode arg3 ;
  ofAlignHorz arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_scaleTo" "', argument " "3"" of type '" "ofAspectRatioMode""'");
  } 
  arg3 = (ofAspectRatioMode)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_scaleTo" "', argument " "4"" of type '" "ofAlignHorz""'");
  } 
  arg4 = (ofAlignHorz)(val4);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleTo__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAspectRatioMode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_scaleTo" "', argument " "3"" of type '" "ofAspectRatioMode""'");
  } 
  arg3 = (ofAspectRatioMode)(val3);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleTo__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAspectRatioMode arg3 ;
  ofAlignHorz arg4 ;
  ofAlignVert arg5 ;
  ofAlignHorz arg6 ;
  ofAlignVert arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_scaleTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_scaleTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_scaleTo" "', argument " "3"" of type '" "ofAspectRatioMode""'");
  } 
  arg3 = (ofAspectRatioMode)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_scaleTo" "', argument " "4"" of type '" "ofAlignHorz""'");
  } 
  arg4 = (ofAlignHorz)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofRectangle_scaleTo" "', argument " "5"" of type '" "ofAlignVert""'");
  } 
  arg5 = (ofAlignVert)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofRectangle_scaleTo" "', argument " "6"" of type '" "ofAlignHorz""'");
  } 
  arg6 = (ofAlignHorz)(val6);
  ecode7 = SWIG_AsVal_int(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofRectangle_scaleTo" "', argument " "7"" of type '" "ofAlignVert""'");
  } 
  arg7 = (ofAlignVert)(val7);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_scaleTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scaleTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scaleTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scaleTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scaleTo__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scaleTo__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_scaleTo__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function scaleTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToHorz__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ;
  ofAlignHorz arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToHorz" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_alignToHorz" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = (float)(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignToHorz" "', argument " "3"" of type '" "ofAlignHorz""'");
  } 
  arg3 = (ofAlignHorz)(val3);
  (arg1)->alignToHorz((float const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToHorz__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToHorz" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_alignToHorz" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = (float)(val2);
  arg2 = &temp2;
  (arg1)->alignToHorz((float const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToHorz__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAlignHorz arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToHorz" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignToHorz" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignToHorz" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignToHorz" "', argument " "3"" of type '" "ofAlignHorz""'");
  } 
  arg3 = (ofAlignHorz)(val3);
  (arg1)->alignToHorz((ofRectangle const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToHorz__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToHorz" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignToHorz" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignToHorz" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  (arg1)->alignToHorz((ofRectangle const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToHorz__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAlignHorz arg3 ;
  ofAlignHorz arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToHorz" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignToHorz" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignToHorz" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignToHorz" "', argument " "3"" of type '" "ofAlignHorz""'");
  } 
  arg3 = (ofAlignHorz)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_alignToHorz" "', argument " "4"" of type '" "ofAlignHorz""'");
  } 
  arg4 = (ofAlignHorz)(val4);
  (arg1)->alignToHorz((ofRectangle const &)*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToHorz(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToHorz__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToHorz__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToHorz__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToHorz__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToHorz__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function alignToHorz.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToVert__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ;
  ofAlignVert arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToVert" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_alignToVert" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = (float)(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignToVert" "', argument " "3"" of type '" "ofAlignVert""'");
  } 
  arg3 = (ofAlignVert)(val3);
  (arg1)->alignToVert((float const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToVert__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToVert" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_alignToVert" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = (float)(val2);
  arg2 = &temp2;
  (arg1)->alignToVert((float const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToVert__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAlignVert arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToVert" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignToVert" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignToVert" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignToVert" "', argument " "3"" of type '" "ofAlignVert""'");
  } 
  arg3 = (ofAlignVert)(val3);
  (arg1)->alignToVert((ofRectangle const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToVert__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToVert" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignToVert" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignToVert" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  (arg1)->alignToVert((ofRectangle const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToVert__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAlignVert arg3 ;
  ofAlignVert arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignToVert" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignToVert" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignToVert" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignToVert" "', argument " "3"" of type '" "ofAlignVert""'");
  } 
  arg3 = (ofAlignVert)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_alignToVert" "', argument " "4"" of type '" "ofAlignVert""'");
  } 
  arg4 = (ofAlignVert)(val4);
  (arg1)->alignToVert((ofRectangle const &)*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignToVert(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToVert__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToVert__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToVert__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToVert__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignToVert__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function alignToVert.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  ofAlignHorz arg3 ;
  ofAlignVert arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignTo" "', argument " "3"" of type '" "ofAlignHorz""'");
  } 
  arg3 = (ofAlignHorz)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_alignTo" "', argument " "4"" of type '" "ofAlignVert""'");
  } 
  arg4 = (ofAlignVert)(val4);
  (arg1)->alignTo((ofPoint const &)*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  ofAlignHorz arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignTo" "', argument " "3"" of type '" "ofAlignHorz""'");
  } 
  arg3 = (ofAlignHorz)(val3);
  (arg1)->alignTo((ofPoint const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->alignTo((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignTo__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAlignHorz arg3 ;
  ofAlignVert arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignTo" "', argument " "3"" of type '" "ofAlignHorz""'");
  } 
  arg3 = (ofAlignHorz)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_alignTo" "', argument " "4"" of type '" "ofAlignVert""'");
  } 
  arg4 = (ofAlignVert)(val4);
  (arg1)->alignTo((ofRectangle const &)*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignTo__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAlignHorz arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignTo" "', argument " "3"" of type '" "ofAlignHorz""'");
  } 
  arg3 = (ofAlignHorz)(val3);
  (arg1)->alignTo((ofRectangle const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignTo__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  (arg1)->alignTo((ofRectangle const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignTo__SWIG_6(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  ofAlignHorz arg3 ;
  ofAlignVert arg4 ;
  ofAlignHorz arg5 ;
  ofAlignVert arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_alignTo" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_alignTo" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_alignTo" "', argument " "3"" of type '" "ofAlignHorz""'");
  } 
  arg3 = (ofAlignHorz)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectangle_alignTo" "', argument " "4"" of type '" "ofAlignVert""'");
  } 
  arg4 = (ofAlignVert)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofRectangle_alignTo" "', argument " "5"" of type '" "ofAlignHorz""'");
  } 
  arg5 = (ofAlignHorz)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofRectangle_alignTo" "', argument " "6"" of type '" "ofAlignVert""'");
  } 
  arg6 = (ofAlignVert)(val6);
  (arg1)->alignTo((ofRectangle const &)*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_alignTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignTo__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignTo__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignTo__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_alignTo__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function alignTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_inside__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_inside" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_inside" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_inside" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofRectangle const *)arg1)->inside(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_inside__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_inside" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_inside" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_inside" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  result = (bool)((ofRectangle const *)arg1)->inside((ofPoint const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_inside__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_inside" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_inside" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_inside" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  result = (bool)((ofRectangle const *)arg1)->inside((ofRectangle const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_inside__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_inside" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_inside" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_inside" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofRectangle_inside" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_inside" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  result = (bool)((ofRectangle const *)arg1)->inside((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_inside(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_inside__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_inside__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_inside__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_inside__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function inside.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_intersects__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_intersects" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_intersects" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_intersects" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  result = (bool)((ofRectangle const *)arg1)->intersects((ofRectangle const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_intersects__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_intersects" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_intersects" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_intersects" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofRectangle_intersects" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_intersects" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  result = (bool)((ofRectangle const *)arg1)->intersects((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_intersects(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_intersects__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_intersects__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function intersects.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_growToInclude__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_growToInclude" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_growToInclude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectangle_growToInclude" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->growToInclude(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_growToInclude__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_growToInclude" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_growToInclude" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_growToInclude" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->growToInclude((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_growToInclude__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_growToInclude" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_growToInclude" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_growToInclude" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  (arg1)->growToInclude((ofRectangle const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_growToInclude__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_growToInclude" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_growToInclude" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_growToInclude" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofRectangle_growToInclude" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_growToInclude" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  (arg1)->growToInclude((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectangle_growToInclude(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_growToInclude__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_growToInclude__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_growToInclude__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectangle_growToInclude__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function growToInclude.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getIntersection(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofRectangle result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getIntersection.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getIntersection" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_getIntersection" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_getIntersection" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  result = ((ofRectangle const *)arg1)->getIntersection((ofRectangle const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofRectangle((const ofRectangle&)(result))), SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getUnion(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofRectangle result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getUnion.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getUnion" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_getUnion" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_getUnion" "', argument " "2"" of type '" "ofRectangle const &""'"); 
  }
  arg2 = (ofRectangle *)(argp2);
  result = ((ofRectangle const *)arg1)->getUnion((ofRectangle const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofRectangle((const ofRectangle&)(result))), SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_standardize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_standardize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_standardize" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  (arg1)->standardize();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getStandardized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofRectangle result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getStandardized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getStandardized" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ((ofRectangle const *)arg1)->getStandardized();
  jsresult = SWIG_NewPointerObj((new ofRectangle((const ofRectangle&)(result))), SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_isStandardized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_isStandardized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_isStandardized" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (bool)((ofRectangle const *)arg1)->isStandardized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getArea(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getArea.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getArea" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getArea();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getPerimeter(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getPerimeter.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getPerimeter" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getPerimeter();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getAspectRatio(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getAspectRatio.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getAspectRatio" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getAspectRatio();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_isEmpty(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_isEmpty.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_isEmpty" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (bool)((ofRectangle const *)arg1)->isEmpty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getMin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getMin.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getMin" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ((ofRectangle const *)arg1)->getMin();
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getMax(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getMax.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getMax" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ((ofRectangle const *)arg1)->getMax();
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getMinX(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getMinX.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getMinX" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getMinX();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getMaxX(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getMaxX.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getMaxX" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getMaxX();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getMinY(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getMinY.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getMinY" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getMinY();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getMaxY(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getMaxY.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getMaxY" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getMaxY();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getLeft(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getLeft.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getLeft" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getLeft();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getRight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getRight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getRight" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getRight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getTop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getTop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getTop" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getTop();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getBottom(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getBottom.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getBottom" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getBottom();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getTopLeft(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getTopLeft.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getTopLeft" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ((ofRectangle const *)arg1)->getTopLeft();
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getTopRight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getTopRight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getTopRight" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ((ofRectangle const *)arg1)->getTopRight();
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getBottomLeft(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getBottomLeft.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getBottomLeft" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ((ofRectangle const *)arg1)->getBottomLeft();
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getBottomRight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getBottomRight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getBottomRight" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ((ofRectangle const *)arg1)->getBottomRight();
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getHorzAnchor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofAlignHorz arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getHorzAnchor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getHorzAnchor" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_getHorzAnchor" "', argument " "2"" of type '" "ofAlignHorz""'");
  } 
  arg2 = (ofAlignHorz)(val2);
  result = (float)((ofRectangle const *)arg1)->getHorzAnchor(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getVertAnchor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofAlignVert arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getVertAnchor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getVertAnchor" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_getVertAnchor" "', argument " "2"" of type '" "ofAlignVert""'");
  } 
  arg2 = (ofAlignVert)(val2);
  result = (float)((ofRectangle const *)arg1)->getVertAnchor(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getPosition.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getPosition" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ((ofRectangle const *)arg1)->getPosition();
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getPositionRef(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getPositionRef.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getPositionRef" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (ofPoint *) &(arg1)->getPositionRef();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getCenter(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getCenter.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getCenter" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ((ofRectangle const *)arg1)->getCenter();
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getX(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getX.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getX" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getX();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getY(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getY.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getY" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getY();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getWidth" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getWidth();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectangle_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRectangle_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_getHeight" "', argument " "1"" of type '" "ofRectangle const *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float)((ofRectangle const *)arg1)->getHeight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofRectangle_position_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_position_set" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_position_set" "', argument " "2"" of type '" "ofPoint *""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  if (arg1) (arg1)->position = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofRectangle_position_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_position_get" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (ofPoint *)& ((arg1)->position);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofRectangle_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_x_set" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_x_set" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_x_set" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = (float *)(argp2);
  if (arg1) (arg1)->x = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofRectangle_x_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_x_get" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float *) &(float &) ((arg1)->x);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofRectangle_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_y_set" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofRectangle_y_set" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectangle_y_set" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = (float *)(argp2);
  if (arg1) (arg1)->y = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofRectangle_y_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_y_get" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float *) &(float &) ((arg1)->y);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofRectangle_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_width_set" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_width_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofRectangle_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_width_get" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float) ((arg1)->width);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofRectangle_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_height_set" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectangle_height_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofRectangle_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = (ofRectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofRectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectangle_height_get" "', argument " "1"" of type '" "ofRectangle *""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = (float) ((arg1)->height);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofSerialDeviceInfo__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  std::string arg2 ;
  int arg3 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  ofSerialDeviceInfo *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofSerialDeviceInfo__SWIG_0.");  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofSerialDeviceInfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (ofSerialDeviceInfo *)new ofSerialDeviceInfo(arg1,arg2,arg3);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofSerialDeviceInfo, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofSerialDeviceInfo__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofSerialDeviceInfo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofSerialDeviceInfo__SWIG_1.");  
  result = (ofSerialDeviceInfo *)new ofSerialDeviceInfo();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofSerialDeviceInfo, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofSerialDeviceInfo(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    self = _wrap_new_ofSerialDeviceInfo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofSerialDeviceInfo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofSerialDeviceInfo");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSerialDeviceInfo_getDevicePath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSerialDeviceInfo *arg1 = (ofSerialDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSerialDeviceInfo_getDevicePath.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSerialDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSerialDeviceInfo_getDevicePath" "', argument " "1"" of type '" "ofSerialDeviceInfo *""'"); 
  }
  arg1 = (ofSerialDeviceInfo *)(argp1);
  result = (arg1)->getDevicePath();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSerialDeviceInfo_getDeviceName(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSerialDeviceInfo *arg1 = (ofSerialDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSerialDeviceInfo_getDeviceName.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSerialDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSerialDeviceInfo_getDeviceName" "', argument " "1"" of type '" "ofSerialDeviceInfo *""'"); 
  }
  arg1 = (ofSerialDeviceInfo *)(argp1);
  result = (arg1)->getDeviceName();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSerialDeviceInfo_getDeviceID(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSerialDeviceInfo *arg1 = (ofSerialDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSerialDeviceInfo_getDeviceID.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSerialDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSerialDeviceInfo_getDeviceID" "', argument " "1"" of type '" "ofSerialDeviceInfo *""'"); 
  }
  arg1 = (ofSerialDeviceInfo *)(argp1);
  result = (int)(arg1)->getDeviceID();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofSerialDeviceInfo(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofSerialDeviceInfo(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofSerialDeviceInfo *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofStyle(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofStyle *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofStyle.");  
  result = (ofStyle *)new ofStyle();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofStyle, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofStyle(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofStyle(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofStyle *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofStyle_color_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  ofColor *arg2 = (ofColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_color_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofStyle_color_set" "', argument " "2"" of type '" "ofColor *""'"); 
  }
  arg2 = (ofColor *)(argp2);
  if (arg1) (arg1)->color = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_color_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_color_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (ofColor *)& ((arg1)->color);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_bgColor_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  ofColor *arg2 = (ofColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_bgColor_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofStyle_bgColor_set" "', argument " "2"" of type '" "ofColor *""'"); 
  }
  arg2 = (ofColor *)(argp2);
  if (arg1) (arg1)->bgColor = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_bgColor_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_bgColor_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (ofColor *)& ((arg1)->bgColor);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_polyMode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  ofPolyWindingMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_polyMode_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_polyMode_set" "', argument " "2"" of type '" "ofPolyWindingMode""'");
  } 
  arg2 = (ofPolyWindingMode)(val2);
  if (arg1) (arg1)->polyMode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_polyMode_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPolyWindingMode result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_polyMode_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (ofPolyWindingMode) ((arg1)->polyMode);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_rectMode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  ofRectMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_rectMode_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_rectMode_set" "', argument " "2"" of type '" "ofRectMode""'");
  } 
  arg2 = (ofRectMode)(val2);
  if (arg1) (arg1)->rectMode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_rectMode_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofRectMode result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_rectMode_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (ofRectMode) ((arg1)->rectMode);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_bFill_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_bFill_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_bFill_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->bFill = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_bFill_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_bFill_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (bool) ((arg1)->bFill);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_drawBitmapMode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  ofDrawBitmapMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_drawBitmapMode_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_drawBitmapMode_set" "', argument " "2"" of type '" "ofDrawBitmapMode""'");
  } 
  arg2 = (ofDrawBitmapMode)(val2);
  if (arg1) (arg1)->drawBitmapMode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_drawBitmapMode_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofDrawBitmapMode result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_drawBitmapMode_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (ofDrawBitmapMode) ((arg1)->drawBitmapMode);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_blendingMode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  ofBlendMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_blendingMode_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_blendingMode_set" "', argument " "2"" of type '" "ofBlendMode""'");
  } 
  arg2 = (ofBlendMode)(val2);
  if (arg1) (arg1)->blendingMode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_blendingMode_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofBlendMode result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_blendingMode_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (ofBlendMode) ((arg1)->blendingMode);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_smoothing_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_smoothing_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_smoothing_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->smoothing = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_smoothing_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_smoothing_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (bool) ((arg1)->smoothing);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_circleResolution_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_circleResolution_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_circleResolution_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->circleResolution = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_circleResolution_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_circleResolution_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (int) ((arg1)->circleResolution);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_sphereResolution_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_sphereResolution_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_sphereResolution_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->sphereResolution = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_sphereResolution_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_sphereResolution_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (int) ((arg1)->sphereResolution);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_curveResolution_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_curveResolution_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_curveResolution_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->curveResolution = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_curveResolution_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_curveResolution_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (int) ((arg1)->curveResolution);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofStyle_lineWidth_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofStyle *arg1 = (ofStyle *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_lineWidth_set" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofStyle_lineWidth_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->lineWidth = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofStyle_lineWidth_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle *arg1 = (ofStyle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofStyle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStyle_lineWidth_get" "', argument " "1"" of type '" "ofStyle *""'"); 
  }
  arg1 = (ofStyle *)(argp1);
  result = (float) ((arg1)->lineWidth);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofColor__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofColor_< unsigned char > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofColor__SWIG_0.");  
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofColor(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofColor(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofColor_< unsigned char > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofColor__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofColor_< unsigned char > *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofColor__SWIG_1.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofColor" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofColor__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned char > *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofColor__SWIG_2.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofColor__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofColor_< unsigned char > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofColor_< unsigned char > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofColor__SWIG_3.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofColor" "', argument " "1"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofColor" "', argument " "1"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >((ofColor_< unsigned char > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofColor__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofColor_< unsigned char > *arg1 = 0 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofColor_< unsigned char > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofColor__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofColor" "', argument " "1"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofColor" "', argument " "1"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >((ofColor_< unsigned char > const &)*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofColor__SWIG_5(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofColor_< unsigned char > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofColor__SWIG_5.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofColor__SWIG_6(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  ofColor_< unsigned char > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofColor__SWIG_6.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofColor(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofColor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    self = _wrap_new_ofColor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    self = _wrap_new_ofColor__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofColor__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofColor__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofColor__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofColor__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofColor_T_unsigned_char_t");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_fromHsb__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofColor_< unsigned char > result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofColor_fromHsb" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_fromHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_fromHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofColor_fromHsb" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_fromHsb__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned char > result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofColor_fromHsb" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_fromHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_fromHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_fromHsb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_fromHsb__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_fromHsb__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function fromHsb.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_fromHex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofColor_< unsigned char > result;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofColor_fromHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_fromHex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_fromHex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  ofColor_< unsigned char > result;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofColor_fromHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_fromHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_fromHex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_fromHex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function fromHex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_white_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::white;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_gray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::gray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_black_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::black;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_red_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::red;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_green_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::green;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_blue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_cyan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cyan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_magenta_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::magenta;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_yellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::yellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_aliceBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::aliceBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_antiqueWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::antiqueWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_aqua_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::aqua;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_aquamarine_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::aquamarine;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_azure_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::azure;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_beige_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::beige;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_bisque_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::bisque;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_blanchedAlmond_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blanchedAlmond;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_blueViolet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blueViolet;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_brown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::brown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_burlyWood_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::burlyWood;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_cadetBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cadetBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_chartreuse_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::chartreuse;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_chocolate_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::chocolate;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_coral_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::coral;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_cornflowerBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cornflowerBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_cornsilk_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cornsilk;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_crimson_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::crimson;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkCyan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkCyan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkGoldenRod_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGoldenRod;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkKhaki_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkKhaki;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkMagenta_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkMagenta;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkOliveGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkOliveGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkorange_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkorange;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkOrchid_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkOrchid;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkSalmon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSalmon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkSeaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSeaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkSlateBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSlateBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkSlateGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSlateGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkSlateGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSlateGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkTurquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkTurquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_darkViolet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkViolet;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_deepPink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::deepPink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_deepSkyBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::deepSkyBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_dimGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::dimGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_dimGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::dimGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_dodgerBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::dodgerBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_fireBrick_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::fireBrick;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_floralWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::floralWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_forestGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::forestGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_fuchsia_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::fuchsia;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_gainsboro_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::gainsboro;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_ghostWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::ghostWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_gold_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::gold;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_goldenRod_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::goldenRod;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_grey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::grey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_greenYellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::greenYellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_honeyDew_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::honeyDew;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_hotPink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::hotPink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_indianRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::indianRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_indigo_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::indigo;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_ivory_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::ivory;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_khaki_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::khaki;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lavender_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lavender;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lavenderBlush_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lavenderBlush;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lawnGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lawnGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lemonChiffon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lemonChiffon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightCoral_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightCoral;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightCyan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightCyan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightGoldenRodYellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGoldenRodYellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightPink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightPink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightSalmon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSalmon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightSeaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSeaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightSkyBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSkyBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightSlateGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSlateGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightSlateGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSlateGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightSteelBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSteelBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lightYellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightYellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lime_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lime;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_limeGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::limeGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_linen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::linen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_maroon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::maroon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mediumAquaMarine_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumAquaMarine;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mediumBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mediumOrchid_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumOrchid;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mediumPurple_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumPurple;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mediumSeaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumSeaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mediumSlateBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumSlateBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mediumSpringGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumSpringGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mediumTurquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumTurquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mediumVioletRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumVioletRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_midnightBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::midnightBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mintCream_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mintCream;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_mistyRose_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mistyRose;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_moccasin_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::moccasin;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_navajoWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::navajoWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_navy_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::navy;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_oldLace_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::oldLace;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_olive_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::olive;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_oliveDrab_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::oliveDrab;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_orange_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::orange;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_orangeRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::orangeRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_orchid_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::orchid;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_paleGoldenRod_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleGoldenRod;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_paleGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_paleTurquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleTurquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_paleVioletRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleVioletRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_papayaWhip_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::papayaWhip;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_peachPuff_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::peachPuff;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_peru_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::peru;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_pink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::pink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_plum_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::plum;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_powderBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::powderBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_purple_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::purple;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_rosyBrown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::rosyBrown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_royalBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::royalBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_saddleBrown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::saddleBrown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_salmon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::salmon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_sandyBrown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::sandyBrown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_seaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::seaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_seaShell_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::seaShell;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_sienna_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::sienna;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_silver_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::silver;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_skyBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::skyBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_slateBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::slateBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_slateGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::slateGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_slateGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::slateGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_snow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::snow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_springGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::springGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_steelBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::steelBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_tan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::tan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_teal_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::teal;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_thistle_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::thistle;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_tomato_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::tomato;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_turquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::turquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_violet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::violet;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_wheat_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::wheat;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_whiteSmoke_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::whiteSmoke;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_yellowGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *result = 0 ;
  
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::yellowGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_set" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofColor_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofColor_set" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_set" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofColor_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->set(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_set__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_set" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->set(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_set__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_set" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->set(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_set__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  ofColor_< unsigned char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_set" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofColor_set" "', argument " "2"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofColor_set" "', argument " "2"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  arg2 = (ofColor_< unsigned char > *)(argp2);
  (arg1)->set((ofColor_< unsigned char > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_set__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_set__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_setHex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_setHex" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_setHex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_setHex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setHex(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_setHex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_setHex" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_setHex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setHex(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_setHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_setHex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_setHex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setHex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getHex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getHex" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = (int)((ofColor_< unsigned char > const *)arg1)->getHex();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_clamp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned char > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_clamp.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_clamp" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = (ofColor_< unsigned char > *) &(arg1)->clamp();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_invert(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned char > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_invert.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_invert" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = (ofColor_< unsigned char > *) &(arg1)->invert();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_normalize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned char > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_normalize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_normalize" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = (ofColor_< unsigned char > *) &(arg1)->normalize();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_lerp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  ofColor_< unsigned char > *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned char > *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_lerp.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_lerp" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofColor_lerp" "', argument " "2"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofColor_lerp" "', argument " "2"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  arg2 = (ofColor_< unsigned char > *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_lerp" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofColor_< unsigned char > *) &(arg1)->lerp((ofColor_< unsigned char > const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getClamped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned char > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getClamped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getClamped" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = ((ofColor_< unsigned char > const *)arg1)->getClamped();
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getInverted(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned char > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getInverted.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getInverted" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = ((ofColor_< unsigned char > const *)arg1)->getInverted();
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getNormalized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned char > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getNormalized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getNormalized" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = ((ofColor_< unsigned char > const *)arg1)->getNormalized();
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getLerped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  ofColor_< unsigned char > *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned char > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getLerped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getLerped" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofColor_getLerped" "', argument " "2"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofColor_getLerped" "', argument " "2"" of type '" "ofColor_< unsigned char > const &""'"); 
  }
  arg2 = (ofColor_< unsigned char > *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_getLerped" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ((ofColor_< unsigned char > const *)arg1)->getLerped((ofColor_< unsigned char > const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getHue(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getHue.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getHue" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = (float)((ofColor_< unsigned char > const *)arg1)->getHue();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getSaturation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getSaturation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getSaturation" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = (float)((ofColor_< unsigned char > const *)arg1)->getSaturation();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getBrightness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getBrightness.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getBrightness" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = (float)((ofColor_< unsigned char > const *)arg1)->getBrightness();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getLightness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getLightness.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getLightness" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  result = (float)((ofColor_< unsigned char > const *)arg1)->getLightness();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_getHsb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_getHsb.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_getHsb" "', argument " "1"" of type '" "ofColor_< unsigned char > const *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofColor_getHsb" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofColor_getHsb" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = (float *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofColor_getHsb" "', argument " "3"" of type '" "float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofColor_getHsb" "', argument " "3"" of type '" "float &""'"); 
  }
  arg3 = (float *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofColor_getHsb" "', argument " "4"" of type '" "float &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofColor_getHsb" "', argument " "4"" of type '" "float &""'"); 
  }
  arg4 = (float *)(argp4);
  ((ofColor_< unsigned char > const *)arg1)->getHsb(*arg2,*arg3,*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_setHue(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_setHue.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_setHue" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_setHue" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setHue(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_setSaturation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_setSaturation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_setSaturation" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_setSaturation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setSaturation(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_setBrightness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_setBrightness.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_setBrightness" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_setBrightness" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setBrightness(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_setHsb__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_setHsb" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_setHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_setHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofColor_setHsb" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofColor_setHsb" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->setHsb(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_setHsb__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofColor_setHsb" "', argument " "1"" of type '" "ofColor_< unsigned char > *""'"); 
  }
  arg1 = (ofColor_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofColor_setHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofColor_setHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofColor_setHsb" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setHsb(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofColor_setHsb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_setHsb__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofColor_setHsb__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setHsb.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofColor_limit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofColor_limit.");  
  
  result = (float)ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR limit();
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatColor__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofColor_< float > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatColor__SWIG_0.");  
  result = (ofColor_< float > *)new ofColor_< float >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofFloatColor(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofFloatColor(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofColor_< float > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofFloatColor__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofColor_< float > *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatColor__SWIG_1.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofFloatColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofFloatColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofFloatColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofFloatColor" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (ofColor_< float > *)new ofColor_< float >(arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatColor__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< float > *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatColor__SWIG_2.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofFloatColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofFloatColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofFloatColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofColor_< float > *)new ofColor_< float >(arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatColor__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofColor_< float > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofColor_< float > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatColor__SWIG_3.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofFloatColor" "', argument " "1"" of type '" "ofColor_< float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofFloatColor" "', argument " "1"" of type '" "ofColor_< float > const &""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = (ofColor_< float > *)new ofColor_< float >((ofColor_< float > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatColor__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofColor_< float > *arg1 = 0 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofColor_< float > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatColor__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofFloatColor" "', argument " "1"" of type '" "ofColor_< float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofFloatColor" "', argument " "1"" of type '" "ofColor_< float > const &""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofFloatColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofColor_< float > *)new ofColor_< float >((ofColor_< float > const &)*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatColor__SWIG_5(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofColor_< float > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatColor__SWIG_5.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofFloatColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofFloatColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofColor_< float > *)new ofColor_< float >(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatColor__SWIG_6(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  ofColor_< float > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatColor__SWIG_6.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofFloatColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (ofColor_< float > *)new ofColor_< float >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatColor(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatColor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatColor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatColor__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatColor__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatColor__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatColor__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatColor__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofColor_T_float_t");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_fromHsb__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofColor_< float > result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofFloatColor_fromHsb" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_fromHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_fromHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatColor_fromHsb" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_fromHsb__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< float > result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofFloatColor_fromHsb" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_fromHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_fromHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_fromHsb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_fromHsb__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_fromHsb__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function fromHsb.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_fromHex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofColor_< float > result;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofFloatColor_fromHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_fromHex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_fromHex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  ofColor_< float > result;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofFloatColor_fromHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1);
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_fromHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_fromHex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_fromHex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function fromHex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_white_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::white;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_gray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::gray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_black_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::black;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_red_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::red;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_green_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::green;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_blue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::blue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_cyan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::cyan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_magenta_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::magenta;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_yellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::yellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_aliceBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::aliceBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_antiqueWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::antiqueWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_aqua_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::aqua;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_aquamarine_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::aquamarine;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_azure_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::azure;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_beige_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::beige;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_bisque_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::bisque;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_blanchedAlmond_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::blanchedAlmond;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_blueViolet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::blueViolet;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_brown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::brown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_burlyWood_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::burlyWood;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_cadetBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::cadetBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_chartreuse_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::chartreuse;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_chocolate_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::chocolate;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_coral_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::coral;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_cornflowerBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::cornflowerBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_cornsilk_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::cornsilk;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_crimson_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::crimson;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkCyan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkCyan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkGoldenRod_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkGoldenRod;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkKhaki_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkKhaki;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkMagenta_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkMagenta;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkOliveGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkOliveGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkorange_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkorange;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkOrchid_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkOrchid;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkSalmon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkSalmon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkSeaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkSeaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkSlateBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkSlateBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkSlateGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkSlateGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkSlateGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkSlateGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkTurquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkTurquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_darkViolet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::darkViolet;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_deepPink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::deepPink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_deepSkyBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::deepSkyBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_dimGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::dimGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_dimGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::dimGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_dodgerBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::dodgerBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_fireBrick_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::fireBrick;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_floralWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::floralWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_forestGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::forestGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_fuchsia_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::fuchsia;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_gainsboro_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::gainsboro;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_ghostWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::ghostWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_gold_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::gold;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_goldenRod_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::goldenRod;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_grey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::grey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_greenYellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::greenYellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_honeyDew_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::honeyDew;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_hotPink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::hotPink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_indianRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::indianRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_indigo_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::indigo;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_ivory_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::ivory;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_khaki_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::khaki;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lavender_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lavender;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lavenderBlush_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lavenderBlush;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lawnGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lawnGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lemonChiffon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lemonChiffon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightCoral_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightCoral;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightCyan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightCyan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightGoldenRodYellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightGoldenRodYellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightPink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightPink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightSalmon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightSalmon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightSeaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightSeaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightSkyBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightSkyBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightSlateGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightSlateGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightSlateGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightSlateGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightSteelBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightSteelBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lightYellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lightYellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lime_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::lime;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_limeGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::limeGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_linen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::linen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_maroon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::maroon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mediumAquaMarine_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mediumAquaMarine;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mediumBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mediumBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mediumOrchid_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mediumOrchid;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mediumPurple_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mediumPurple;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mediumSeaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mediumSeaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mediumSlateBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mediumSlateBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mediumSpringGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mediumSpringGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mediumTurquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mediumTurquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mediumVioletRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mediumVioletRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_midnightBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::midnightBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mintCream_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mintCream;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_mistyRose_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::mistyRose;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_moccasin_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::moccasin;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_navajoWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::navajoWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_navy_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::navy;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_oldLace_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::oldLace;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_olive_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::olive;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_oliveDrab_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::oliveDrab;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_orange_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::orange;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_orangeRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::orangeRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_orchid_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::orchid;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_paleGoldenRod_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::paleGoldenRod;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_paleGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::paleGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_paleTurquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::paleTurquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_paleVioletRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::paleVioletRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_papayaWhip_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::papayaWhip;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_peachPuff_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::peachPuff;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_peru_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::peru;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_pink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::pink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_plum_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::plum;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_powderBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::powderBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_purple_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::purple;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_rosyBrown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::rosyBrown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_royalBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::royalBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_saddleBrown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::saddleBrown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_salmon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::salmon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_sandyBrown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::sandyBrown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_seaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::seaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_seaShell_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::seaShell;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_sienna_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::sienna;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_silver_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::silver;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_skyBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::skyBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_slateBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::slateBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_slateGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::slateGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_slateGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::slateGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_snow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::snow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_springGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::springGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_steelBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::steelBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_tan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::tan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_teal_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::teal;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_thistle_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::thistle;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_tomato_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::tomato;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_turquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::turquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_violet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::violet;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_wheat_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::wheat;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_whiteSmoke_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::whiteSmoke;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_yellowGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *result = 0 ;
  
  result = (ofColor_< float > *)&ofColor_< float >::yellowGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_set" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatColor_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatColor_set" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_set" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatColor_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->set(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_set__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_set" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->set(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_set__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_set" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->set(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_set__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_set" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatColor_set" "', argument " "2"" of type '" "ofColor_< float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatColor_set" "', argument " "2"" of type '" "ofColor_< float > const &""'"); 
  }
  arg2 = (ofColor_< float > *)(argp2);
  (arg1)->set((ofColor_< float > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_set__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_set__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_setHex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_setHex" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_setHex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_setHex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setHex(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_setHex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_setHex" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_setHex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setHex(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_setHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_setHex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_setHex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setHex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getHex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getHex" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = (int)((ofColor_< float > const *)arg1)->getHex();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_clamp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< float > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_clamp.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_clamp" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = (ofColor_< float > *) &(arg1)->clamp();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_invert(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< float > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_invert.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_invert" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = (ofColor_< float > *) &(arg1)->invert();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_normalize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< float > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_normalize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_normalize" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = (ofColor_< float > *) &(arg1)->normalize();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_lerp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< float > *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_lerp.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_lerp" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatColor_lerp" "', argument " "2"" of type '" "ofColor_< float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatColor_lerp" "', argument " "2"" of type '" "ofColor_< float > const &""'"); 
  }
  arg2 = (ofColor_< float > *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_lerp" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofColor_< float > *) &(arg1)->lerp((ofColor_< float > const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getClamped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< float > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getClamped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getClamped" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = ((ofColor_< float > const *)arg1)->getClamped();
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getInverted(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< float > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getInverted.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getInverted" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = ((ofColor_< float > const *)arg1)->getInverted();
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getNormalized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< float > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getNormalized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getNormalized" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = ((ofColor_< float > const *)arg1)->getNormalized();
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getLerped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< float > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getLerped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getLerped" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatColor_getLerped" "', argument " "2"" of type '" "ofColor_< float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatColor_getLerped" "', argument " "2"" of type '" "ofColor_< float > const &""'"); 
  }
  arg2 = (ofColor_< float > *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_getLerped" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ((ofColor_< float > const *)arg1)->getLerped((ofColor_< float > const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getHue(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getHue.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getHue" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = (float)((ofColor_< float > const *)arg1)->getHue();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getSaturation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getSaturation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getSaturation" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = (float)((ofColor_< float > const *)arg1)->getSaturation();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getBrightness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getBrightness.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getBrightness" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = (float)((ofColor_< float > const *)arg1)->getBrightness();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getLightness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getLightness.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getLightness" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  result = (float)((ofColor_< float > const *)arg1)->getLightness();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_getHsb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_getHsb.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_getHsb" "', argument " "1"" of type '" "ofColor_< float > const *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatColor_getHsb" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatColor_getHsb" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = (float *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofFloatColor_getHsb" "', argument " "3"" of type '" "float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatColor_getHsb" "', argument " "3"" of type '" "float &""'"); 
  }
  arg3 = (float *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofFloatColor_getHsb" "', argument " "4"" of type '" "float &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatColor_getHsb" "', argument " "4"" of type '" "float &""'"); 
  }
  arg4 = (float *)(argp4);
  ((ofColor_< float > const *)arg1)->getHsb(*arg2,*arg3,*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_setHue(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_setHue.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_setHue" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_setHue" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setHue(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_setSaturation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_setSaturation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_setSaturation" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_setSaturation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setSaturation(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_setBrightness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_setBrightness.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_setBrightness" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_setBrightness" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setBrightness(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_setHsb__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_setHsb" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_setHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_setHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatColor_setHsb" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatColor_setHsb" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->setHsb(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_setHsb__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatColor_setHsb" "', argument " "1"" of type '" "ofColor_< float > *""'"); 
  }
  arg1 = (ofColor_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatColor_setHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatColor_setHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatColor_setHsb" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setHsb(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatColor_setHsb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_setHsb__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatColor_setHsb__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setHsb.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatColor_limit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatColor_limit.");  
  
  result = (float)ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR limit();
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortColor__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofColor_< unsigned short > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortColor__SWIG_0.");  
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofShortColor(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofShortColor(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofColor_< unsigned short > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofShortColor__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofColor_< unsigned short > *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortColor__SWIG_1.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofShortColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofShortColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofShortColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofShortColor" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >(arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortColor__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned short > *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortColor__SWIG_2.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofShortColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofShortColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofShortColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >(arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortColor__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofColor_< unsigned short > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofColor_< unsigned short > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortColor__SWIG_3.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofShortColor" "', argument " "1"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofShortColor" "', argument " "1"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >((ofColor_< unsigned short > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortColor__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofColor_< unsigned short > *arg1 = 0 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofColor_< unsigned short > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortColor__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofShortColor" "', argument " "1"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofShortColor" "', argument " "1"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofShortColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >((ofColor_< unsigned short > const &)*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortColor__SWIG_5(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofColor_< unsigned short > *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortColor__SWIG_5.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofShortColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofShortColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortColor__SWIG_6(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  ofColor_< unsigned short > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortColor__SWIG_6.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofShortColor" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortColor(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortColor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortColor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortColor__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortColor__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortColor__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortColor__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortColor__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofColor_T_unsigned_short_t");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_fromHsb__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofColor_< unsigned short > result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofShortColor_fromHsb" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_fromHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_fromHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortColor_fromHsb" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_fromHsb__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned short > result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofShortColor_fromHsb" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_fromHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_fromHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_fromHsb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_fromHsb__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_fromHsb__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function fromHsb.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_fromHex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofColor_< unsigned short > result;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofShortColor_fromHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_fromHex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_fromHex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  ofColor_< unsigned short > result;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofShortColor_fromHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_fromHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_fromHex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_fromHex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function fromHex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_white_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::white;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_gray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::gray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_black_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::black;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_red_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::red;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_green_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::green;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_blue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::blue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_cyan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::cyan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_magenta_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::magenta;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_yellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::yellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_aliceBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::aliceBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_antiqueWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::antiqueWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_aqua_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::aqua;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_aquamarine_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::aquamarine;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_azure_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::azure;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_beige_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::beige;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_bisque_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::bisque;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_blanchedAlmond_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::blanchedAlmond;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_blueViolet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::blueViolet;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_brown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::brown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_burlyWood_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::burlyWood;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_cadetBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::cadetBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_chartreuse_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::chartreuse;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_chocolate_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::chocolate;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_coral_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::coral;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_cornflowerBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::cornflowerBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_cornsilk_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::cornsilk;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_crimson_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::crimson;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkCyan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkCyan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkGoldenRod_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkGoldenRod;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkKhaki_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkKhaki;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkMagenta_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkMagenta;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkOliveGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkOliveGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkorange_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkorange;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkOrchid_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkOrchid;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkSalmon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSalmon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkSeaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSeaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkSlateBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSlateBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkSlateGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSlateGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkSlateGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSlateGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkTurquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkTurquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_darkViolet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkViolet;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_deepPink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::deepPink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_deepSkyBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::deepSkyBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_dimGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::dimGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_dimGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::dimGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_dodgerBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::dodgerBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_fireBrick_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::fireBrick;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_floralWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::floralWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_forestGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::forestGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_fuchsia_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::fuchsia;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_gainsboro_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::gainsboro;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_ghostWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::ghostWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_gold_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::gold;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_goldenRod_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::goldenRod;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_grey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::grey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_greenYellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::greenYellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_honeyDew_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::honeyDew;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_hotPink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::hotPink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_indianRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::indianRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_indigo_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::indigo;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_ivory_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::ivory;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_khaki_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::khaki;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lavender_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lavender;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lavenderBlush_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lavenderBlush;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lawnGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lawnGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lemonChiffon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lemonChiffon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightCoral_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightCoral;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightCyan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightCyan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightGoldenRodYellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightGoldenRodYellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightPink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightPink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightSalmon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSalmon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightSeaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSeaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightSkyBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSkyBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightSlateGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSlateGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightSlateGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSlateGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightSteelBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSteelBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lightYellow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightYellow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lime_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lime;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_limeGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::limeGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_linen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::linen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_maroon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::maroon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mediumAquaMarine_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumAquaMarine;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mediumBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mediumOrchid_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumOrchid;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mediumPurple_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumPurple;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mediumSeaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumSeaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mediumSlateBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumSlateBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mediumSpringGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumSpringGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mediumTurquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumTurquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mediumVioletRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumVioletRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_midnightBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::midnightBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mintCream_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mintCream;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_mistyRose_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mistyRose;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_moccasin_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::moccasin;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_navajoWhite_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::navajoWhite;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_navy_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::navy;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_oldLace_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::oldLace;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_olive_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::olive;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_oliveDrab_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::oliveDrab;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_orange_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::orange;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_orangeRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::orangeRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_orchid_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::orchid;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_paleGoldenRod_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::paleGoldenRod;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_paleGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::paleGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_paleTurquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::paleTurquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_paleVioletRed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::paleVioletRed;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_papayaWhip_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::papayaWhip;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_peachPuff_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::peachPuff;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_peru_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::peru;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_pink_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::pink;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_plum_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::plum;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_powderBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::powderBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_purple_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::purple;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_rosyBrown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::rosyBrown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_royalBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::royalBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_saddleBrown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::saddleBrown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_salmon_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::salmon;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_sandyBrown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::sandyBrown;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_seaGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::seaGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_seaShell_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::seaShell;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_sienna_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::sienna;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_silver_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::silver;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_skyBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::skyBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_slateBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::slateBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_slateGray_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::slateGray;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_slateGrey_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::slateGrey;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_snow_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::snow;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_springGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::springGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_steelBlue_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::steelBlue;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_tan_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::tan;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_teal_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::teal;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_thistle_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::thistle;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_tomato_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::tomato;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_turquoise_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::turquoise;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_violet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::violet;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_wheat_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::wheat;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_whiteSmoke_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::whiteSmoke;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_yellowGreen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *result = 0 ;
  
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::yellowGreen;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_set" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortColor_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortColor_set" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_set" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortColor_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->set(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_set__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_set" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->set(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_set__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_set" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->set(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_set__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  ofColor_< unsigned short > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_set" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortColor_set" "', argument " "2"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortColor_set" "', argument " "2"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  arg2 = (ofColor_< unsigned short > *)(argp2);
  (arg1)->set((ofColor_< unsigned short > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_set__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_set__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_setHex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_setHex" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_setHex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_setHex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setHex(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_setHex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_setHex" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_setHex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setHex(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_setHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_setHex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_setHex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setHex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getHex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getHex" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = (int)((ofColor_< unsigned short > const *)arg1)->getHex();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_clamp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned short > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_clamp.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_clamp" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = (ofColor_< unsigned short > *) &(arg1)->clamp();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_invert(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned short > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_invert.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_invert" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = (ofColor_< unsigned short > *) &(arg1)->invert();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_normalize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned short > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_normalize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_normalize" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = (ofColor_< unsigned short > *) &(arg1)->normalize();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_lerp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  ofColor_< unsigned short > *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned short > *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_lerp.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_lerp" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortColor_lerp" "', argument " "2"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortColor_lerp" "', argument " "2"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  arg2 = (ofColor_< unsigned short > *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_lerp" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofColor_< unsigned short > *) &(arg1)->lerp((ofColor_< unsigned short > const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getClamped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned short > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getClamped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getClamped" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = ((ofColor_< unsigned short > const *)arg1)->getClamped();
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getInverted(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned short > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getInverted.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getInverted" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = ((ofColor_< unsigned short > const *)arg1)->getInverted();
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getNormalized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor_< unsigned short > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getNormalized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getNormalized" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = ((ofColor_< unsigned short > const *)arg1)->getNormalized();
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getLerped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  ofColor_< unsigned short > *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned short > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getLerped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getLerped" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortColor_getLerped" "', argument " "2"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortColor_getLerped" "', argument " "2"" of type '" "ofColor_< unsigned short > const &""'"); 
  }
  arg2 = (ofColor_< unsigned short > *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_getLerped" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ((ofColor_< unsigned short > const *)arg1)->getLerped((ofColor_< unsigned short > const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getHue(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getHue.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getHue" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = (float)((ofColor_< unsigned short > const *)arg1)->getHue();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getSaturation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getSaturation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getSaturation" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = (float)((ofColor_< unsigned short > const *)arg1)->getSaturation();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getBrightness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getBrightness.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getBrightness" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = (float)((ofColor_< unsigned short > const *)arg1)->getBrightness();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getLightness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getLightness.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getLightness" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  result = (float)((ofColor_< unsigned short > const *)arg1)->getLightness();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_getHsb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_getHsb.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_getHsb" "', argument " "1"" of type '" "ofColor_< unsigned short > const *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortColor_getHsb" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortColor_getHsb" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = (float *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShortColor_getHsb" "', argument " "3"" of type '" "float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortColor_getHsb" "', argument " "3"" of type '" "float &""'"); 
  }
  arg3 = (float *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofShortColor_getHsb" "', argument " "4"" of type '" "float &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortColor_getHsb" "', argument " "4"" of type '" "float &""'"); 
  }
  arg4 = (float *)(argp4);
  ((ofColor_< unsigned short > const *)arg1)->getHsb(*arg2,*arg3,*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_setHue(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_setHue.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_setHue" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_setHue" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setHue(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_setSaturation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_setSaturation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_setSaturation" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_setSaturation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setSaturation(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_setBrightness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_setBrightness.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_setBrightness" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_setBrightness" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setBrightness(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_setHsb__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_setHsb" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_setHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_setHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortColor_setHsb" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortColor_setHsb" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->setHsb(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_setHsb__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofColor_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortColor_setHsb" "', argument " "1"" of type '" "ofColor_< unsigned short > *""'"); 
  }
  arg1 = (ofColor_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortColor_setHsb" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortColor_setHsb" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortColor_setHsb" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setHsb(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortColor_setHsb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_setHsb__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortColor_setHsb__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setHsb.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortColor_limit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortColor_limit.");  
  
  result = (float)ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR limit();
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_QUALITY_BEST(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_QUALITY_BEST));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_QUALITY_HIGH(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_QUALITY_HIGH));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_QUALITY_MEDIUM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_QUALITY_MEDIUM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_QUALITY_LOW(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_QUALITY_LOW));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_QUALITY_WORST(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_QUALITY_WORST));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_BMP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_BMP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_ICO(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_ICO));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_JPEG(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_JPEG));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_JNG(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_JNG));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_KOALA(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_KOALA));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_LBM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_LBM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_IFF(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_IFF));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_MNG(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_MNG));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PBM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PBM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PBMRAW(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PBMRAW));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PCD(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PCD));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PCX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PCX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PGM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PGM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PGMRAW(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PGMRAW));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PNG(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PNG));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PPM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PPM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PPMRAW(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PPMRAW));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_RAS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_RAS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_TARGA(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_TARGA));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_TIFF(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_TIFF));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_WBMP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_WBMP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PSD(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PSD));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_CUT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_CUT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_XBM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_XBM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_XPM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_XPM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_DDS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_DDS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_GIF(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_GIF));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_HDR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_HDR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_FAXG3(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_FAXG3));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_SGI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_SGI));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_EXR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_EXR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_J2K(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_J2K));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_JP2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_JP2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PFM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PFM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_PICT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_PICT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_FORMAT_RAW(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_FORMAT_RAW));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLoadImage__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  arg1 = (ofPixels *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)ofLoadImage(*arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLoadImage__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  arg1 = (ofPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofLoadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  result = (bool)ofLoadImage(*arg1,(ofBuffer const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLoadImage__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFloatPixels *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  arg1 = (ofFloatPixels *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)ofLoadImage(*arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLoadImage__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFloatPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  arg1 = (ofFloatPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofLoadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  result = (bool)ofLoadImage(*arg1,(ofBuffer const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLoadImage__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShortPixels *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  arg1 = (ofShortPixels *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)ofLoadImage(*arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLoadImage__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShortPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  arg1 = (ofShortPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofLoadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  result = (bool)ofLoadImage(*arg1,(ofBuffer const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLoadImage__SWIG_6(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofTexture,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofTexture &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofTexture &""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)ofLoadImage(*arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLoadImage__SWIG_7(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofTexture,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofTexture &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "1"" of type '" "ofTexture &""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofLoadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  result = (bool)ofLoadImage(*arg1,(ofBuffer const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofLoadImage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadImage__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadImage__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadImage__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadImage__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadImage__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofLoadImage.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels *arg1 = 0 ;
  std::string arg2 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  arg1 = (ofPixels *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSaveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  ofSaveImage(*arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  arg1 = (ofPixels *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ofSaveImage(*arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  ofImageFormat arg3 ;
  ofImageQualityType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  arg1 = (ofPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSaveImage" "', argument " "3"" of type '" "ofImageFormat""'");
  } 
  arg3 = (ofImageFormat)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSaveImage" "', argument " "4"" of type '" "ofImageQualityType""'");
  } 
  arg4 = (ofImageQualityType)(val4);
  ofSaveImage(*arg1,*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  ofImageFormat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  arg1 = (ofPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSaveImage" "', argument " "3"" of type '" "ofImageFormat""'");
  } 
  arg3 = (ofImageFormat)(val3);
  ofSaveImage(*arg1,*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofPixels &""'"); 
  }
  arg1 = (ofPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ofSaveImage(*arg1,*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFloatPixels *arg1 = 0 ;
  std::string arg2 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  arg1 = (ofFloatPixels *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSaveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  ofSaveImage(*arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_6(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFloatPixels *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  arg1 = (ofFloatPixels *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ofSaveImage(*arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_7(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFloatPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  ofImageFormat arg3 ;
  ofImageQualityType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  arg1 = (ofFloatPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSaveImage" "', argument " "3"" of type '" "ofImageFormat""'");
  } 
  arg3 = (ofImageFormat)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSaveImage" "', argument " "4"" of type '" "ofImageQualityType""'");
  } 
  arg4 = (ofImageQualityType)(val4);
  ofSaveImage(*arg1,*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_8(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFloatPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  ofImageFormat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  arg1 = (ofFloatPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSaveImage" "', argument " "3"" of type '" "ofImageFormat""'");
  } 
  arg3 = (ofImageFormat)(val3);
  ofSaveImage(*arg1,*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_9(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFloatPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofFloatPixels &""'"); 
  }
  arg1 = (ofFloatPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ofSaveImage(*arg1,*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_10(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShortPixels *arg1 = 0 ;
  std::string arg2 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  arg1 = (ofShortPixels *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSaveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  ofSaveImage(*arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_11(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShortPixels *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  arg1 = (ofShortPixels *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ofSaveImage(*arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_12(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShortPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  ofImageFormat arg3 ;
  ofImageQualityType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  arg1 = (ofShortPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSaveImage" "', argument " "3"" of type '" "ofImageFormat""'");
  } 
  arg3 = (ofImageFormat)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSaveImage" "', argument " "4"" of type '" "ofImageQualityType""'");
  } 
  arg4 = (ofImageQualityType)(val4);
  ofSaveImage(*arg1,*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_13(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShortPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  ofImageFormat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  arg1 = (ofShortPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSaveImage" "', argument " "3"" of type '" "ofImageFormat""'");
  } 
  arg3 = (ofImageFormat)(val3);
  ofSaveImage(*arg1,*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveImage__SWIG_14(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShortPixels *arg1 = 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "1"" of type '" "ofShortPixels &""'"); 
  }
  arg1 = (ofShortPixels *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSaveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ofSaveImage(*arg1,*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSaveImage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_9(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_10(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_11(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_12(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_13(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveImage__SWIG_14(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSaveImage.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCloseFreeImage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCloseFreeImage.");  
  
  ofCloseFreeImage();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofImage__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofImage_< unsigned char > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofImage__SWIG_0.");  
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofImage(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofImage(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofImage_< unsigned char > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofImage__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPixels_< unsigned char > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofImage_< unsigned char > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofImage__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofImage" "', argument " "1"" of type '" "ofPixels_< unsigned char > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofImage" "', argument " "1"" of type '" "ofPixels_< unsigned char > const &""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((ofPixels_< unsigned char > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofImage__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFile *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofImage_< unsigned char > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofImage__SWIG_2.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofImage" "', argument " "1"" of type '" "ofFile const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofImage" "', argument " "1"" of type '" "ofFile const &""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((ofFile const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofImage__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  ofImage_< unsigned char > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofImage__SWIG_3.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((std::string const &)*arg1);
  
  
  if (arg1) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_allocate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofImageType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_allocate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_allocate" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_allocate" "', argument " "4"" of type '" "ofImageType""'");
  } 
  arg4 = (ofImageType)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_clear" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofImage__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofImage_< unsigned char > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofImage_< unsigned char > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofImage__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofImage_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofImage" "', argument " "1"" of type '" "ofImage_< unsigned char > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofImage" "', argument " "1"" of type '" "ofImage_< unsigned char > const &""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((ofImage_< unsigned char > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofImage(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofImage__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofImage__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofImage_T_unsigned_char_t");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_setUseTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_setUseTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_setUseTexture" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_setUseTexture" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setUseTexture(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_isUsingTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_isUsingTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_isUsingTexture" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (bool)(arg1)->isUsingTexture();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_getTextureReference(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTexture *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_getTextureReference.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_getTextureReference" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (ofTexture *) &(arg1)->getTextureReference();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTexture, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_bind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_bind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_bind" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  (arg1)->bind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_unbind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_unbind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_unbind" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  (arg1)->unbind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_loadImage__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_loadImage" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->loadImage(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_loadImage__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_loadImage" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_loadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofImage_loadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  result = (bool)(arg1)->loadImage((ofBuffer const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_loadImage__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofFile *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_loadImage" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_loadImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofImage_loadImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  arg2 = (ofFile *)(argp2);
  result = (bool)(arg1)->loadImage((ofFile const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_loadImage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_loadImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_loadImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_loadImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function loadImage.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_saveImage__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  std::string arg2 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_saveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  (arg1)->saveImage(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_saveImage__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  (arg1)->saveImage(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_saveImage__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofBuffer *arg2 = 0 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_saveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  (arg1)->saveImage(*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_saveImage__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  (arg1)->saveImage(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_saveImage__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofFile *arg2 = 0 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  arg2 = (ofFile *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_saveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  (arg1)->saveImage((ofFile const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_saveImage__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofFile *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  arg2 = (ofFile *)(argp2);
  (arg1)->saveImage((ofFile const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_saveImage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_saveImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_saveImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_saveImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_saveImage__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_saveImage__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_saveImage__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function saveImage.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_setCompression(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofTexCompression arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_setCompression.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_setCompression" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_setCompression" "', argument " "2"" of type '" "ofTexCompression""'");
  } 
  arg2 = (ofTexCompression)(val2);
  (arg1)->setCompression(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_getPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_getPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_getPixels" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (unsigned char *)(arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_getPixelsRef(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPixels_< unsigned char > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_getPixelsRef.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_getPixelsRef" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (ofPixels_< unsigned char > *) &(arg1)->getPixelsRef();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_getColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned char > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_getColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_getColor" "', argument " "1"" of type '" "ofImage_< unsigned char > const *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_getColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_getColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = ((ofImage_< unsigned char > const *)arg1)->getColor(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_setColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofColor_< unsigned char > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_setColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_setColor" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_setColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_setColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofImage_setColor" "', argument " "4"" of type '" "ofColor_< unsigned char >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofImage_setColor" "', argument " "4"" of type '" "ofColor_< unsigned char >""'");
    } else {
      arg4 = *((ofColor_< unsigned char > *)(argp4));
    }
  }
  (arg1)->setColor(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_setFromPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  ofImageType arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_setFromPixels" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_setFromPixels" "', argument " "2"" of type '" "unsigned char const *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_setFromPixels" "', argument " "5"" of type '" "ofImageType""'");
  } 
  arg5 = (ofImageType)(val5);
  ecode6 = SWIG_AsVal_bool(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofImage_setFromPixels" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = (bool)(val6);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_setFromPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  ofImageType arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_setFromPixels" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_setFromPixels" "', argument " "2"" of type '" "unsigned char const *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_setFromPixels" "', argument " "5"" of type '" "ofImageType""'");
  } 
  arg5 = (ofImageType)(val5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_setFromPixels__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofPixels_< unsigned char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_setFromPixels" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_setFromPixels" "', argument " "2"" of type '" "ofPixels_< unsigned char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofImage_setFromPixels" "', argument " "2"" of type '" "ofPixels_< unsigned char > const &""'"); 
  }
  arg2 = (ofPixels_< unsigned char > *)(argp2);
  (arg1)->setFromPixels((ofPixels_< unsigned char > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_setFromPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_setFromPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_setFromPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_setFromPixels__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setFromPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_setImageType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofImageType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_setImageType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_setImageType" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_setImageType" "', argument " "2"" of type '" "ofImageType""'");
  } 
  arg2 = (ofImageType)(val2);
  (arg1)->setImageType(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_resize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_resize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_resize" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->resize(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_grabScreen(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_grabScreen.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_grabScreen" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_grabScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_grabScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_grabScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_grabScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->grabScreen(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_crop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_crop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_crop" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_crop" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_crop" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_crop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_crop" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->crop(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_cropFrom(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  ofImage_< unsigned char > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_cropFrom.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_cropFrom" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofImage_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofImage_cropFrom" "', argument " "2"" of type '" "ofImage_< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofImage_cropFrom" "', argument " "2"" of type '" "ofImage_< unsigned char > &""'"); 
  }
  arg2 = (ofImage_< unsigned char > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_cropFrom" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_cropFrom" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_cropFrom" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofImage_cropFrom" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->cropFrom(*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_rotate90(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_rotate90.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_rotate90" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_rotate90" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->rotate90(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_mirror(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_mirror.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_mirror" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_mirror" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_mirror" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->mirror(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_update(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_update.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_update" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  (arg1)->update();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_setAnchorPercent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_setAnchorPercent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_setAnchorPercent" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_setAnchorPercent" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_setAnchorPercent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPercent(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_setAnchorPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_setAnchorPoint.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_setAnchorPoint" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_setAnchorPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_setAnchorPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPoint(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_resetAnchor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_resetAnchor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_resetAnchor" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  (arg1)->resetAnchor();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_draw__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_draw" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->draw(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_draw__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_draw" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->draw(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_draw__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_draw" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->draw(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_draw__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_draw" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofImage_draw" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->draw(arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_draw__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_draw__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_draw__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_draw__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function draw.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_drawSubsection__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_drawSubsection__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofImage_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_drawSubsection__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofImage_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofImage_drawSubsection" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_drawSubsection__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofImage_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofImage_drawSubsection" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofImage_drawSubsection" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofImage_drawSubsection(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_drawSubsection__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_drawSubsection__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_drawSubsection__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofImage_drawSubsection__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawSubsection.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_getHeight" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (float)(arg1)->getHeight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_getWidth" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (float)(arg1)->getWidth();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_bAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_bAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_bAllocated" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (bool)(arg1)->bAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_isAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_isAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_isAllocated" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (bool)(arg1)->isAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofImage_reloadTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofImage_reloadTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_reloadTexture" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  (arg1)->reloadTexture();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofImage_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_width_set" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofImage_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_width_get" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (int) ((arg1)->width);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofImage_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_height_set" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofImage_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_height_get" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (int) ((arg1)->height);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofImage_bpp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_bpp_set" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_bpp_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->bpp = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofImage_bpp_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_bpp_get" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (int) ((arg1)->bpp);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofImage_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_type_set" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofImage_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofImage_type_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofImage_type_get" "', argument " "1"" of type '" "ofImage_< unsigned char > *""'"); 
  }
  arg1 = (ofImage_< unsigned char > *)(argp1);
  result = (int) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatImage__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofImage_< float > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatImage__SWIG_0.");  
  result = (ofImage_< float > *)new ofImage_< float >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofFloatImage(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofFloatImage(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofImage_< float > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofFloatImage__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPixels_< float > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofImage_< float > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatImage__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofFloatImage" "', argument " "1"" of type '" "ofPixels_< float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofFloatImage" "', argument " "1"" of type '" "ofPixels_< float > const &""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (ofImage_< float > *)new ofImage_< float >((ofPixels_< float > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatImage__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFile *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofImage_< float > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatImage__SWIG_2.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofFloatImage" "', argument " "1"" of type '" "ofFile const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofFloatImage" "', argument " "1"" of type '" "ofFile const &""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (ofImage_< float > *)new ofImage_< float >((ofFile const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatImage__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  ofImage_< float > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatImage__SWIG_3.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofImage_< float > *)new ofImage_< float >((std::string const &)*arg1);
  
  
  if (arg1) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_allocate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofImageType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_allocate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_allocate" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_allocate" "', argument " "4"" of type '" "ofImageType""'");
  } 
  arg4 = (ofImageType)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_clear" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatImage__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofImage_< float > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofImage_< float > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatImage__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofImage_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofFloatImage" "', argument " "1"" of type '" "ofImage_< float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofFloatImage" "', argument " "1"" of type '" "ofImage_< float > const &""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (ofImage_< float > *)new ofImage_< float >((ofImage_< float > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatImage(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatImage__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatImage__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofImage_T_float_t");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setUseTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_setUseTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_setUseTexture" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_setUseTexture" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setUseTexture(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_isUsingTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_isUsingTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_isUsingTexture" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (bool)(arg1)->isUsingTexture();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_getTextureReference(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTexture *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_getTextureReference.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_getTextureReference" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (ofTexture *) &(arg1)->getTextureReference();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTexture, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_bind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_bind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_bind" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  (arg1)->bind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_unbind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_unbind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_unbind" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  (arg1)->unbind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_loadImage__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_loadImage" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->loadImage(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_loadImage__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_loadImage" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_loadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatImage_loadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  result = (bool)(arg1)->loadImage((ofBuffer const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_loadImage__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofFile *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_loadImage" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_loadImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatImage_loadImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  arg2 = (ofFile *)(argp2);
  result = (bool)(arg1)->loadImage((ofFile const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_loadImage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_loadImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_loadImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_loadImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function loadImage.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_saveImage__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  std::string arg2 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_saveImage" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_saveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  (arg1)->saveImage(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_saveImage__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_saveImage" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  (arg1)->saveImage(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_saveImage__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofBuffer *arg2 = 0 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_saveImage" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_saveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  (arg1)->saveImage(*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_saveImage__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_saveImage" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  (arg1)->saveImage(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_saveImage__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofFile *arg2 = 0 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_saveImage" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  arg2 = (ofFile *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_saveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  (arg1)->saveImage((ofFile const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_saveImage__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofFile *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_saveImage" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  arg2 = (ofFile *)(argp2);
  (arg1)->saveImage((ofFile const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_saveImage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_saveImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_saveImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_saveImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_saveImage__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_saveImage__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_saveImage__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function saveImage.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setCompression(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofTexCompression arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_setCompression.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_setCompression" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_setCompression" "', argument " "2"" of type '" "ofTexCompression""'");
  } 
  arg2 = (ofTexCompression)(val2);
  (arg1)->setCompression(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_getPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_getPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_getPixels" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (float *)(arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_getPixelsRef(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPixels_< float > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_getPixelsRef.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_getPixelsRef" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (ofPixels_< float > *) &(arg1)->getPixelsRef();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_getColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofColor_< float > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_getColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_getColor" "', argument " "1"" of type '" "ofImage_< float > const *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_getColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_getColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = ((ofImage_< float > const *)arg1)->getColor(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofColor_< float > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_setColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_setColor" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_setColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_setColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofFloatImage_setColor" "', argument " "4"" of type '" "ofColor_< float >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatImage_setColor" "', argument " "4"" of type '" "ofColor_< float >""'");
    } else {
      arg4 = *((ofColor_< float > *)(argp4));
    }
  }
  (arg1)->setColor(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setFromPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  ofImageType arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_setFromPixels" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_setFromPixels" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_setFromPixels" "', argument " "5"" of type '" "ofImageType""'");
  } 
  arg5 = (ofImageType)(val5);
  ecode6 = SWIG_AsVal_bool(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofFloatImage_setFromPixels" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = (bool)(val6);
  (arg1)->setFromPixels((float const *)arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setFromPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  ofImageType arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_setFromPixels" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_setFromPixels" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_setFromPixels" "', argument " "5"" of type '" "ofImageType""'");
  } 
  arg5 = (ofImageType)(val5);
  (arg1)->setFromPixels((float const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setFromPixels__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_setFromPixels" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_setFromPixels" "', argument " "2"" of type '" "ofPixels_< float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatImage_setFromPixels" "', argument " "2"" of type '" "ofPixels_< float > const &""'"); 
  }
  arg2 = (ofPixels_< float > *)(argp2);
  (arg1)->setFromPixels((ofPixels_< float > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setFromPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_setFromPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_setFromPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_setFromPixels__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setFromPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setImageType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofImageType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_setImageType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_setImageType" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_setImageType" "', argument " "2"" of type '" "ofImageType""'");
  } 
  arg2 = (ofImageType)(val2);
  (arg1)->setImageType(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_resize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_resize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_resize" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->resize(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_grabScreen(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_grabScreen.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_grabScreen" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_grabScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_grabScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_grabScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_grabScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->grabScreen(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_crop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_crop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_crop" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_crop" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_crop" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_crop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_crop" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->crop(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_cropFrom(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofImage_< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_cropFrom.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_cropFrom" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofImage_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatImage_cropFrom" "', argument " "2"" of type '" "ofImage_< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatImage_cropFrom" "', argument " "2"" of type '" "ofImage_< float > &""'"); 
  }
  arg2 = (ofImage_< float > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_cropFrom" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_cropFrom" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_cropFrom" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofFloatImage_cropFrom" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->cropFrom(*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_rotate90(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_rotate90.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_rotate90" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_rotate90" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->rotate90(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_mirror(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_mirror.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_mirror" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_mirror" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_mirror" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->mirror(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_update(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_update.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_update" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  (arg1)->update();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setAnchorPercent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_setAnchorPercent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_setAnchorPercent" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_setAnchorPercent" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_setAnchorPercent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPercent(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_setAnchorPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_setAnchorPoint.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_setAnchorPoint" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_setAnchorPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_setAnchorPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPoint(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_resetAnchor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_resetAnchor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_resetAnchor" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  (arg1)->resetAnchor();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_draw__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_draw" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->draw(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_draw__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_draw" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->draw(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_draw__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_draw" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->draw(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_draw__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_draw" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofFloatImage_draw" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->draw(arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_draw__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_draw__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_draw__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_draw__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function draw.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_drawSubsection__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofFloatImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofFloatImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_drawSubsection__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofFloatImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofFloatImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofFloatImage_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_drawSubsection__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofFloatImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofFloatImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofFloatImage_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofFloatImage_drawSubsection" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_drawSubsection__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofFloatImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofFloatImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofFloatImage_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofFloatImage_drawSubsection" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofFloatImage_drawSubsection" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatImage_drawSubsection(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_drawSubsection__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_drawSubsection__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_drawSubsection__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatImage_drawSubsection__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawSubsection.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_getHeight" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (float)(arg1)->getHeight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_getWidth" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (float)(arg1)->getWidth();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_bAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_bAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_bAllocated" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (bool)(arg1)->bAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_isAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_isAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_isAllocated" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (bool)(arg1)->isAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatImage_reloadTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatImage_reloadTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_reloadTexture" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  (arg1)->reloadTexture();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofFloatImage_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_width_set" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofFloatImage_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_width_get" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (int) ((arg1)->width);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofFloatImage_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_height_set" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofFloatImage_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_height_get" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (int) ((arg1)->height);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofFloatImage_bpp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_bpp_set" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_bpp_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->bpp = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofFloatImage_bpp_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_bpp_get" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (int) ((arg1)->bpp);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofFloatImage_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_type_set" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatImage_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofFloatImage_type_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatImage_type_get" "', argument " "1"" of type '" "ofImage_< float > *""'"); 
  }
  arg1 = (ofImage_< float > *)(argp1);
  result = (int) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortImage__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofImage_< unsigned short > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortImage__SWIG_0.");  
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofShortImage(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofShortImage(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofImage_< unsigned short > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofShortImage__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPixels_< unsigned short > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofImage_< unsigned short > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortImage__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofShortImage" "', argument " "1"" of type '" "ofPixels_< unsigned short > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofShortImage" "', argument " "1"" of type '" "ofPixels_< unsigned short > const &""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >((ofPixels_< unsigned short > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortImage__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFile *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofImage_< unsigned short > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortImage__SWIG_2.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofShortImage" "', argument " "1"" of type '" "ofFile const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofShortImage" "', argument " "1"" of type '" "ofFile const &""'"); 
  }
  arg1 = (ofFile *)(argp1);
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >((ofFile const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortImage__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  ofImage_< unsigned short > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortImage__SWIG_3.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >((std::string const &)*arg1);
  
  
  if (arg1) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_allocate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofImageType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_allocate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_allocate" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_allocate" "', argument " "4"" of type '" "ofImageType""'");
  } 
  arg4 = (ofImageType)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_clear" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortImage__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofImage_< unsigned short > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofImage_< unsigned short > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortImage__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofImage_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofShortImage" "', argument " "1"" of type '" "ofImage_< unsigned short > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofShortImage" "', argument " "1"" of type '" "ofImage_< unsigned short > const &""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >((ofImage_< unsigned short > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofImage_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortImage(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortImage__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortImage__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofImage_T_unsigned_short_t");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_setUseTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_setUseTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_setUseTexture" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_setUseTexture" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setUseTexture(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_isUsingTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_isUsingTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_isUsingTexture" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (bool)(arg1)->isUsingTexture();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_getTextureReference(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTexture *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_getTextureReference.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_getTextureReference" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (ofTexture *) &(arg1)->getTextureReference();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTexture, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_bind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_bind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_bind" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  (arg1)->bind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_unbind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_unbind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_unbind" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  (arg1)->unbind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_loadImage__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_loadImage" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->loadImage(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_loadImage__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_loadImage" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_loadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortImage_loadImage" "', argument " "2"" of type '" "ofBuffer const &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  result = (bool)(arg1)->loadImage((ofBuffer const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_loadImage__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofFile *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_loadImage" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_loadImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortImage_loadImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  arg2 = (ofFile *)(argp2);
  result = (bool)(arg1)->loadImage((ofFile const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_loadImage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_loadImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_loadImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_loadImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function loadImage.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_saveImage__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  std::string arg2 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_saveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  (arg1)->saveImage(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_saveImage__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  (arg1)->saveImage(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_saveImage__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofBuffer *arg2 = 0 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_saveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  (arg1)->saveImage(*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_saveImage__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofBuffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofBuffer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortImage_saveImage" "', argument " "2"" of type '" "ofBuffer &""'"); 
  }
  arg2 = (ofBuffer *)(argp2);
  (arg1)->saveImage(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_saveImage__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofFile *arg2 = 0 ;
  ofImageQualityType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  arg2 = (ofFile *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_saveImage" "', argument " "3"" of type '" "ofImageQualityType""'");
  } 
  arg3 = (ofImageQualityType)(val3);
  (arg1)->saveImage((ofFile const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_saveImage__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofFile *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_saveImage" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortImage_saveImage" "', argument " "2"" of type '" "ofFile const &""'"); 
  }
  arg2 = (ofFile *)(argp2);
  (arg1)->saveImage((ofFile const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_saveImage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_saveImage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_saveImage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_saveImage__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_saveImage__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_saveImage__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_saveImage__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function saveImage.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_setCompression(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofTexCompression arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_setCompression.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_setCompression" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_setCompression" "', argument " "2"" of type '" "ofTexCompression""'");
  } 
  arg2 = (ofTexCompression)(val2);
  (arg1)->setCompression(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_getPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_getPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_getPixels" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (unsigned short *)(arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_getPixelsRef(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPixels_< unsigned short > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_getPixelsRef.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_getPixelsRef" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (ofPixels_< unsigned short > *) &(arg1)->getPixelsRef();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_getColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned short > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_getColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_getColor" "', argument " "1"" of type '" "ofImage_< unsigned short > const *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_getColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_getColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = ((ofImage_< unsigned short > const *)arg1)->getColor(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_setColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofColor_< unsigned short > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_setColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_setColor" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_setColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_setColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofColor_T_unsigned_short_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofShortImage_setColor" "', argument " "4"" of type '" "ofColor_< unsigned short >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortImage_setColor" "', argument " "4"" of type '" "ofColor_< unsigned short >""'");
    } else {
      arg4 = *((ofColor_< unsigned short > *)(argp4));
    }
  }
  (arg1)->setColor(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_setFromPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ;
  int arg4 ;
  ofImageType arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_setFromPixels" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_setFromPixels" "', argument " "2"" of type '" "unsigned short const *""'"); 
  }
  arg2 = (unsigned short *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_setFromPixels" "', argument " "5"" of type '" "ofImageType""'");
  } 
  arg5 = (ofImageType)(val5);
  ecode6 = SWIG_AsVal_bool(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShortImage_setFromPixels" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = (bool)(val6);
  (arg1)->setFromPixels((unsigned short const *)arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_setFromPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ;
  int arg4 ;
  ofImageType arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_setFromPixels" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_setFromPixels" "', argument " "2"" of type '" "unsigned short const *""'"); 
  }
  arg2 = (unsigned short *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_setFromPixels" "', argument " "5"" of type '" "ofImageType""'");
  } 
  arg5 = (ofImageType)(val5);
  (arg1)->setFromPixels((unsigned short const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_setFromPixels__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofPixels_< unsigned short > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_setFromPixels" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_setFromPixels" "', argument " "2"" of type '" "ofPixels_< unsigned short > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortImage_setFromPixels" "', argument " "2"" of type '" "ofPixels_< unsigned short > const &""'"); 
  }
  arg2 = (ofPixels_< unsigned short > *)(argp2);
  (arg1)->setFromPixels((ofPixels_< unsigned short > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_setFromPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_setFromPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_setFromPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_setFromPixels__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setFromPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_setImageType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofImageType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_setImageType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_setImageType" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_setImageType" "', argument " "2"" of type '" "ofImageType""'");
  } 
  arg2 = (ofImageType)(val2);
  (arg1)->setImageType(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_resize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_resize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_resize" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->resize(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_grabScreen(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_grabScreen.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_grabScreen" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_grabScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_grabScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_grabScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_grabScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->grabScreen(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_crop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_crop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_crop" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_crop" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_crop" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_crop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_crop" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->crop(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_cropFrom(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  ofImage_< unsigned short > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_cropFrom.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_cropFrom" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofImage_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortImage_cropFrom" "', argument " "2"" of type '" "ofImage_< unsigned short > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortImage_cropFrom" "', argument " "2"" of type '" "ofImage_< unsigned short > &""'"); 
  }
  arg2 = (ofImage_< unsigned short > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_cropFrom" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_cropFrom" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_cropFrom" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShortImage_cropFrom" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->cropFrom(*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_rotate90(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_rotate90.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_rotate90" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_rotate90" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->rotate90(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_mirror(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_mirror.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_mirror" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_mirror" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_mirror" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->mirror(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_update(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_update.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_update" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  (arg1)->update();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_setAnchorPercent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_setAnchorPercent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_setAnchorPercent" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_setAnchorPercent" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_setAnchorPercent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPercent(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_setAnchorPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_setAnchorPoint.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_setAnchorPoint" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_setAnchorPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_setAnchorPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPoint(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_resetAnchor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_resetAnchor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_resetAnchor" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  (arg1)->resetAnchor();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_draw__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_draw" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->draw(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_draw__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_draw" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->draw(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_draw__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_draw" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->draw(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_draw__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_draw" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShortImage_draw" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->draw(arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_draw__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_draw__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_draw__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_draw__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function draw.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_drawSubsection__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShortImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofShortImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_drawSubsection__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShortImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofShortImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofShortImage_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_drawSubsection__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShortImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofShortImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofShortImage_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofShortImage_drawSubsection" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_drawSubsection__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_drawSubsection" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortImage_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortImage_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortImage_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShortImage_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofShortImage_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofShortImage_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofShortImage_drawSubsection" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofShortImage_drawSubsection" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortImage_drawSubsection(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_drawSubsection__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_drawSubsection__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_drawSubsection__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortImage_drawSubsection__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawSubsection.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_getHeight" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (float)(arg1)->getHeight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_getWidth" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (float)(arg1)->getWidth();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_bAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_bAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_bAllocated" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (bool)(arg1)->bAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_isAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_isAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_isAllocated" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (bool)(arg1)->isAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortImage_reloadTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortImage_reloadTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_reloadTexture" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  (arg1)->reloadTexture();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofShortImage_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_width_set" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofShortImage_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_width_get" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (int) ((arg1)->width);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofShortImage_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_height_set" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofShortImage_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_height_get" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (int) ((arg1)->height);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofShortImage_bpp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_bpp_set" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_bpp_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->bpp = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofShortImage_bpp_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_bpp_get" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (int) ((arg1)->bpp);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofShortImage_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_type_set" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortImage_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofShortImage_type_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofImage_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortImage_type_get" "', argument " "1"" of type '" "ofImage_< unsigned short > *""'"); 
  }
  arg1 = (ofImage_< unsigned short > *)(argp1);
  result = (int) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_INTERPOLATE_NEAREST_NEIGHBOR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_INTERPOLATE_NEAREST_NEIGHBOR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_INTERPOLATE_BILINEAR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_INTERPOLATE_BILINEAR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_INTERPOLATE_BICUBIC(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_INTERPOLATE_BICUBIC));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofPixels__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPixels_< unsigned char > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofPixels__SWIG_0.");  
  result = (ofPixels_< unsigned char > *)new ofPixels_< unsigned char >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofPixels(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofPixels(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofPixels_< unsigned char > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofPixels__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPixels_< unsigned char > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofPixels_< unsigned char > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofPixels__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofPixels" "', argument " "1"" of type '" "ofPixels_< unsigned char > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofPixels" "', argument " "1"" of type '" "ofPixels_< unsigned char > const &""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (ofPixels_< unsigned char > *)new ofPixels_< unsigned char >((ofPixels_< unsigned char > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofPixels(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofPixels_T_unsigned_char_t");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_allocate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_allocate" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_allocate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_allocate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofPixelFormat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_allocate" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_allocate" "', argument " "4"" of type '" "ofPixelFormat""'");
  } 
  arg4 = (ofPixelFormat)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_allocate__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofImageType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_allocate" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_allocate" "', argument " "4"" of type '" "ofImageType""'");
  } 
  arg4 = (ofImageType)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_allocate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_allocate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_allocate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_allocate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function allocate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_set" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = (unsigned char)(val2);
  (arg1)->set(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_set" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_set" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = (unsigned char)(val3);
  (arg1)->set(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_setFromPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_setFromPixels" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_setFromPixels" "', argument " "2"" of type '" "unsigned char const *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPixels_setFromPixels" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_setFromPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  ofImageType arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_setFromPixels" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_setFromPixels" "', argument " "2"" of type '" "unsigned char const *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPixels_setFromPixels" "', argument " "5"" of type '" "ofImageType""'");
  } 
  arg5 = (ofImageType)(val5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_setFromPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_setFromPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_setFromPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setFromPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_setFromExternalPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_setFromExternalPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_setFromExternalPixels" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_setFromExternalPixels" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_setFromExternalPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_setFromExternalPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPixels_setFromExternalPixels" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_setFromAlignedPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_setFromAlignedPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_setFromAlignedPixels" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_setFromAlignedPixels" "', argument " "2"" of type '" "unsigned char const *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_setFromAlignedPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_setFromAlignedPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPixels_setFromAlignedPixels" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPixels_setFromAlignedPixels" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->setFromAlignedPixels((unsigned char const *)arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_swap(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofPixels_< unsigned char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_swap.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_swap" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_swap" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPixels_swap" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  arg2 = (ofPixels_< unsigned char > *)(argp2);
  (arg1)->swap(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_crop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_crop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_crop" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_crop" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_crop" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_crop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPixels_crop" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->crop(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_cropTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofPixels_< unsigned char > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_cropTo.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_cropTo" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_cropTo" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPixels_cropTo" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  arg2 = (ofPixels_< unsigned char > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_cropTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_cropTo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPixels_cropTo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPixels_cropTo" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->cropTo(*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_rotate90(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_rotate90.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_rotate90" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_rotate90" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->rotate90(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_rotate90To(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofPixels_< unsigned char > *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_rotate90To.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_rotate90To" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_rotate90To" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPixels_rotate90To" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  arg2 = (ofPixels_< unsigned char > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_rotate90To" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->rotate90To(*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_mirrorTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofPixels_< unsigned char > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_mirrorTo.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_mirrorTo" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_mirrorTo" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPixels_mirrorTo" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  arg2 = (ofPixels_< unsigned char > *)(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_mirrorTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_mirrorTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  (arg1)->mirrorTo(*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_mirror(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_mirror.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_mirror" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_mirror" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_mirror" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->mirror(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_resize__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofInterpolationMethod arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_resize" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_resize" "', argument " "4"" of type '" "ofInterpolationMethod""'");
  } 
  arg4 = (ofInterpolationMethod)(val4);
  result = (bool)(arg1)->resize(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_resize__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_resize" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)(arg1)->resize(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_resize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_resize__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_resize__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function resize.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_resizeTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofPixels_< unsigned char > *arg2 = 0 ;
  ofInterpolationMethod arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_resizeTo" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  arg2 = (ofPixels_< unsigned char > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_resizeTo" "', argument " "3"" of type '" "ofInterpolationMethod""'");
  } 
  arg3 = (ofInterpolationMethod)(val3);
  result = (bool)(arg1)->resizeTo(*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_resizeTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofPixels_< unsigned char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_resizeTo" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  arg2 = (ofPixels_< unsigned char > *)(argp2);
  result = (bool)(arg1)->resizeTo(*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_resizeTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_resizeTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_resizeTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function resizeTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_pasteInto(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofPixels_< unsigned char > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_pasteInto.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_pasteInto" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPixels_pasteInto" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPixels_pasteInto" "', argument " "2"" of type '" "ofPixels_< unsigned char > &""'"); 
  }
  arg2 = (ofPixels_< unsigned char > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_pasteInto" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPixels_pasteInto" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (bool)(arg1)->pasteInto(*arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_swapRgb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_swapRgb.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_swapRgb" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  (arg1)->swapRgb();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_clear" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getPixels" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (unsigned char *)(arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_getPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getPixels" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (unsigned char *)((ofPixels_< unsigned char > const *)arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPixels_getPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_getPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPixels_getPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getPixelIndex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getPixelIndex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getPixelIndex" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_getPixelIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_getPixelIndex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getPixelIndex(arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned char > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getColor" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_getColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_getColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = ((ofPixels_< unsigned char > const *)arg1)->getColor(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned char >((const ofColor_< unsigned char >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_setColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofColor_< unsigned char > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_setColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_setColor" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_setColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPixels_setColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofPixels_setColor" "', argument " "4"" of type '" "ofColor_< unsigned char >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPixels_setColor" "', argument " "4"" of type '" "ofColor_< unsigned char >""'");
    } else {
      arg4 = *((ofColor_< unsigned char > *)(argp4));
    }
  }
  (arg1)->setColor(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_isAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_isAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_isAllocated" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (bool)((ofPixels_< unsigned char > const *)arg1)->isAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getWidth" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getWidth();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getHeight" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getHeight();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getBytesPerPixel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getBytesPerPixel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getBytesPerPixel" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBytesPerPixel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getBitsPerPixel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getBitsPerPixel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getBitsPerPixel" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBitsPerPixel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getBytesPerChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getBytesPerChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getBytesPerChannel" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBytesPerChannel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getBitsPerChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getBitsPerChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getBitsPerChannel" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBitsPerChannel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getNumChannels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getNumChannels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getNumChannels" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getNumChannels();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ofPixels_< unsigned char > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getChannel" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_getChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((ofPixels_< unsigned char > const *)arg1)->getChannel(arg2);
  jsresult = SWIG_NewPointerObj((new ofPixels_< unsigned char >((const ofPixels_< unsigned char >&)(result))), SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_setChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  ofPixels_< unsigned char > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_setChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_setChannel" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_setChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPixels_setChannel" "', argument " "3"" of type '" "ofPixels_< unsigned char > const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPixels_setChannel" "', argument " "3"" of type '" "ofPixels_< unsigned char > const""'");
    } else {
      arg3 = *((ofPixels_< unsigned char > *)(argp3));
    }
  }
  (arg1)->setChannel(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_getImageType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofImageType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_getImageType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_getImageType" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (ofImageType)((ofPixels_< unsigned char > const *)arg1)->getImageType();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_setImageType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofImageType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_setImageType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_setImageType" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_setImageType" "', argument " "2"" of type '" "ofImageType""'");
  } 
  arg2 = (ofImageType)(val2);
  (arg1)->setImageType(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_setNumChannels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_setNumChannels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_setNumChannels" "', argument " "1"" of type '" "ofPixels_< unsigned char > *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPixels_setNumChannels" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setNumChannels(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPixels_size(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPixels_size.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPixels_size" "', argument " "1"" of type '" "ofPixels_< unsigned char > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned char > *)(argp1);
  result = (int)((ofPixels_< unsigned char > const *)arg1)->size();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatPixels__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPixels_< float > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatPixels__SWIG_0.");  
  result = (ofPixels_< float > *)new ofPixels_< float >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofPixels_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofFloatPixels(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofFloatPixels(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofPixels_< float > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofFloatPixels__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPixels_< float > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofPixels_< float > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFloatPixels__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofFloatPixels" "', argument " "1"" of type '" "ofPixels_< float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofFloatPixels" "', argument " "1"" of type '" "ofPixels_< float > const &""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (ofPixels_< float > *)new ofPixels_< float >((ofPixels_< float > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofPixels_T_float_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFloatPixels(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFloatPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofPixels_T_float_t");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_allocate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_allocate" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_allocate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_allocate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofPixelFormat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_allocate" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_allocate" "', argument " "4"" of type '" "ofPixelFormat""'");
  } 
  arg4 = (ofPixelFormat)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_allocate__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofImageType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_allocate" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_allocate" "', argument " "4"" of type '" "ofImageType""'");
  } 
  arg4 = (ofImageType)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_allocate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_allocate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_allocate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_allocate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function allocate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_set" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->set(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_set" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->set(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_setFromPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_setFromPixels" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_setFromPixels" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatPixels_setFromPixels" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setFromPixels((float const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_setFromPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  ofImageType arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_setFromPixels" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_setFromPixels" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatPixels_setFromPixels" "', argument " "5"" of type '" "ofImageType""'");
  } 
  arg5 = (ofImageType)(val5);
  (arg1)->setFromPixels((float const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_setFromPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_setFromPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_setFromPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setFromPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_setFromExternalPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_setFromExternalPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_setFromExternalPixels" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_setFromExternalPixels" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_setFromExternalPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_setFromExternalPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatPixels_setFromExternalPixels" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_setFromAlignedPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_setFromAlignedPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_setFromAlignedPixels" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_setFromAlignedPixels" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_setFromAlignedPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_setFromAlignedPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatPixels_setFromAlignedPixels" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofFloatPixels_setFromAlignedPixels" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->setFromAlignedPixels((float const *)arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_swap(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_swap.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_swap" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_swap" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatPixels_swap" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  arg2 = (ofPixels_< float > *)(argp2);
  (arg1)->swap(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_crop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_crop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_crop" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_crop" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_crop" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_crop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatPixels_crop" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->crop(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_cropTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_cropTo.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_cropTo" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_cropTo" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatPixels_cropTo" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  arg2 = (ofPixels_< float > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_cropTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_cropTo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFloatPixels_cropTo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofFloatPixels_cropTo" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->cropTo(*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_rotate90(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_rotate90.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_rotate90" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_rotate90" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->rotate90(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_rotate90To(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_rotate90To.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_rotate90To" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_rotate90To" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatPixels_rotate90To" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  arg2 = (ofPixels_< float > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_rotate90To" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->rotate90To(*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_mirrorTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_mirrorTo.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_mirrorTo" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_mirrorTo" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatPixels_mirrorTo" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  arg2 = (ofPixels_< float > *)(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_mirrorTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_mirrorTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  (arg1)->mirrorTo(*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_mirror(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_mirror.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_mirror" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_mirror" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_mirror" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->mirror(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_resize__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofInterpolationMethod arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_resize" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_resize" "', argument " "4"" of type '" "ofInterpolationMethod""'");
  } 
  arg4 = (ofInterpolationMethod)(val4);
  result = (bool)(arg1)->resize(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_resize__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_resize" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)(arg1)->resize(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_resize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_resize__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_resize__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function resize.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_resizeTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ;
  ofInterpolationMethod arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_resizeTo" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  arg2 = (ofPixels_< float > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_resizeTo" "', argument " "3"" of type '" "ofInterpolationMethod""'");
  } 
  arg3 = (ofInterpolationMethod)(val3);
  result = (bool)(arg1)->resizeTo(*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_resizeTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_resizeTo" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  arg2 = (ofPixels_< float > *)(argp2);
  result = (bool)(arg1)->resizeTo(*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_resizeTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_resizeTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_resizeTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function resizeTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_pasteInto(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_pasteInto.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_pasteInto" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFloatPixels_pasteInto" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatPixels_pasteInto" "', argument " "2"" of type '" "ofPixels_< float > &""'"); 
  }
  arg2 = (ofPixels_< float > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_pasteInto" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFloatPixels_pasteInto" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (bool)(arg1)->pasteInto(*arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_swapRgb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_swapRgb.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_swapRgb" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  (arg1)->swapRgb();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_clear" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getPixels" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (float *)(arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getPixels" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (float *)((ofPixels_< float > const *)arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_getPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFloatPixels_getPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getPixelIndex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getPixelIndex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getPixelIndex" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_getPixelIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_getPixelIndex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)((ofPixels_< float > const *)arg1)->getPixelIndex(arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofColor_< float > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getColor" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_getColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_getColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = ((ofPixels_< float > const *)arg1)->getColor(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< float >((const ofColor_< float >&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_setColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofColor_< float > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_setColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_setColor" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_setColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFloatPixels_setColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofFloatPixels_setColor" "', argument " "4"" of type '" "ofColor_< float >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatPixels_setColor" "', argument " "4"" of type '" "ofColor_< float >""'");
    } else {
      arg4 = *((ofColor_< float > *)(argp4));
    }
  }
  (arg1)->setColor(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_isAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_isAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_isAllocated" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (bool)((ofPixels_< float > const *)arg1)->isAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getWidth" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (int)((ofPixels_< float > const *)arg1)->getWidth();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getHeight" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (int)((ofPixels_< float > const *)arg1)->getHeight();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getBytesPerPixel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getBytesPerPixel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getBytesPerPixel" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (int)((ofPixels_< float > const *)arg1)->getBytesPerPixel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getBitsPerPixel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getBitsPerPixel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getBitsPerPixel" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (int)((ofPixels_< float > const *)arg1)->getBitsPerPixel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getBytesPerChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getBytesPerChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getBytesPerChannel" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (int)((ofPixels_< float > const *)arg1)->getBytesPerChannel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getBitsPerChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getBitsPerChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getBitsPerChannel" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (int)((ofPixels_< float > const *)arg1)->getBitsPerChannel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getNumChannels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getNumChannels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getNumChannels" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (int)((ofPixels_< float > const *)arg1)->getNumChannels();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ofPixels_< float > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getChannel" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_getChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((ofPixels_< float > const *)arg1)->getChannel(arg2);
  jsresult = SWIG_NewPointerObj((new ofPixels_< float >((const ofPixels_< float >&)(result))), SWIGTYPE_p_ofPixels_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_setChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  ofPixels_< float > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_setChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_setChannel" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_setChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofPixels_T_float_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofFloatPixels_setChannel" "', argument " "3"" of type '" "ofPixels_< float > const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFloatPixels_setChannel" "', argument " "3"" of type '" "ofPixels_< float > const""'");
    } else {
      arg3 = *((ofPixels_< float > *)(argp3));
    }
  }
  (arg1)->setChannel(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_getImageType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofImageType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_getImageType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_getImageType" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (ofImageType)((ofPixels_< float > const *)arg1)->getImageType();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_setImageType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofImageType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_setImageType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_setImageType" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_setImageType" "', argument " "2"" of type '" "ofImageType""'");
  } 
  arg2 = (ofImageType)(val2);
  (arg1)->setImageType(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_setNumChannels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_setNumChannels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_setNumChannels" "', argument " "1"" of type '" "ofPixels_< float > *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFloatPixels_setNumChannels" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setNumChannels(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFloatPixels_size(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFloatPixels_size.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFloatPixels_size" "', argument " "1"" of type '" "ofPixels_< float > const *""'"); 
  }
  arg1 = (ofPixels_< float > *)(argp1);
  result = (int)((ofPixels_< float > const *)arg1)->size();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortPixels__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPixels_< unsigned short > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortPixels__SWIG_0.");  
  result = (ofPixels_< unsigned short > *)new ofPixels_< unsigned short >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofPixels_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofShortPixels(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofShortPixels(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofPixels_< unsigned short > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofShortPixels__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPixels_< unsigned short > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofPixels_< unsigned short > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShortPixels__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofShortPixels" "', argument " "1"" of type '" "ofPixels_< unsigned short > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofShortPixels" "', argument " "1"" of type '" "ofPixels_< unsigned short > const &""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (ofPixels_< unsigned short > *)new ofPixels_< unsigned short >((ofPixels_< unsigned short > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofPixels_T_unsigned_short_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofShortPixels(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofShortPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofPixels_T_unsigned_short_t");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_allocate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_allocate" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_allocate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_allocate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofPixelFormat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_allocate" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_allocate" "', argument " "4"" of type '" "ofPixelFormat""'");
  } 
  arg4 = (ofPixelFormat)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_allocate__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofImageType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_allocate" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_allocate" "', argument " "4"" of type '" "ofImageType""'");
  } 
  arg4 = (ofImageType)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_allocate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_allocate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_allocate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_allocate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function allocate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_set" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = (unsigned short)(val2);
  (arg1)->set(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  unsigned short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_set" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_set" "', argument " "3"" of type '" "unsigned short""'");
  } 
  arg3 = (unsigned short)(val3);
  (arg1)->set(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_setFromPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_setFromPixels" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_setFromPixels" "', argument " "2"" of type '" "unsigned short const *""'"); 
  }
  arg2 = (unsigned short *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortPixels_setFromPixels" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setFromPixels((unsigned short const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_setFromPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ;
  int arg4 ;
  ofImageType arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_setFromPixels" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_setFromPixels" "', argument " "2"" of type '" "unsigned short const *""'"); 
  }
  arg2 = (unsigned short *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_setFromPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_setFromPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortPixels_setFromPixels" "', argument " "5"" of type '" "ofImageType""'");
  } 
  arg5 = (ofImageType)(val5);
  (arg1)->setFromPixels((unsigned short const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_setFromPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_setFromPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_setFromPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setFromPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_setFromExternalPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_setFromExternalPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_setFromExternalPixels" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_setFromExternalPixels" "', argument " "2"" of type '" "unsigned short *""'"); 
  }
  arg2 = (unsigned short *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_setFromExternalPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_setFromExternalPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortPixels_setFromExternalPixels" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_setFromAlignedPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_setFromAlignedPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_setFromAlignedPixels" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_setFromAlignedPixels" "', argument " "2"" of type '" "unsigned short const *""'"); 
  }
  arg2 = (unsigned short *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_setFromAlignedPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_setFromAlignedPixels" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortPixels_setFromAlignedPixels" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShortPixels_setFromAlignedPixels" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->setFromAlignedPixels((unsigned short const *)arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_swap(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofPixels_< unsigned short > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_swap.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_swap" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_swap" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortPixels_swap" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  arg2 = (ofPixels_< unsigned short > *)(argp2);
  (arg1)->swap(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_crop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_crop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_crop" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_crop" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_crop" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_crop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortPixels_crop" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->crop(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_cropTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofPixels_< unsigned short > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_cropTo.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_cropTo" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_cropTo" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortPixels_cropTo" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  arg2 = (ofPixels_< unsigned short > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_cropTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_cropTo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShortPixels_cropTo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShortPixels_cropTo" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->cropTo(*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_rotate90(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_rotate90.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_rotate90" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_rotate90" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->rotate90(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_rotate90To(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofPixels_< unsigned short > *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_rotate90To.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_rotate90To" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_rotate90To" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortPixels_rotate90To" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  arg2 = (ofPixels_< unsigned short > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_rotate90To" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->rotate90To(*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_mirrorTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofPixels_< unsigned short > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_mirrorTo.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_mirrorTo" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_mirrorTo" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortPixels_mirrorTo" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  arg2 = (ofPixels_< unsigned short > *)(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_mirrorTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_mirrorTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  (arg1)->mirrorTo(*arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_mirror(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_mirror.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_mirror" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_mirror" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_mirror" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->mirror(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_resize__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofInterpolationMethod arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_resize" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_resize" "', argument " "4"" of type '" "ofInterpolationMethod""'");
  } 
  arg4 = (ofInterpolationMethod)(val4);
  result = (bool)(arg1)->resize(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_resize__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_resize" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)(arg1)->resize(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_resize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_resize__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_resize__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function resize.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_resizeTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofPixels_< unsigned short > *arg2 = 0 ;
  ofInterpolationMethod arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_resizeTo" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  arg2 = (ofPixels_< unsigned short > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_resizeTo" "', argument " "3"" of type '" "ofInterpolationMethod""'");
  } 
  arg3 = (ofInterpolationMethod)(val3);
  result = (bool)(arg1)->resizeTo(*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_resizeTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofPixels_< unsigned short > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_resizeTo" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortPixels_resizeTo" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  arg2 = (ofPixels_< unsigned short > *)(argp2);
  result = (bool)(arg1)->resizeTo(*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_resizeTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_resizeTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_resizeTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function resizeTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_pasteInto(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofPixels_< unsigned short > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_pasteInto.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_pasteInto" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShortPixels_pasteInto" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortPixels_pasteInto" "', argument " "2"" of type '" "ofPixels_< unsigned short > &""'"); 
  }
  arg2 = (ofPixels_< unsigned short > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_pasteInto" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShortPixels_pasteInto" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (bool)(arg1)->pasteInto(*arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_swapRgb(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_swapRgb.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_swapRgb" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  (arg1)->swapRgb();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_clear" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getPixels" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (unsigned short *)(arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getPixels" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (unsigned short *)((ofPixels_< unsigned short > const *)arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_getPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShortPixels_getPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getPixelIndex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getPixelIndex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getPixelIndex" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_getPixelIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_getPixelIndex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getPixelIndex(arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofColor_< unsigned short > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getColor" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_getColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_getColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = ((ofPixels_< unsigned short > const *)arg1)->getColor(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofColor_< unsigned short >((const ofColor_< unsigned short >&)(result))), SWIGTYPE_p_ofColor_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_setColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  int arg3 ;
  ofColor_< unsigned short > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_setColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_setColor" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_setColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShortPixels_setColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofColor_T_unsigned_short_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofShortPixels_setColor" "', argument " "4"" of type '" "ofColor_< unsigned short >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortPixels_setColor" "', argument " "4"" of type '" "ofColor_< unsigned short >""'");
    } else {
      arg4 = *((ofColor_< unsigned short > *)(argp4));
    }
  }
  (arg1)->setColor(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_isAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_isAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_isAllocated" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (bool)((ofPixels_< unsigned short > const *)arg1)->isAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getWidth" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getWidth();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getHeight" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getHeight();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getBytesPerPixel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getBytesPerPixel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getBytesPerPixel" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getBytesPerPixel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getBitsPerPixel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getBitsPerPixel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getBitsPerPixel" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getBitsPerPixel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getBytesPerChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getBytesPerChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getBytesPerChannel" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getBytesPerChannel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getBitsPerChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getBitsPerChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getBitsPerChannel" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getBitsPerChannel();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getNumChannels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getNumChannels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getNumChannels" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getNumChannels();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ofPixels_< unsigned short > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getChannel" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_getChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((ofPixels_< unsigned short > const *)arg1)->getChannel(arg2);
  jsresult = SWIG_NewPointerObj((new ofPixels_< unsigned short >((const ofPixels_< unsigned short >&)(result))), SWIGTYPE_p_ofPixels_T_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_setChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  ofPixels_< unsigned short > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_setChannel.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_setChannel" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_setChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShortPixels_setChannel" "', argument " "3"" of type '" "ofPixels_< unsigned short > const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShortPixels_setChannel" "', argument " "3"" of type '" "ofPixels_< unsigned short > const""'");
    } else {
      arg3 = *((ofPixels_< unsigned short > *)(argp3));
    }
  }
  (arg1)->setChannel(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_getImageType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofImageType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_getImageType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_getImageType" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (ofImageType)((ofPixels_< unsigned short > const *)arg1)->getImageType();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_setImageType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofImageType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_setImageType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_setImageType" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_setImageType" "', argument " "2"" of type '" "ofImageType""'");
  } 
  arg2 = (ofImageType)(val2);
  (arg1)->setImageType(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_setNumChannels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_setNumChannels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_setNumChannels" "', argument " "1"" of type '" "ofPixels_< unsigned short > *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShortPixels_setNumChannels" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setNumChannels(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShortPixels_size(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShortPixels_size.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShortPixels_size" "', argument " "1"" of type '" "ofPixels_< unsigned short > const *""'"); 
  }
  arg1 = (ofPixels_< unsigned short > *)(argp1);
  result = (int)((ofPixels_< unsigned short > const *)arg1)->size();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetMousePressed__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  bool result;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofGetMousePressed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (bool)ofGetMousePressed(arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofGetMousePressed__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  result = (bool)ofGetMousePressed();
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofGetMousePressed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofGetMousePressed__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofGetMousePressed__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofGetMousePressed.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetKeyPressed__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  bool result;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofGetKeyPressed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (bool)ofGetKeyPressed(arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofGetKeyPressed__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  result = (bool)ofGetKeyPressed();
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofGetKeyPressed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofGetKeyPressed__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofGetKeyPressed__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofGetKeyPressed.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetMouseX(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetMouseX.");  
  
  result = (int)ofGetMouseX();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetMouseY(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetMouseY.");  
  
  result = (int)ofGetMouseY();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetPreviousMouseX(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetPreviousMouseX.");  
  
  result = (int)ofGetPreviousMouseX();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetPreviousMouseY(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetPreviousMouseY.");  
  
  result = (int)ofGetPreviousMouseY();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetEscapeQuitsApp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetEscapeQuitsApp.");  
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetEscapeQuitsApp" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  ofSetEscapeQuitsApp(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofDragInfo_files_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofDragInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDragInfo_files_set" "', argument " "1"" of type '" "ofDragInfo *""'"); 
  }
  arg1 = (ofDragInfo *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofDragInfo_files_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = (std::vector< std::string > *)(argp2);
  if (arg1) (arg1)->files = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofDragInfo_files_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofDragInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDragInfo_files_get" "', argument " "1"" of type '" "ofDragInfo *""'"); 
  }
  arg1 = (ofDragInfo *)(argp1);
  result = (std::vector< std::string > *)& ((arg1)->files);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofDragInfo_position_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofDragInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDragInfo_position_set" "', argument " "1"" of type '" "ofDragInfo *""'"); 
  }
  arg1 = (ofDragInfo *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofDragInfo_position_set" "', argument " "2"" of type '" "ofPoint *""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  if (arg1) (arg1)->position = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofDragInfo_position_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofDragInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDragInfo_position_get" "', argument " "1"" of type '" "ofDragInfo *""'"); 
  }
  arg1 = (ofDragInfo *)(argp1);
  result = (ofPoint *)& ((arg1)->position);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofDragInfo(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofDragInfo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofDragInfo.");  
  result = (ofDragInfo *)new ofDragInfo();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofDragInfo, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofDragInfo(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofDragInfo(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofDragInfo *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofEventArgs(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofEventArgs *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofEventArgs.");  
  result = (ofEventArgs *)new ofEventArgs();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofEventArgs, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofEventArgs(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofEventArgs(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofEventArgs *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofEntryEventArgs_state_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofEntryEventArgs *arg1 = (ofEntryEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofEntryEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEntryEventArgs_state_set" "', argument " "1"" of type '" "ofEntryEventArgs *""'"); 
  }
  arg1 = (ofEntryEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofEntryEventArgs_state_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->state = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofEntryEventArgs_state_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEntryEventArgs *arg1 = (ofEntryEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofEntryEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEntryEventArgs_state_get" "', argument " "1"" of type '" "ofEntryEventArgs *""'"); 
  }
  arg1 = (ofEntryEventArgs *)(argp1);
  result = (int) ((arg1)->state);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofEntryEventArgs(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofEntryEventArgs *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofEntryEventArgs.");  
  result = (ofEntryEventArgs *)new ofEntryEventArgs();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofEntryEventArgs, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofEntryEventArgs(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofEntryEventArgs(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofEntryEventArgs *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofKeyEventArgs_key_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofKeyEventArgs *arg1 = (ofKeyEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofKeyEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofKeyEventArgs_key_set" "', argument " "1"" of type '" "ofKeyEventArgs *""'"); 
  }
  arg1 = (ofKeyEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofKeyEventArgs_key_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->key = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofKeyEventArgs_key_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofKeyEventArgs *arg1 = (ofKeyEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofKeyEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofKeyEventArgs_key_get" "', argument " "1"" of type '" "ofKeyEventArgs *""'"); 
  }
  arg1 = (ofKeyEventArgs *)(argp1);
  result = (int) ((arg1)->key);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofKeyEventArgs(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofKeyEventArgs *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofKeyEventArgs.");  
  result = (ofKeyEventArgs *)new ofKeyEventArgs();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofKeyEventArgs, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofKeyEventArgs(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofKeyEventArgs(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofKeyEventArgs *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofMouseEventArgs_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMouseEventArgs *arg1 = (ofMouseEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMouseEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMouseEventArgs_x_set" "', argument " "1"" of type '" "ofMouseEventArgs *""'"); 
  }
  arg1 = (ofMouseEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMouseEventArgs_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->x = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMouseEventArgs_x_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMouseEventArgs *arg1 = (ofMouseEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMouseEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMouseEventArgs_x_get" "', argument " "1"" of type '" "ofMouseEventArgs *""'"); 
  }
  arg1 = (ofMouseEventArgs *)(argp1);
  result = (int) ((arg1)->x);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMouseEventArgs_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMouseEventArgs *arg1 = (ofMouseEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMouseEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMouseEventArgs_y_set" "', argument " "1"" of type '" "ofMouseEventArgs *""'"); 
  }
  arg1 = (ofMouseEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMouseEventArgs_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->y = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMouseEventArgs_y_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMouseEventArgs *arg1 = (ofMouseEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMouseEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMouseEventArgs_y_get" "', argument " "1"" of type '" "ofMouseEventArgs *""'"); 
  }
  arg1 = (ofMouseEventArgs *)(argp1);
  result = (int) ((arg1)->y);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMouseEventArgs_button_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMouseEventArgs *arg1 = (ofMouseEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMouseEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMouseEventArgs_button_set" "', argument " "1"" of type '" "ofMouseEventArgs *""'"); 
  }
  arg1 = (ofMouseEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMouseEventArgs_button_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->button = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMouseEventArgs_button_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMouseEventArgs *arg1 = (ofMouseEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMouseEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMouseEventArgs_button_get" "', argument " "1"" of type '" "ofMouseEventArgs *""'"); 
  }
  arg1 = (ofMouseEventArgs *)(argp1);
  result = (int) ((arg1)->button);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMouseEventArgs(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofMouseEventArgs *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMouseEventArgs.");  
  result = (ofMouseEventArgs *)new ofMouseEventArgs();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMouseEventArgs, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofMouseEventArgs(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofMouseEventArgs(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofMouseEventArgs *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_down(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofTouchEventArgs::down));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_up(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofTouchEventArgs::up));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_move(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofTouchEventArgs::move));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_doubleTap(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofTouchEventArgs::doubleTap));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_cancel(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofTouchEventArgs::cancel));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  enum ofTouchEventArgs::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_type_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_type_set" "', argument " "2"" of type '" "enum ofTouchEventArgs::Type""'");
  } 
  arg2 = (enum ofTouchEventArgs::Type)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_type_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  enum ofTouchEventArgs::Type result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_type_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (enum ofTouchEventArgs::Type) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_id_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_id_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->id = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_id_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_id_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (int) ((arg1)->id);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_time_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_time_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_time_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->time = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_time_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_time_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (int) ((arg1)->time);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_x_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_x_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->x = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_x_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_x_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->x);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_y_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_y_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->y = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_y_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_y_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->y);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_numTouches_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_numTouches_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_numTouches_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->numTouches = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_numTouches_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_numTouches_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (int) ((arg1)->numTouches);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_width_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_width_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_width_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->width);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_height_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_height_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_height_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->height);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_angle_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_angle_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_angle_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->angle = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_angle_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_angle_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->angle);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_minoraxis_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_minoraxis_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_minoraxis_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->minoraxis = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_minoraxis_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_minoraxis_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->minoraxis);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_majoraxis_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_majoraxis_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_majoraxis_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->majoraxis = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_majoraxis_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_majoraxis_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->majoraxis);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_pressure_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_pressure_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_pressure_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->pressure = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_pressure_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_pressure_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->pressure);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_xspeed_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_xspeed_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_xspeed_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->xspeed = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_xspeed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_xspeed_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->xspeed);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_yspeed_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_yspeed_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_yspeed_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->yspeed = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_yspeed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_yspeed_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->yspeed);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_xaccel_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_xaccel_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_xaccel_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->xaccel = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_xaccel_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_xaccel_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->xaccel);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTouchEventArgs_yaccel_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_yaccel_set" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTouchEventArgs_yaccel_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->yaccel = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTouchEventArgs_yaccel_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTouchEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTouchEventArgs_yaccel_get" "', argument " "1"" of type '" "ofTouchEventArgs *""'"); 
  }
  arg1 = (ofTouchEventArgs *)(argp1);
  result = (float) ((arg1)->yaccel);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofTouchEventArgs(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofTouchEventArgs *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofTouchEventArgs.");  
  result = (ofTouchEventArgs *)new ofTouchEventArgs();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofTouchEventArgs, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofTouchEventArgs(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofTouchEventArgs(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofTouchEventArgs *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofAudioEventArgs_buffer_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofAudioEventArgs *arg1 = (ofAudioEventArgs *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofAudioEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofAudioEventArgs_buffer_set" "', argument " "1"" of type '" "ofAudioEventArgs *""'"); 
  }
  arg1 = (ofAudioEventArgs *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_float, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofAudioEventArgs_buffer_set" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = (float *)(argp2);
  if (arg1) (arg1)->buffer = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofAudioEventArgs_buffer_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofAudioEventArgs *arg1 = (ofAudioEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofAudioEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofAudioEventArgs_buffer_get" "', argument " "1"" of type '" "ofAudioEventArgs *""'"); 
  }
  arg1 = (ofAudioEventArgs *)(argp1);
  result = (float *) ((arg1)->buffer);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofAudioEventArgs_bufferSize_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofAudioEventArgs *arg1 = (ofAudioEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofAudioEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofAudioEventArgs_bufferSize_set" "', argument " "1"" of type '" "ofAudioEventArgs *""'"); 
  }
  arg1 = (ofAudioEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofAudioEventArgs_bufferSize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->bufferSize = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofAudioEventArgs_bufferSize_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofAudioEventArgs *arg1 = (ofAudioEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofAudioEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofAudioEventArgs_bufferSize_get" "', argument " "1"" of type '" "ofAudioEventArgs *""'"); 
  }
  arg1 = (ofAudioEventArgs *)(argp1);
  result = (int) ((arg1)->bufferSize);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofAudioEventArgs_nChannels_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofAudioEventArgs *arg1 = (ofAudioEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofAudioEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofAudioEventArgs_nChannels_set" "', argument " "1"" of type '" "ofAudioEventArgs *""'"); 
  }
  arg1 = (ofAudioEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofAudioEventArgs_nChannels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->nChannels = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofAudioEventArgs_nChannels_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofAudioEventArgs *arg1 = (ofAudioEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofAudioEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofAudioEventArgs_nChannels_get" "', argument " "1"" of type '" "ofAudioEventArgs *""'"); 
  }
  arg1 = (ofAudioEventArgs *)(argp1);
  result = (int) ((arg1)->nChannels);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofAudioEventArgs(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofAudioEventArgs *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofAudioEventArgs.");  
  result = (ofAudioEventArgs *)new ofAudioEventArgs();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofAudioEventArgs, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofAudioEventArgs(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofAudioEventArgs(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofAudioEventArgs *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofResizeEventArgs_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofResizeEventArgs *arg1 = (ofResizeEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofResizeEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofResizeEventArgs_width_set" "', argument " "1"" of type '" "ofResizeEventArgs *""'"); 
  }
  arg1 = (ofResizeEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofResizeEventArgs_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofResizeEventArgs_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofResizeEventArgs *arg1 = (ofResizeEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofResizeEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofResizeEventArgs_width_get" "', argument " "1"" of type '" "ofResizeEventArgs *""'"); 
  }
  arg1 = (ofResizeEventArgs *)(argp1);
  result = (int) ((arg1)->width);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofResizeEventArgs_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofResizeEventArgs *arg1 = (ofResizeEventArgs *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofResizeEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofResizeEventArgs_height_set" "', argument " "1"" of type '" "ofResizeEventArgs *""'"); 
  }
  arg1 = (ofResizeEventArgs *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofResizeEventArgs_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofResizeEventArgs_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofResizeEventArgs *arg1 = (ofResizeEventArgs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofResizeEventArgs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofResizeEventArgs_height_get" "', argument " "1"" of type '" "ofResizeEventArgs *""'"); 
  }
  arg1 = (ofResizeEventArgs *)(argp1);
  result = (int) ((arg1)->height);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofResizeEventArgs(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofResizeEventArgs *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofResizeEventArgs.");  
  result = (ofResizeEventArgs *)new ofResizeEventArgs();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofResizeEventArgs, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofResizeEventArgs(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofResizeEventArgs(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofResizeEventArgs *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofMessage(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  std::string *tmp1 ;
  ofMessage *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMessage.");  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = (ofMessage *)new ofMessage(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMessage, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMessage_message_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMessage *arg1 = (ofMessage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMessage_message_set" "', argument " "1"" of type '" "ofMessage *""'"); 
  }
  arg1 = (ofMessage *)(argp1);
  
  arg2 = SWIGV8_valueToStringPtr(value);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  if (arg1) (arg1)->message = *arg2;
  
  
  if (arg2) delete arg2;
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMessage_message_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMessage *arg1 = (ofMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMessage_message_get" "', argument " "1"" of type '" "ofMessage *""'"); 
  }
  arg1 = (ofMessage *)(argp1);
  result = (std::string *) & ((arg1)->message);
  
  jsresult = SWIGV8_stringToValue(*result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofMessage(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofMessage(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofMessage *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofCoreEvents_setup_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofEventArgs > *arg2 = (ofEvent< ofEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_setup_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_setup_set" "', argument " "2"" of type '" "ofEvent< ofEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofEventArgs > *)(argp2);
  if (arg1) (arg1)->setup = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_setup_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_setup_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofEventArgs > *)& ((arg1)->setup);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_update_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofEventArgs > *arg2 = (ofEvent< ofEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_update_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_update_set" "', argument " "2"" of type '" "ofEvent< ofEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofEventArgs > *)(argp2);
  if (arg1) (arg1)->update = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_update_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_update_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofEventArgs > *)& ((arg1)->update);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_draw_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofEventArgs > *arg2 = (ofEvent< ofEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_draw_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_draw_set" "', argument " "2"" of type '" "ofEvent< ofEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofEventArgs > *)(argp2);
  if (arg1) (arg1)->draw = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_draw_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_draw_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofEventArgs > *)& ((arg1)->draw);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_exit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofEventArgs > *arg2 = (ofEvent< ofEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_exit_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_exit_set" "', argument " "2"" of type '" "ofEvent< ofEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofEventArgs > *)(argp2);
  if (arg1) (arg1)->exit = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_exit_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_exit_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofEventArgs > *)& ((arg1)->exit);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_windowEntered_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofEntryEventArgs > *arg2 = (ofEvent< ofEntryEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_windowEntered_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofEntryEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_windowEntered_set" "', argument " "2"" of type '" "ofEvent< ofEntryEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofEntryEventArgs > *)(argp2);
  if (arg1) (arg1)->windowEntered = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_windowEntered_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofEntryEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_windowEntered_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofEntryEventArgs > *)& ((arg1)->windowEntered);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofEntryEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_windowResized_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofResizeEventArgs > *arg2 = (ofEvent< ofResizeEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_windowResized_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofResizeEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_windowResized_set" "', argument " "2"" of type '" "ofEvent< ofResizeEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofResizeEventArgs > *)(argp2);
  if (arg1) (arg1)->windowResized = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_windowResized_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofResizeEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_windowResized_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofResizeEventArgs > *)& ((arg1)->windowResized);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofResizeEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_keyPressed_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofKeyEventArgs > *arg2 = (ofEvent< ofKeyEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_keyPressed_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofKeyEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_keyPressed_set" "', argument " "2"" of type '" "ofEvent< ofKeyEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofKeyEventArgs > *)(argp2);
  if (arg1) (arg1)->keyPressed = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_keyPressed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofKeyEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_keyPressed_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofKeyEventArgs > *)& ((arg1)->keyPressed);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofKeyEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_keyReleased_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofKeyEventArgs > *arg2 = (ofEvent< ofKeyEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_keyReleased_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofKeyEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_keyReleased_set" "', argument " "2"" of type '" "ofEvent< ofKeyEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofKeyEventArgs > *)(argp2);
  if (arg1) (arg1)->keyReleased = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_keyReleased_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofKeyEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_keyReleased_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofKeyEventArgs > *)& ((arg1)->keyReleased);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofKeyEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_mouseMoved_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofMouseEventArgs > *arg2 = (ofEvent< ofMouseEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_mouseMoved_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofMouseEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_mouseMoved_set" "', argument " "2"" of type '" "ofEvent< ofMouseEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofMouseEventArgs > *)(argp2);
  if (arg1) (arg1)->mouseMoved = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_mouseMoved_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofMouseEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_mouseMoved_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofMouseEventArgs > *)& ((arg1)->mouseMoved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofMouseEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_mouseDragged_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofMouseEventArgs > *arg2 = (ofEvent< ofMouseEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_mouseDragged_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofMouseEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_mouseDragged_set" "', argument " "2"" of type '" "ofEvent< ofMouseEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofMouseEventArgs > *)(argp2);
  if (arg1) (arg1)->mouseDragged = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_mouseDragged_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofMouseEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_mouseDragged_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofMouseEventArgs > *)& ((arg1)->mouseDragged);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofMouseEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_mousePressed_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofMouseEventArgs > *arg2 = (ofEvent< ofMouseEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_mousePressed_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofMouseEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_mousePressed_set" "', argument " "2"" of type '" "ofEvent< ofMouseEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofMouseEventArgs > *)(argp2);
  if (arg1) (arg1)->mousePressed = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_mousePressed_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofMouseEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_mousePressed_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofMouseEventArgs > *)& ((arg1)->mousePressed);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofMouseEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_mouseReleased_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofMouseEventArgs > *arg2 = (ofEvent< ofMouseEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_mouseReleased_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofMouseEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_mouseReleased_set" "', argument " "2"" of type '" "ofEvent< ofMouseEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofMouseEventArgs > *)(argp2);
  if (arg1) (arg1)->mouseReleased = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_mouseReleased_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofMouseEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_mouseReleased_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofMouseEventArgs > *)& ((arg1)->mouseReleased);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofMouseEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_audioReceived_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofAudioEventArgs > *arg2 = (ofEvent< ofAudioEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_audioReceived_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofAudioEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_audioReceived_set" "', argument " "2"" of type '" "ofEvent< ofAudioEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofAudioEventArgs > *)(argp2);
  if (arg1) (arg1)->audioReceived = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_audioReceived_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofAudioEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_audioReceived_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofAudioEventArgs > *)& ((arg1)->audioReceived);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofAudioEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_audioRequested_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofAudioEventArgs > *arg2 = (ofEvent< ofAudioEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_audioRequested_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofAudioEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_audioRequested_set" "', argument " "2"" of type '" "ofEvent< ofAudioEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofAudioEventArgs > *)(argp2);
  if (arg1) (arg1)->audioRequested = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_audioRequested_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofAudioEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_audioRequested_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofAudioEventArgs > *)& ((arg1)->audioRequested);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofAudioEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_touchDown_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofTouchEventArgs > *arg2 = (ofEvent< ofTouchEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchDown_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_touchDown_set" "', argument " "2"" of type '" "ofEvent< ofTouchEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofTouchEventArgs > *)(argp2);
  if (arg1) (arg1)->touchDown = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_touchDown_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofTouchEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchDown_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofTouchEventArgs > *)& ((arg1)->touchDown);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_touchUp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofTouchEventArgs > *arg2 = (ofEvent< ofTouchEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchUp_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_touchUp_set" "', argument " "2"" of type '" "ofEvent< ofTouchEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofTouchEventArgs > *)(argp2);
  if (arg1) (arg1)->touchUp = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_touchUp_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofTouchEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchUp_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofTouchEventArgs > *)& ((arg1)->touchUp);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_touchMoved_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofTouchEventArgs > *arg2 = (ofEvent< ofTouchEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchMoved_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_touchMoved_set" "', argument " "2"" of type '" "ofEvent< ofTouchEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofTouchEventArgs > *)(argp2);
  if (arg1) (arg1)->touchMoved = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_touchMoved_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofTouchEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchMoved_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofTouchEventArgs > *)& ((arg1)->touchMoved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_touchDoubleTap_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofTouchEventArgs > *arg2 = (ofEvent< ofTouchEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchDoubleTap_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_touchDoubleTap_set" "', argument " "2"" of type '" "ofEvent< ofTouchEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofTouchEventArgs > *)(argp2);
  if (arg1) (arg1)->touchDoubleTap = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_touchDoubleTap_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofTouchEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchDoubleTap_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofTouchEventArgs > *)& ((arg1)->touchDoubleTap);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_touchCancelled_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofTouchEventArgs > *arg2 = (ofEvent< ofTouchEventArgs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchCancelled_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_touchCancelled_set" "', argument " "2"" of type '" "ofEvent< ofTouchEventArgs > *""'"); 
  }
  arg2 = (ofEvent< ofTouchEventArgs > *)(argp2);
  if (arg1) (arg1)->touchCancelled = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_touchCancelled_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofTouchEventArgs > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_touchCancelled_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofTouchEventArgs > *)& ((arg1)->touchCancelled);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofTouchEventArgs_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_messageEvent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofMessage > *arg2 = (ofEvent< ofMessage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_messageEvent_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofMessage_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_messageEvent_set" "', argument " "2"" of type '" "ofEvent< ofMessage > *""'"); 
  }
  arg2 = (ofEvent< ofMessage > *)(argp2);
  if (arg1) (arg1)->messageEvent = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_messageEvent_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofMessage > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_messageEvent_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofMessage > *)& ((arg1)->messageEvent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofMessage_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofCoreEvents_fileDragEvent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  ofEvent< ofDragInfo > *arg2 = (ofEvent< ofDragInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_fileDragEvent_set" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofEventT_ofDragInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCoreEvents_fileDragEvent_set" "', argument " "2"" of type '" "ofEvent< ofDragInfo > *""'"); 
  }
  arg2 = (ofEvent< ofDragInfo > *)(argp2);
  if (arg1) (arg1)->fileDragEvent = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_fileDragEvent_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofEvent< ofDragInfo > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_fileDragEvent_get" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  result = (ofEvent< ofDragInfo > *)& ((arg1)->fileDragEvent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofEventT_ofDragInfo_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_disable(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCoreEvents_disable.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_disable" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  (arg1)->disable();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCoreEvents_enable(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *arg1 = (ofCoreEvents *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCoreEvents_enable.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCoreEvents_enable" "', argument " "1"" of type '" "ofCoreEvents *""'"); 
  }
  arg1 = (ofCoreEvents *)(argp1);
  (arg1)->enable();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofCoreEvents(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofCoreEvents *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofCoreEvents.");  
  result = (ofCoreEvents *)new ofCoreEvents();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofCoreEvents, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofCoreEvents(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofCoreEvents(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofCoreEvents *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofSendMessage__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< ofMessage > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofMessage,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSendMessage" "', argument " "1"" of type '" "ofMessage""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSendMessage" "', argument " "1"" of type '" "ofMessage""'");
    } else {
      arg1 = *((ofMessage *)(argp1));
    }
  }
  ofSendMessage(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSendMessage__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ofSendMessage(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSendMessage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSendMessage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSendMessage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSendMessage.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEvents(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCoreEvents *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEvents.");  
  
  result = (ofCoreEvents *) &ofEvents();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofCoreEvents, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifySetup(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifySetup.");  
  
  ofNotifySetup();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyUpdate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyUpdate.");  
  
  ofNotifyUpdate();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyDraw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyDraw.");  
  
  ofNotifyDraw();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyKeyPressed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyKeyPressed.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNotifyKeyPressed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofNotifyKeyPressed(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyKeyReleased(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyKeyReleased.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNotifyKeyReleased" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofNotifyKeyReleased(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyMousePressed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyMousePressed.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNotifyMousePressed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNotifyMousePressed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNotifyMousePressed" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ofNotifyMousePressed(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyMouseReleased(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyMouseReleased.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNotifyMouseReleased" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNotifyMouseReleased" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNotifyMouseReleased" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ofNotifyMouseReleased(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyMouseDragged(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyMouseDragged.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNotifyMouseDragged" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNotifyMouseDragged" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNotifyMouseDragged" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ofNotifyMouseDragged(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyMouseMoved(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyMouseMoved.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNotifyMouseMoved" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNotifyMouseMoved" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ofNotifyMouseMoved(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyExit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyExit.");  
  
  ofNotifyExit();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyWindowResized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyWindowResized.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNotifyWindowResized" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNotifyWindowResized" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ofNotifyWindowResized(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyWindowEntry(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyWindowEntry.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNotifyWindowEntry" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofNotifyWindowEntry(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNotifyDragEvent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDragInfo arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNotifyDragEvent.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofDragInfo,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNotifyDragEvent" "', argument " "1"" of type '" "ofDragInfo""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNotifyDragEvent" "', argument " "1"" of type '" "ofDragInfo""'");
    } else {
      arg1 = *((ofDragInfo *)(argp1));
    }
  }
  ofNotifyDragEvent(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofNode(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofNode *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofNode.");  
  result = (ofNode *)new ofNode();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofNode, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofNode(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofNode(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofNode *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofNode_setParent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_setParent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setParent" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_setParent" "', argument " "2"" of type '" "ofNode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_setParent" "', argument " "2"" of type '" "ofNode &""'"); 
  }
  arg2 = (ofNode *)(argp2);
  (arg1)->setParent(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_clearParent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_clearParent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_clearParent" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  (arg1)->clearParent();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getParent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofNode *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getParent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getParent" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = (ofNode *)((ofNode const *)arg1)->getParent();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofNode, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getPosition.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getPosition" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getPosition();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getX(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getX.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getX" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = (float)((ofNode const *)arg1)->getX();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getY(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getY.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getY" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = (float)((ofNode const *)arg1)->getY();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getZ(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getZ.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getZ" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = (float)((ofNode const *)arg1)->getZ();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getXAxis(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getXAxis.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getXAxis" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getXAxis();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getYAxis(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getYAxis.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getYAxis" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getYAxis();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getZAxis(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getZAxis.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getZAxis" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getZAxis();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getSideDir(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getSideDir.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getSideDir" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getSideDir();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getLookAtDir(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getLookAtDir.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getLookAtDir" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getLookAtDir();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getUpDir(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getUpDir.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getUpDir" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getUpDir();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getPitch(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getPitch.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getPitch" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = (float)((ofNode const *)arg1)->getPitch();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getHeading(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getHeading.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getHeading" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = (float)((ofNode const *)arg1)->getHeading();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getRoll(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getRoll.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getRoll" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = (float)((ofNode const *)arg1)->getRoll();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getOrientationQuat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofQuaternion result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getOrientationQuat.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getOrientationQuat" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getOrientationQuat();
  jsresult = SWIG_NewPointerObj((new ofQuaternion((const ofQuaternion&)(result))), SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getOrientationEuler(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getOrientationEuler.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getOrientationEuler" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getOrientationEuler();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getScale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getScale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getScale" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getScale();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getLocalTransformMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofMatrix4x4 *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getLocalTransformMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getLocalTransformMatrix" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = (ofMatrix4x4 *) &((ofNode const *)arg1)->getLocalTransformMatrix();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getGlobalTransformMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getGlobalTransformMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getGlobalTransformMatrix" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getGlobalTransformMatrix();
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getGlobalPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getGlobalPosition.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getGlobalPosition" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getGlobalPosition();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getGlobalOrientation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofQuaternion result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getGlobalOrientation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getGlobalOrientation" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getGlobalOrientation();
  jsresult = SWIG_NewPointerObj((new ofQuaternion((const ofQuaternion&)(result))), SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_getGlobalScale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_getGlobalScale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_getGlobalScale" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  result = ((ofNode const *)arg1)->getGlobalScale();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_setTransformMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_setTransformMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setTransformMatrix" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_setTransformMatrix" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_setTransformMatrix" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  (arg1)->setTransformMatrix((ofMatrix4x4 const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_setPosition__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setPosition" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_setPosition" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNode_setPosition" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofNode_setPosition" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setPosition(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_setPosition__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setPosition" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_setPosition" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_setPosition" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->setPosition((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_setPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_setPosition__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_setPosition__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setPosition.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_setGlobalPosition__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setGlobalPosition" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_setGlobalPosition" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNode_setGlobalPosition" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofNode_setGlobalPosition" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setGlobalPosition(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_setGlobalPosition__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setGlobalPosition" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_setGlobalPosition" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_setGlobalPosition" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->setGlobalPosition((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_setGlobalPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_setGlobalPosition__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_setGlobalPosition__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setGlobalPosition.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_setOrientation__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setOrientation" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_setOrientation" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_setOrientation" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  (arg1)->setOrientation((ofQuaternion const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_setOrientation__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setOrientation" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_setOrientation" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_setOrientation" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->setOrientation((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_setOrientation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_setOrientation__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_setOrientation__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setOrientation.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_setGlobalOrientation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_setGlobalOrientation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setGlobalOrientation" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_setGlobalOrientation" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_setGlobalOrientation" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  (arg1)->setGlobalOrientation((ofQuaternion const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_setScale__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setScale" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_setScale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setScale(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_setScale__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setScale" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_setScale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNode_setScale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofNode_setScale" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setScale(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_setScale__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_setScale" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_setScale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_setScale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->setScale((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_setScale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_setScale__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_setScale__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_setScale__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setScale.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_move__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_move" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_move" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNode_move" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofNode_move" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->move(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_move__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_move" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_move" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_move" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->move((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_move(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_move__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_move__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function move.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_truck(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_truck.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_truck" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_truck" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->truck(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_boom(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_boom.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_boom" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_boom" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->boom(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_dolly(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_dolly.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_dolly" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_dolly" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->dolly(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_tilt(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_tilt.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_tilt" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_tilt" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->tilt(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_pan(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_pan.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_pan" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_pan" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->pan(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_roll(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_roll.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_roll" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_roll" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->roll(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_rotate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_rotate" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_rotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_rotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  (arg1)->rotate((ofQuaternion const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_rotate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_rotate" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofNode_rotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_rotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->rotate(arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_rotate__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_rotate" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNode_rotate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofNode_rotate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofNode_rotate" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->rotate(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_rotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_rotate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_rotate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_rotate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rotate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_rotateAround__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_rotateAround" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_rotateAround" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_rotateAround" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofNode_rotateAround" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_rotateAround" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->rotateAround((ofQuaternion const &)*arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_rotateAround__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_rotateAround" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_rotateAround" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofNode_rotateAround" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_rotateAround" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofNode_rotateAround" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_rotateAround" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  (arg1)->rotateAround(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_rotateAround(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_rotateAround__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_rotateAround__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rotateAround.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_lookAt__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_lookAt" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_lookAt" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_lookAt" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofNode_lookAt" "', argument " "3"" of type '" "ofVec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_lookAt" "', argument " "3"" of type '" "ofVec3f""'");
    } else {
      arg3 = *((ofVec3f *)(argp3));
    }
  }
  (arg1)->lookAt((ofVec3f const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_lookAt__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_lookAt" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_lookAt" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_lookAt" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->lookAt((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_lookAt__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofNode *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_lookAt" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_lookAt" "', argument " "2"" of type '" "ofNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_lookAt" "', argument " "2"" of type '" "ofNode const &""'"); 
  }
  arg2 = (ofNode *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofNode_lookAt" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_lookAt" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->lookAt((ofNode const &)*arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_lookAt__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  ofNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_lookAt" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofNode_lookAt" "', argument " "2"" of type '" "ofNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_lookAt" "', argument " "2"" of type '" "ofNode const &""'"); 
  }
  arg2 = (ofNode *)(argp2);
  (arg1)->lookAt((ofNode const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_lookAt(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_lookAt__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_lookAt__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_lookAt__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_lookAt__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function lookAt.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_orbit__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ofVec3f *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_orbit" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_orbit" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNode_orbit" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofNode_orbit" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofNode_orbit" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_orbit" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  arg5 = (ofVec3f *)(argp5);
  (arg1)->orbit(arg2,arg3,arg4,(ofVec3f const &)*arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_orbit__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_orbit" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_orbit" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNode_orbit" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofNode_orbit" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->orbit(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_orbit__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ofNode *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_orbit" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNode_orbit" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNode_orbit" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofNode_orbit" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofNode,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofNode_orbit" "', argument " "5"" of type '" "ofNode &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofNode_orbit" "', argument " "5"" of type '" "ofNode &""'"); 
  }
  arg5 = (ofNode *)(argp5);
  (arg1)->orbit(arg2,arg3,arg4,*arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNode_orbit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_orbit__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_orbit__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNode_orbit__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function orbit.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_transformGL(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_transformGL.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_transformGL" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ((ofNode const *)arg1)->transformGL();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_restoreTransformGL(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_restoreTransformGL.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_restoreTransformGL" "', argument " "1"" of type '" "ofNode const *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  ((ofNode const *)arg1)->restoreTransformGL();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_resetTransform(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_resetTransform.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_resetTransform" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  (arg1)->resetTransform();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_customDraw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_customDraw.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_customDraw" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  (arg1)->customDraw();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNode_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofNode *arg1 = (ofNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNode_draw.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofNode_draw" "', argument " "1"" of type '" "ofNode *""'"); 
  }
  arg1 = (ofNode *)(argp1);
  (arg1)->draw();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDrawAxis(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDrawAxis.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawAxis" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofDrawAxis(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDrawGrid__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawGrid" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawGrid" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawGrid" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDrawGrid" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_bool(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofDrawGrid" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  ecode6 = SWIG_AsVal_bool(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofDrawGrid" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = (bool)(val6);
  ofDrawGrid(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawGrid__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawGrid" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawGrid" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawGrid" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDrawGrid" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_bool(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofDrawGrid" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  ofDrawGrid(arg1,arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawGrid__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  bool arg3 ;
  bool arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawGrid" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawGrid" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawGrid" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDrawGrid" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ofDrawGrid(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawGrid__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  bool arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawGrid" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawGrid" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawGrid" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ofDrawGrid(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawGrid__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawGrid" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawGrid" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofDrawGrid(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawGrid__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawGrid" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofDrawGrid(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawGrid__SWIG_6(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofDrawGrid();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofDrawGrid(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGrid__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGrid__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGrid__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGrid__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGrid__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGrid__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGrid__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofDrawGrid.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDrawGridPlane__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  bool arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawGridPlane" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawGridPlane" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawGridPlane" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ofDrawGridPlane(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawGridPlane__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawGridPlane" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawGridPlane" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofDrawGridPlane(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawGridPlane__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawGridPlane" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofDrawGridPlane(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofDrawGridPlane(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGridPlane__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGridPlane__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawGridPlane__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofDrawGridPlane.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDrawArrow__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = 0 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDrawArrow" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawArrow" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofDrawArrow" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawArrow" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawArrow" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofDrawArrow((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawArrow__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofDrawArrow" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawArrow" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofDrawArrow" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawArrow" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ofDrawArrow((ofVec3f const &)*arg1,(ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofDrawArrow(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawArrow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawArrow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofDrawArrow.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDrawRotationAxes__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  int arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawRotationAxes" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawRotationAxes" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawRotationAxes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ofDrawRotationAxes(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawRotationAxes__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawRotationAxes" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawRotationAxes" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofDrawRotationAxes(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawRotationAxes__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDrawRotationAxes" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofDrawRotationAxes(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofDrawRotationAxes(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawRotationAxes__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawRotationAxes__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawRotationAxes__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofDrawRotationAxes.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofCamera(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofCamera *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofCamera.");  
  result = (ofCamera *)new ofCamera();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofCamera, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofCamera(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofCamera(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofCamera *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofCamera_setFov(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_setFov.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setFov" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setFov" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setFov(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_setNearClip(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_setNearClip.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setNearClip" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setNearClip" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setNearClip(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_setFarClip(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_setFarClip.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setFarClip" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setFarClip" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setFarClip(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_setLensOffset(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_setLensOffset.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setLensOffset" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_setLensOffset" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_setLensOffset" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  (arg1)->setLensOffset((ofVec2f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_setAspectRatio(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_setAspectRatio.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setAspectRatio" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setAspectRatio" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setAspectRatio(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_setForceAspectRatio(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_setForceAspectRatio.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setForceAspectRatio" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setForceAspectRatio" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setForceAspectRatio(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getFov(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_getFov.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getFov" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = (float)((ofCamera const *)arg1)->getFov();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getNearClip(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_getNearClip.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getNearClip" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = (float)((ofCamera const *)arg1)->getNearClip();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getFarClip(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_getFarClip.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getFarClip" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = (float)((ofCamera const *)arg1)->getFarClip();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getLensOffset(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_getLensOffset.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getLensOffset" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = ((ofCamera const *)arg1)->getLensOffset();
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getForceAspectRatio(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_getForceAspectRatio.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getForceAspectRatio" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = (bool)((ofCamera const *)arg1)->getForceAspectRatio();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getAspectRatio(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_getAspectRatio.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getAspectRatio" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = (float)((ofCamera const *)arg1)->getAspectRatio();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_setupPerspective__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ofVec2f *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setupPerspective" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setupPerspective" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCamera_setupPerspective" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofCamera_setupPerspective" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofCamera_setupPerspective" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ofCamera_setupPerspective" "', argument " "6"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_setupPerspective" "', argument " "6"" of type '" "ofVec2f const &""'"); 
  }
  arg6 = (ofVec2f *)(argp6);
  (arg1)->setupPerspective(arg2,arg3,arg4,arg5,(ofVec2f const &)*arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_setupPerspective__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setupPerspective" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setupPerspective" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCamera_setupPerspective" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofCamera_setupPerspective" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofCamera_setupPerspective" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->setupPerspective(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_setupPerspective__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setupPerspective" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setupPerspective" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCamera_setupPerspective" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofCamera_setupPerspective" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setupPerspective(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_setupPerspective__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setupPerspective" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setupPerspective" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCamera_setupPerspective" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setupPerspective(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_setupPerspective__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setupPerspective" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCamera_setupPerspective" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setupPerspective(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_setupPerspective__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setupPerspective" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  (arg1)->setupPerspective();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_setupPerspective(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_setupPerspective__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_setupPerspective__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_setupPerspective__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_setupPerspective__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_setupPerspective__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_setupPerspective__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setupPerspective.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_setupOffAxisViewPortal(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_setupOffAxisViewPortal.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_setupOffAxisViewPortal" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_setupOffAxisViewPortal" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_setupOffAxisViewPortal" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofCamera_setupOffAxisViewPortal" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_setupOffAxisViewPortal" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofCamera_setupOffAxisViewPortal" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_setupOffAxisViewPortal" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  (arg1)->setupOffAxisViewPortal((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_enableOrtho(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_enableOrtho.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_enableOrtho" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  (arg1)->enableOrtho();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_disableOrtho(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_disableOrtho.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_disableOrtho" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  (arg1)->disableOrtho();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getOrtho(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_getOrtho.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getOrtho" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = (bool)((ofCamera const *)arg1)->getOrtho();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getImagePlaneDistance__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofRectangle arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getImagePlaneDistance" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_getImagePlaneDistance" "', argument " "2"" of type '" "ofRectangle""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_getImagePlaneDistance" "', argument " "2"" of type '" "ofRectangle""'");
    } else {
      arg2 = *((ofRectangle *)(argp2));
    }
  }
  result = (float)((ofCamera const *)arg1)->getImagePlaneDistance(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_getImagePlaneDistance__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getImagePlaneDistance" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = (float)((ofCamera const *)arg1)->getImagePlaneDistance();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_getImagePlaneDistance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_getImagePlaneDistance__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_getImagePlaneDistance__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getImagePlaneDistance.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_begin__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofRectangle arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_begin" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_begin" "', argument " "2"" of type '" "ofRectangle""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_begin" "', argument " "2"" of type '" "ofRectangle""'");
    } else {
      arg2 = *((ofRectangle *)(argp2));
    }
  }
  (arg1)->begin(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_begin__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_begin" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  (arg1)->begin();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_begin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_begin__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_begin__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function begin.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_end_(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_end_.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_end_" "', argument " "1"" of type '" "ofCamera *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  (arg1)->end();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getProjectionMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofRectangle arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofMatrix4x4 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getProjectionMatrix" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_getProjectionMatrix" "', argument " "2"" of type '" "ofRectangle""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_getProjectionMatrix" "', argument " "2"" of type '" "ofRectangle""'");
    } else {
      arg2 = *((ofRectangle *)(argp2));
    }
  }
  result = ((ofCamera const *)arg1)->getProjectionMatrix(arg2);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_getProjectionMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getProjectionMatrix" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = ((ofCamera const *)arg1)->getProjectionMatrix();
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_getProjectionMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_getProjectionMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_getProjectionMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getProjectionMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getModelViewMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCamera_getModelViewMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getModelViewMatrix" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = ((ofCamera const *)arg1)->getModelViewMatrix();
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_getModelViewProjectionMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofRectangle arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofMatrix4x4 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getModelViewProjectionMatrix" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_getModelViewProjectionMatrix" "', argument " "2"" of type '" "ofRectangle""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_getModelViewProjectionMatrix" "', argument " "2"" of type '" "ofRectangle""'");
    } else {
      arg2 = *((ofRectangle *)(argp2));
    }
  }
  result = ((ofCamera const *)arg1)->getModelViewProjectionMatrix(arg2);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_getModelViewProjectionMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_getModelViewProjectionMatrix" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  result = ((ofCamera const *)arg1)->getModelViewProjectionMatrix();
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_getModelViewProjectionMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_getModelViewProjectionMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_getModelViewProjectionMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getModelViewProjectionMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_worldToScreen__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ;
  ofRectangle arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_worldToScreen" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_worldToScreen" "', argument " "2"" of type '" "ofVec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_worldToScreen" "', argument " "2"" of type '" "ofVec3f""'");
    } else {
      arg2 = *((ofVec3f *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofCamera_worldToScreen" "', argument " "3"" of type '" "ofRectangle""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_worldToScreen" "', argument " "3"" of type '" "ofRectangle""'");
    } else {
      arg3 = *((ofRectangle *)(argp3));
    }
  }
  result = ((ofCamera const *)arg1)->worldToScreen(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_worldToScreen__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_worldToScreen" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_worldToScreen" "', argument " "2"" of type '" "ofVec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_worldToScreen" "', argument " "2"" of type '" "ofVec3f""'");
    } else {
      arg2 = *((ofVec3f *)(argp2));
    }
  }
  result = ((ofCamera const *)arg1)->worldToScreen(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_worldToScreen(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_worldToScreen__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_worldToScreen__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function worldToScreen.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_screenToWorld__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ;
  ofRectangle arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_screenToWorld" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_screenToWorld" "', argument " "2"" of type '" "ofVec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_screenToWorld" "', argument " "2"" of type '" "ofVec3f""'");
    } else {
      arg2 = *((ofVec3f *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofCamera_screenToWorld" "', argument " "3"" of type '" "ofRectangle""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_screenToWorld" "', argument " "3"" of type '" "ofRectangle""'");
    } else {
      arg3 = *((ofRectangle *)(argp3));
    }
  }
  result = ((ofCamera const *)arg1)->screenToWorld(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_screenToWorld__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_screenToWorld" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_screenToWorld" "', argument " "2"" of type '" "ofVec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_screenToWorld" "', argument " "2"" of type '" "ofVec3f""'");
    } else {
      arg2 = *((ofVec3f *)(argp2));
    }
  }
  result = ((ofCamera const *)arg1)->screenToWorld(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_screenToWorld(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_screenToWorld__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_screenToWorld__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function screenToWorld.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_worldToCamera__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ;
  ofRectangle arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_worldToCamera" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_worldToCamera" "', argument " "2"" of type '" "ofVec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_worldToCamera" "', argument " "2"" of type '" "ofVec3f""'");
    } else {
      arg2 = *((ofVec3f *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofCamera_worldToCamera" "', argument " "3"" of type '" "ofRectangle""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_worldToCamera" "', argument " "3"" of type '" "ofRectangle""'");
    } else {
      arg3 = *((ofRectangle *)(argp3));
    }
  }
  result = ((ofCamera const *)arg1)->worldToCamera(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_worldToCamera__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_worldToCamera" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_worldToCamera" "', argument " "2"" of type '" "ofVec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_worldToCamera" "', argument " "2"" of type '" "ofVec3f""'");
    } else {
      arg2 = *((ofVec3f *)(argp2));
    }
  }
  result = ((ofCamera const *)arg1)->worldToCamera(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_worldToCamera(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_worldToCamera__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_worldToCamera__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function worldToCamera.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCamera_cameraToWorld__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ;
  ofRectangle arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_cameraToWorld" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_cameraToWorld" "', argument " "2"" of type '" "ofVec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_cameraToWorld" "', argument " "2"" of type '" "ofVec3f""'");
    } else {
      arg2 = *((ofVec3f *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofCamera_cameraToWorld" "', argument " "3"" of type '" "ofRectangle""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_cameraToWorld" "', argument " "3"" of type '" "ofRectangle""'");
    } else {
      arg3 = *((ofRectangle *)(argp3));
    }
  }
  result = ((ofCamera const *)arg1)->cameraToWorld(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_cameraToWorld__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofCamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCamera_cameraToWorld" "', argument " "1"" of type '" "ofCamera const *""'"); 
  }
  arg1 = (ofCamera *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCamera_cameraToWorld" "', argument " "2"" of type '" "ofVec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCamera_cameraToWorld" "', argument " "2"" of type '" "ofVec3f""'");
    } else {
      arg2 = *((ofVec3f *)(argp2));
    }
  }
  result = ((ofCamera const *)arg1)->cameraToWorld(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCamera_cameraToWorld(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_cameraToWorld__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCamera_cameraToWorld__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function cameraToWorld.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofEasyCam(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofEasyCam *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofEasyCam.");  
  result = (ofEasyCam *)new ofEasyCam();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofEasyCam, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofEasyCam(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofEasyCam(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofEasyCam *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofEasyCam_begin__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  ofRectangle arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_begin" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofEasyCam_begin" "', argument " "2"" of type '" "ofRectangle""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofEasyCam_begin" "', argument " "2"" of type '" "ofRectangle""'");
    } else {
      arg2 = *((ofRectangle *)(argp2));
    }
  }
  (arg1)->begin(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofEasyCam_begin__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_begin" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  (arg1)->begin();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofEasyCam_begin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofEasyCam_begin__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofEasyCam_begin__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function begin.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_reset(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_reset.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_reset" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  (arg1)->reset();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_setTarget__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_setTarget" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofEasyCam_setTarget" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofEasyCam_setTarget" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->setTarget((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofEasyCam_setTarget__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  ofNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_setTarget" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofEasyCam_setTarget" "', argument " "2"" of type '" "ofNode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofEasyCam_setTarget" "', argument " "2"" of type '" "ofNode &""'"); 
  }
  arg2 = (ofNode *)(argp2);
  (arg1)->setTarget(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofEasyCam_setTarget(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofEasyCam_setTarget__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofEasyCam_setTarget__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setTarget.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_getTarget(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofNode *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_getTarget.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_getTarget" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  result = (ofNode *) &(arg1)->getTarget();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofNode, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_setDistance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_setDistance.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_setDistance" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofEasyCam_setDistance" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setDistance(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_getDistance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_getDistance.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_getDistance" "', argument " "1"" of type '" "ofEasyCam const *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  result = (float)((ofEasyCam const *)arg1)->getDistance();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_setDrag(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_setDrag.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_setDrag" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofEasyCam_setDrag" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setDrag(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_getDrag(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_getDrag.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_getDrag" "', argument " "1"" of type '" "ofEasyCam const *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  result = (float)((ofEasyCam const *)arg1)->getDrag();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_setTranslationKey(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_setTranslationKey.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_setTranslationKey" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  ecode2 = SWIG_AsVal_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofEasyCam_setTranslationKey" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = (char)(val2);
  (arg1)->setTranslationKey(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_getTranslationKey(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_getTranslationKey.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_getTranslationKey" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  result = (char)(arg1)->getTranslationKey();
  jsresult = SWIG_From_char((char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_enableMouseInput(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_enableMouseInput.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_enableMouseInput" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  (arg1)->enableMouseInput();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_disableMouseInput(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_disableMouseInput.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_disableMouseInput" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  (arg1)->disableMouseInput();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_getMouseInputEnabled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_getMouseInputEnabled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_getMouseInputEnabled" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  result = (bool)(arg1)->getMouseInputEnabled();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_enableMouseMiddleButton(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_enableMouseMiddleButton.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_enableMouseMiddleButton" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  (arg1)->enableMouseMiddleButton();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_disableMouseMiddleButton(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_disableMouseMiddleButton.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_disableMouseMiddleButton" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  (arg1)->disableMouseMiddleButton();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_getMouseMiddleButtonEnabled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_getMouseMiddleButtonEnabled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_getMouseMiddleButtonEnabled" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  result = (bool)(arg1)->getMouseMiddleButtonEnabled();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEasyCam_setAutoDistance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEasyCam_setAutoDistance.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofEasyCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEasyCam_setAutoDistance" "', argument " "1"" of type '" "ofEasyCam *""'"); 
  }
  arg1 = (ofEasyCam *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofEasyCam_setAutoDistance" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setAutoDistance(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMesh__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofMesh *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMesh__SWIG_0.");  
  result = (ofMesh *)new ofMesh();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMesh, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMesh__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPrimitiveMode arg1 ;
  std::vector< ofVec3f > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofMesh *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMesh__SWIG_1.");  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMesh" "', argument " "1"" of type '" "ofPrimitiveMode""'");
  } 
  arg1 = (ofPrimitiveMode)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ofMesh" "', argument " "2"" of type '" "std::vector< ofVec3f > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofMesh" "', argument " "2"" of type '" "std::vector< ofVec3f > const &""'"); 
  }
  arg2 = (std::vector< ofVec3f > *)(argp2);
  result = (ofMesh *)new ofMesh(arg1,(std::vector< ofVec3f > const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMesh, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMesh(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMesh__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMesh__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofMesh");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofMesh(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofMesh(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofMesh *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofMesh_setMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofPrimitiveMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_setMode.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_setMode" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMesh_setMode" "', argument " "2"" of type '" "ofPrimitiveMode""'");
  } 
  arg2 = (ofPrimitiveMode)(val2);
  (arg1)->setMode(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPrimitiveMode result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getMode.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getMode" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofPrimitiveMode)((ofMesh const *)arg1)->getMode();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_clear" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_setupIndicesAuto(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_setupIndicesAuto.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_setupIndicesAuto" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->setupIndicesAuto();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getVertex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getVertex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getVertex" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_getVertex" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_getVertex" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  result = ((ofMesh const *)arg1)->getVertex(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addVertex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_addVertex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addVertex" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addVertex" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addVertex" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->addVertex((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addVertices__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addVertices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addVertices" "', argument " "2"" of type '" "std::vector< ofVec3f > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addVertices" "', argument " "2"" of type '" "std::vector< ofVec3f > const &""'"); 
  }
  arg2 = (std::vector< ofVec3f > *)(argp2);
  (arg1)->addVertices((std::vector< ofVec3f > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addVertices__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addVertices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addVertices" "', argument " "2"" of type '" "ofVec3f const *""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMesh_addVertices" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->addVertices((ofVec3f const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addVertices__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addVertices__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function addVertices.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_removeVertex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_removeVertex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_removeVertex" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_removeVertex" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_removeVertex" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  (arg1)->removeVertex(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_setVertex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_setVertex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_setVertex" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_setVertex" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setVertex" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMesh_setVertex" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setVertex" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->setVertex(arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_clearVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_clearVertices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_clearVertices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->clearVertices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getNormal(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getNormal.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNormal" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_getNormal" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_getNormal" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  result = ((ofMesh const *)arg1)->getNormal(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addNormal(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_addNormal.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addNormal" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addNormal" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addNormal" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->addNormal((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addNormals__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addNormals" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addNormals" "', argument " "2"" of type '" "std::vector< ofVec3f > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addNormals" "', argument " "2"" of type '" "std::vector< ofVec3f > const &""'"); 
  }
  arg2 = (std::vector< ofVec3f > *)(argp2);
  (arg1)->addNormals((std::vector< ofVec3f > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addNormals__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addNormals" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addNormals" "', argument " "2"" of type '" "ofVec3f const *""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMesh_addNormals" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->addNormals((ofVec3f const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addNormals__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addNormals__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function addNormals.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_removeNormal(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_removeNormal.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_removeNormal" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_removeNormal" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_removeNormal" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  (arg1)->removeNormal(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_setNormal(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_setNormal.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_setNormal" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_setNormal" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setNormal" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMesh_setNormal" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setNormal" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->setNormal(arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_clearNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_clearNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_clearNormals" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->clearNormals();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofFloatColor result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getColor" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_getColor" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_getColor" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  result = ((ofMesh const *)arg1)->getColor(arg2);
  jsresult = SWIG_NewPointerObj((new ofFloatColor((const ofFloatColor&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofFloatColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_addColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addColor" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addColor" "', argument " "2"" of type '" "ofFloatColor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addColor" "', argument " "2"" of type '" "ofFloatColor const &""'"); 
  }
  arg2 = (ofFloatColor *)(argp2);
  (arg1)->addColor((ofFloatColor const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addColors__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofFloatColor > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addColors" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addColors" "', argument " "2"" of type '" "std::vector< ofFloatColor > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addColors" "', argument " "2"" of type '" "std::vector< ofFloatColor > const &""'"); 
  }
  arg2 = (std::vector< ofFloatColor > *)(argp2);
  (arg1)->addColors((std::vector< ofFloatColor > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addColors__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofFloatColor *arg2 = (ofFloatColor *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addColors" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addColors" "', argument " "2"" of type '" "ofFloatColor const *""'"); 
  }
  arg2 = (ofFloatColor *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMesh_addColors" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->addColors((ofFloatColor const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addColors__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addColors__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function addColors.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_removeColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_removeColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_removeColor" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_removeColor" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_removeColor" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  (arg1)->removeColor(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_setColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  ofFloatColor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_setColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_setColor" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_setColor" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setColor" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMesh_setColor" "', argument " "3"" of type '" "ofFloatColor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setColor" "', argument " "3"" of type '" "ofFloatColor const &""'"); 
  }
  arg3 = (ofFloatColor *)(argp3);
  (arg1)->setColor(arg2,(ofFloatColor const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_clearColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_clearColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_clearColors" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->clearColors();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getTexCoord(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getTexCoord.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getTexCoord" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_getTexCoord" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_getTexCoord" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  result = ((ofMesh const *)arg1)->getTexCoord(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addTexCoord(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_addTexCoord.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addTexCoord" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addTexCoord" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addTexCoord" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  (arg1)->addTexCoord((ofVec2f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addTexCoords__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec2f > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addTexCoords" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofVec2f_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addTexCoords" "', argument " "2"" of type '" "std::vector< ofVec2f > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addTexCoords" "', argument " "2"" of type '" "std::vector< ofVec2f > const &""'"); 
  }
  arg2 = (std::vector< ofVec2f > *)(argp2);
  (arg1)->addTexCoords((std::vector< ofVec2f > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addTexCoords__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addTexCoords" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addTexCoords" "', argument " "2"" of type '" "ofVec2f const *""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMesh_addTexCoords" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->addTexCoords((ofVec2f const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addTexCoords__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addTexCoords__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function addTexCoords.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_removeTexCoord(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_removeTexCoord.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_removeTexCoord" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_removeTexCoord" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_removeTexCoord" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  (arg1)->removeTexCoord(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_setTexCoord(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  ofVec2f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_setTexCoord.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_setTexCoord" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_setTexCoord" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setTexCoord" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMesh_setTexCoord" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setTexCoord" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  arg3 = (ofVec2f *)(argp3);
  (arg1)->setTexCoord(arg2,(ofVec2f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_clearTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_clearTexCoords.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_clearTexCoords" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->clearTexCoords();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getIndex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofIndexType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getIndex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getIndex" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_getIndex" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_getIndex" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  result = ((ofMesh const *)arg1)->getIndex(arg2);
  jsresult = SWIG_NewPointerObj((new ofIndexType((const ofIndexType&)(result))), SWIGTYPE_p_TESSindex, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addIndex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_addIndex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addIndex" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addIndex" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addIndex" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  (arg1)->addIndex(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addIndices__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofIndexType > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addIndices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_TESSindex_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addIndices" "', argument " "2"" of type '" "std::vector< ofIndexType > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addIndices" "', argument " "2"" of type '" "std::vector< ofIndexType > const &""'"); 
  }
  arg2 = (std::vector< ofIndexType > *)(argp2);
  (arg1)->addIndices((std::vector< ofIndexType > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addIndices__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType *arg2 = (ofIndexType *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addIndices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_TESSindex, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addIndices" "', argument " "2"" of type '" "ofIndexType const *""'"); 
  }
  arg2 = (ofIndexType *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMesh_addIndices" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->addIndices((ofIndexType const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_addIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addIndices__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_addIndices__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function addIndices.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_removeIndex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_removeIndex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_removeIndex" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_removeIndex" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_removeIndex" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  (arg1)->removeIndex(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_setIndex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  ofIndexType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_setIndex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_setIndex" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_setIndex" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setIndex" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMesh_setIndex" "', argument " "3"" of type '" "ofIndexType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_setIndex" "', argument " "3"" of type '" "ofIndexType""'");
    } else {
      arg3 = *((ofIndexType *)(argp3));
    }
  }
  (arg1)->setIndex(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_clearIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_clearIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_clearIndices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->clearIndices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_addTriangle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ;
  ofIndexType arg3 ;
  ofIndexType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_addTriangle.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_addTriangle" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMesh_addTriangle" "', argument " "2"" of type '" "ofIndexType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addTriangle" "', argument " "2"" of type '" "ofIndexType""'");
    } else {
      arg2 = *((ofIndexType *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMesh_addTriangle" "', argument " "3"" of type '" "ofIndexType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addTriangle" "', argument " "3"" of type '" "ofIndexType""'");
    } else {
      arg3 = *((ofIndexType *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_TESSindex,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMesh_addTriangle" "', argument " "4"" of type '" "ofIndexType""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMesh_addTriangle" "', argument " "4"" of type '" "ofIndexType""'");
    } else {
      arg4 = *((ofIndexType *)(argp4));
    }
  }
  (arg1)->addTriangle(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getNumVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getNumVertices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNumVertices" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (int)((ofMesh const *)arg1)->getNumVertices();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getNumColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getNumColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNumColors" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (int)((ofMesh const *)arg1)->getNumColors();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getNumNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getNumNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNumNormals" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (int)((ofMesh const *)arg1)->getNumNormals();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getNumTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getNumTexCoords.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNumTexCoords" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (int)((ofMesh const *)arg1)->getNumTexCoords();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getNumIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getNumIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNumIndices" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (int)((ofMesh const *)arg1)->getNumIndices();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getVerticesPointer__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getVerticesPointer" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofVec3f *)(arg1)->getVerticesPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getColorsPointer__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofFloatColor *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getColorsPointer" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofFloatColor *)(arg1)->getColorsPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getNormalsPointer__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNormalsPointer" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofVec3f *)(arg1)->getNormalsPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getTexCoordsPointer__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec2f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getTexCoordsPointer" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofVec2f *)(arg1)->getTexCoordsPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getIndexPointer__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofIndexType *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getIndexPointer" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofIndexType *)(arg1)->getIndexPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TESSindex, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getVerticesPointer__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getVerticesPointer" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofVec3f *)((ofMesh const *)arg1)->getVerticesPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getVerticesPointer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getVerticesPointer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getVerticesPointer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getVerticesPointer.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getColorsPointer__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofFloatColor *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getColorsPointer" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofFloatColor *)((ofMesh const *)arg1)->getColorsPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getColorsPointer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getColorsPointer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getColorsPointer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getColorsPointer.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getNormalsPointer__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNormalsPointer" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofVec3f *)((ofMesh const *)arg1)->getNormalsPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getNormalsPointer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getNormalsPointer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getNormalsPointer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getNormalsPointer.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getTexCoordsPointer__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec2f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getTexCoordsPointer" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofVec2f *)((ofMesh const *)arg1)->getTexCoordsPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getTexCoordsPointer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getTexCoordsPointer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getTexCoordsPointer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getTexCoordsPointer.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getIndexPointer__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofIndexType *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getIndexPointer" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofIndexType *)((ofMesh const *)arg1)->getIndexPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TESSindex, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getIndexPointer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getIndexPointer__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getIndexPointer__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getIndexPointer.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getVertices__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofVec3f > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getVertices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofVec3f > *) &(arg1)->getVertices();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofVec3f_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getColors__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofFloatColor > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getColors" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofFloatColor > *) &(arg1)->getColors();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getNormals__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofVec3f > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNormals" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofVec3f > *) &(arg1)->getNormals();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofVec3f_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getTexCoords__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofVec2f > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getTexCoords" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofVec2f > *) &(arg1)->getTexCoords();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofVec2f_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getIndices__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofIndexType > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getIndices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofIndexType > *) &(arg1)->getIndices();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TESSindex_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getVertices__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofVec3f > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getVertices" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofVec3f > *) &((ofMesh const *)arg1)->getVertices();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofVec3f_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getVertices__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getVertices__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getVertices.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getColors__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofFloatColor > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getColors" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofFloatColor > *) &((ofMesh const *)arg1)->getColors();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getColors__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getColors__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getColors.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getNormals__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofVec3f > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getNormals" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofVec3f > *) &((ofMesh const *)arg1)->getNormals();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofVec3f_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getNormals__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getNormals__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getNormals.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getTexCoords__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofVec2f > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getTexCoords" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofVec2f > *) &((ofMesh const *)arg1)->getTexCoords();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofVec2f_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getTexCoords__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getTexCoords__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getTexCoords.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getIndices__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofIndexType > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getIndices" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (std::vector< ofIndexType > *) &((ofMesh const *)arg1)->getIndices();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TESSindex_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_getIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getIndices__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_getIndices__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getIndices.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_getCentroid(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_getCentroid.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_getCentroid" "', argument " "1"" of type '" "ofMesh const *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = ((ofMesh const *)arg1)->getCentroid();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_setName(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_setName.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_setName" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  (arg1)->setName(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_haveVertsChanged(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_haveVertsChanged.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_haveVertsChanged" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->haveVertsChanged();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_haveColorsChanged(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_haveColorsChanged.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_haveColorsChanged" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->haveColorsChanged();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_haveNormalsChanged(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_haveNormalsChanged.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_haveNormalsChanged" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->haveNormalsChanged();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_haveTexCoordsChanged(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_haveTexCoordsChanged.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_haveTexCoordsChanged" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->haveTexCoordsChanged();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_haveIndicesChanged(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_haveIndicesChanged.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_haveIndicesChanged" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->haveIndicesChanged();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_hasVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_hasVertices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_hasVertices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->hasVertices();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_hasColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_hasColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_hasColors" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->hasColors();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_hasNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_hasNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_hasNormals" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->hasNormals();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_hasTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_hasTexCoords.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_hasTexCoords" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->hasTexCoords();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_hasIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_hasIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_hasIndices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->hasIndices();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_drawVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_drawVertices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_drawVertices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->drawVertices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_drawWireframe(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_drawWireframe.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_drawWireframe" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->drawWireframe();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_drawFaces(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_drawFaces.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_drawFaces" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->drawFaces();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_draw.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_draw" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->draw();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_load(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_load.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_load" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  (arg1)->load(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_save__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_save" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMesh_save" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->save(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_save__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_save" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  (arg1)->save(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMesh_save(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_save__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMesh_save__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function save.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_enableColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_enableColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_enableColors" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->enableColors();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_enableTextures(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_enableTextures.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_enableTextures" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->enableTextures();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_enableNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_enableNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_enableNormals" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->enableNormals();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_enableIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_enableIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_enableIndices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->enableIndices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_disableColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_disableColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_disableColors" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->disableColors();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_disableTextures(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_disableTextures.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_disableTextures" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->disableTextures();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_disableNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_disableNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_disableNormals" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->disableNormals();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_disableIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_disableIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_disableIndices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  (arg1)->disableIndices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_usingColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_usingColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_usingColors" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->usingColors();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_usingTextures(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_usingTextures.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_usingTextures" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->usingTextures();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_usingNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_usingNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_usingNormals" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->usingNormals();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMesh_usingIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMesh *arg1 = (ofMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMesh_usingIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMesh_usingIndices" "', argument " "1"" of type '" "ofMesh *""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (bool)(arg1)->usingIndices();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFbo__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFbo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFbo__SWIG_0.");  
  result = (ofFbo *)new ofFbo();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFbo, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFbo__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFbo *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofFbo *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFbo__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofFbo,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofFbo" "', argument " "1"" of type '" "ofFbo const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofFbo" "', argument " "1"" of type '" "ofFbo const &""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (ofFbo *)new ofFbo((ofFbo const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFbo, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFbo(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFbo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFbo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofFbo");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofFbo(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofFbo(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofFbo *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofFbo_allocate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_allocate" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFbo_allocate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFbo_allocate" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->allocate(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_allocate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_allocate" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFbo_allocate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_allocate__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_allocate" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->allocate(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_allocate__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  ofFbo::Settings arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_allocate" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofFbo__Settings,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFbo_allocate" "', argument " "2"" of type '" "ofFbo::Settings""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFbo_allocate" "', argument " "2"" of type '" "ofFbo::Settings""'");
    } else {
      arg2 = *((ofFbo::Settings *)(argp2));
    }
  }
  (arg1)->allocate(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_allocate__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_allocate" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  (arg1)->allocate();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_allocate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_allocate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_allocate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_allocate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_allocate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_allocate__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function allocate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_isAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_isAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_isAllocated" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (bool)(arg1)->isAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_draw__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_draw" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->draw(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_draw__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_draw" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofFbo_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofFbo_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->draw(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_draw__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_draw__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function draw.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_setAnchorPercent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_setAnchorPercent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_setAnchorPercent" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_setAnchorPercent" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_setAnchorPercent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPercent(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_setAnchorPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_setAnchorPoint.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_setAnchorPoint" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_setAnchorPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_setAnchorPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPoint(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_resetAnchor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_resetAnchor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_resetAnchor" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  (arg1)->resetAnchor();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_setDefaultTextureIndex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_setDefaultTextureIndex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_setDefaultTextureIndex" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_setDefaultTextureIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setDefaultTextureIndex(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_getDefaultTextureIndex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_getDefaultTextureIndex.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getDefaultTextureIndex" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (int)(arg1)->getDefaultTextureIndex();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_getTextureReference__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTexture *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getTextureReference" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (ofTexture *) &(arg1)->getTextureReference();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTexture, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_getTextureReference__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ofTexture *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getTextureReference" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_getTextureReference" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (ofTexture *) &(arg1)->getTextureReference(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTexture, 0 |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_getTextureReference(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_getTextureReference__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_getTextureReference__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getTextureReference.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_getDepthTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTexture *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_getDepthTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getDepthTexture" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (ofTexture *) &(arg1)->getDepthTexture();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTexture, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_setUseTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_setUseTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_setUseTexture" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_setUseTexture" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setUseTexture(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_begin__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_begin" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_begin" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->begin(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_begin__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_begin" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  (arg1)->begin();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_begin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_begin__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_begin__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function begin.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_end_(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_end_.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_end_" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  (arg1)->end();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_readToPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  ofPixels *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_readToPixels" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofPixels &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofPixels &""'"); 
  }
  arg2 = (ofPixels *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_readToPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->readToPixels(*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_readToPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  ofPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_readToPixels" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofPixels &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofPixels &""'"); 
  }
  arg2 = (ofPixels *)(argp2);
  (arg1)->readToPixels(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_readToPixels__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  ofShortPixels *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_readToPixels" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofShortPixels &""'"); 
  }
  arg2 = (ofShortPixels *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_readToPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->readToPixels(*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_readToPixels__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  ofShortPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_readToPixels" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofShortPixels &""'"); 
  }
  arg2 = (ofShortPixels *)(argp2);
  (arg1)->readToPixels(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_readToPixels__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  ofFloatPixels *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_readToPixels" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofFloatPixels &""'"); 
  }
  arg2 = (ofFloatPixels *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFbo_readToPixels" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->readToPixels(*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_readToPixels__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  ofFloatPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_readToPixels" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFbo_readToPixels" "', argument " "2"" of type '" "ofFloatPixels &""'"); 
  }
  arg2 = (ofFloatPixels *)(argp2);
  (arg1)->readToPixels(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFbo_readToPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_readToPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_readToPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_readToPixels__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_readToPixels__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_readToPixels__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFbo_readToPixels__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function readToPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getWidth" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (float)(arg1)->getWidth();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getHeight" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (float)(arg1)->getHeight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_bind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_bind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_bind" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  (arg1)->bind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_unbind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_unbind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_unbind" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  (arg1)->unbind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_getNumTextures(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_getNumTextures.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getNumTextures" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (int)(arg1)->getNumTextures();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_setActiveDrawBuffer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_setActiveDrawBuffer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_setActiveDrawBuffer" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFbo_setActiveDrawBuffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setActiveDrawBuffer(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_setActiveDrawBuffers(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_setActiveDrawBuffers.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_setActiveDrawBuffers" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofFbo_setActiveDrawBuffers" "', argument " "2"" of type '" "std::vector< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFbo_setActiveDrawBuffers" "', argument " "2"" of type '" "std::vector< int > const &""'"); 
  }
  arg2 = (std::vector< int > *)(argp2);
  (arg1)->setActiveDrawBuffers((std::vector< int > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_activateAllDrawBuffers(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_activateAllDrawBuffers.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_activateAllDrawBuffers" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  (arg1)->activateAllDrawBuffers();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_getFbo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GLuint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_getFbo.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getFbo" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (arg1)->getFbo();
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_checkGLSupport(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_checkGLSupport.");  
  
  result = (bool)ofFbo::checkGLSupport();
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_maxColorAttachments(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_maxColorAttachments.");  
  
  result = (int)ofFbo::maxColorAttachments();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_maxDrawBuffers(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_maxDrawBuffers.");  
  
  result = (int)ofFbo::maxDrawBuffers();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_maxSamples(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_maxSamples.");  
  
  result = (int)ofFbo::maxSamples();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_getDepthBuffer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GLuint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_getDepthBuffer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getDepthBuffer" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (arg1)->getDepthBuffer();
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFbo_getStencilBuffer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFbo *arg1 = (ofFbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GLuint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFbo_getStencilBuffer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFbo_getStencilBuffer" "', argument " "1"" of type '" "ofFbo *""'"); 
  }
  arg1 = (ofFbo *)(argp1);
  result = (arg1)->getStencilBuffer();
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PRIMITIVE_TRIANGLES(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PRIMITIVE_TRIANGLES));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PRIMITIVE_TRIANGLE_STRIP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PRIMITIVE_TRIANGLE_STRIP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PRIMITIVE_TRIANGLE_FAN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PRIMITIVE_TRIANGLE_FAN));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PRIMITIVE_LINES(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PRIMITIVE_LINES));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PRIMITIVE_LINE_STRIP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PRIMITIVE_LINE_STRIP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PRIMITIVE_LINE_LOOP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PRIMITIVE_LINE_LOOP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PRIMITIVE_POINTS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PRIMITIVE_POINTS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TRIANGLES_MODE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TRIANGLE_STRIP_MODE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TRIANGLE_FAN_MODE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LINES_MODE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(3));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LINE_STRIP_MODE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LINE_LOOP_MODE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(5));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_POINTS_MODE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(6));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MESH_POINTS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_MESH_POINTS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MESH_WIREFRAME(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_MESH_WIREFRAME));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MESH_FILL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_MESH_FILL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetGLPolyMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyRenderMode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  GLuint result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetGLPolyMode.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofGetGLPolyMode" "', argument " "1"" of type '" "ofPolyRenderMode""'");
  } 
  arg1 = (ofPolyRenderMode)(val1);
  result = ofGetGLPolyMode(arg1);
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetOFPolyMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  GLuint arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  ofPolyRenderMode result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetOFPolyMode.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_GLuint,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofGetOFPolyMode" "', argument " "1"" of type '" "GLuint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofGetOFPolyMode" "', argument " "1"" of type '" "GLuint""'");
    } else {
      arg1 = *((GLuint *)(argp1));
    }
  }
  result = (ofPolyRenderMode)ofGetOFPolyMode(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetGLPrimitiveMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPrimitiveMode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  GLuint result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetGLPrimitiveMode.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofGetGLPrimitiveMode" "', argument " "1"" of type '" "ofPrimitiveMode""'");
  } 
  arg1 = (ofPrimitiveMode)(val1);
  result = ofGetGLPrimitiveMode(arg1);
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetOFPrimitiveMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  GLuint arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  ofPrimitiveMode result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetOFPrimitiveMode.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_GLuint,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofGetOFPrimitiveMode" "', argument " "1"" of type '" "GLuint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofGetOFPrimitiveMode" "', argument " "1"" of type '" "GLuint""'");
    } else {
      arg1 = *((GLuint *)(argp1));
    }
  }
  result = (ofPrimitiveMode)ofGetOFPrimitiveMode(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetGLTypeFromPixelFormat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPixelFormat arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetGLTypeFromPixelFormat.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofGetGLTypeFromPixelFormat" "', argument " "1"" of type '" "ofPixelFormat""'");
  } 
  arg1 = (ofPixelFormat)(val1);
  result = (int)ofGetGLTypeFromPixelFormat(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MAX_LIGHTS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LIGHT_POINT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LIGHT_POINT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LIGHT_SPOT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LIGHT_SPOT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LIGHT_DIRECTIONAL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LIGHT_DIRECTIONAL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEnableLighting(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnableLighting.");  
  
  ofEnableLighting();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisableLighting(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisableLighting.");  
  
  ofDisableLighting();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEnableSeparateSpecularLight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnableSeparateSpecularLight.");  
  
  ofEnableSeparateSpecularLight();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisableSeparateSpecularLight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisableSeparateSpecularLight.");  
  
  ofDisableSeparateSpecularLight();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetLightingEnabled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetLightingEnabled.");  
  
  result = (bool)ofGetLightingEnabled();
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetSmoothLighting(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetSmoothLighting.");  
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetSmoothLighting" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  ofSetSmoothLighting(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetGlobalAmbientColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofColor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetGlobalAmbientColor.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetGlobalAmbientColor" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetGlobalAmbientColor" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  arg1 = (ofColor *)(argp1);
  ofSetGlobalAmbientColor((ofColor_< unsigned char > const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLight__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLight *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLight__SWIG_0.");  
  result = (ofLight *)new ofLight();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLight, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLight__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLight *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofLight *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLight__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofLight,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofLight" "', argument " "1"" of type '" "ofLight const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofLight" "', argument " "1"" of type '" "ofLight const &""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (ofLight *)new ofLight((ofLight const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLight, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLight(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLight__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLight__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofLight");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofLight(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofLight(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofLight *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofLight_destroy(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_destroy.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_destroy" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  (arg1)->destroy();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setup(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_setup.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setup" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  (arg1)->setup();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_enable(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_enable.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_enable" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  (arg1)->enable();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_disable(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_disable.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_disable" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  (arg1)->disable();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getIsEnabled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getIsEnabled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getIsEnabled" "', argument " "1"" of type '" "ofLight const *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (bool)((ofLight const *)arg1)->getIsEnabled();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setDirectional(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_setDirectional.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setDirectional" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  (arg1)->setDirectional();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getIsDirectional(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getIsDirectional.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getIsDirectional" "', argument " "1"" of type '" "ofLight const *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (bool)((ofLight const *)arg1)->getIsDirectional();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setSpotlight__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setSpotlight" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLight_setSpotlight" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofLight_setSpotlight" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setSpotlight(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLight_setSpotlight__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setSpotlight" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLight_setSpotlight" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setSpotlight(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLight_setSpotlight__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setSpotlight" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  (arg1)->setSpotlight();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLight_setSpotlight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLight_setSpotlight__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLight_setSpotlight__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLight_setSpotlight__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setSpotlight.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getIsSpotlight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getIsSpotlight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getIsSpotlight" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (bool)(arg1)->getIsSpotlight();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setSpotlightCutOff(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_setSpotlightCutOff.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setSpotlightCutOff" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLight_setSpotlightCutOff" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setSpotlightCutOff(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getSpotlightCutOff(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getSpotlightCutOff.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getSpotlightCutOff" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (float)(arg1)->getSpotlightCutOff();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setSpotConcentration(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_setSpotConcentration.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setSpotConcentration" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLight_setSpotConcentration" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setSpotConcentration(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getSpotConcentration(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getSpotConcentration.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getSpotConcentration" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (float)(arg1)->getSpotConcentration();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setPointLight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_setPointLight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setPointLight" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  (arg1)->setPointLight();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getIsPointLight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getIsPointLight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getIsPointLight" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (bool)(arg1)->getIsPointLight();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setAttenuation__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setAttenuation" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLight_setAttenuation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofLight_setAttenuation" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofLight_setAttenuation" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setAttenuation(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLight_setAttenuation__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setAttenuation" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLight_setAttenuation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofLight_setAttenuation" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAttenuation(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLight_setAttenuation__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setAttenuation" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLight_setAttenuation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setAttenuation(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLight_setAttenuation__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setAttenuation" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  (arg1)->setAttenuation();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLight_setAttenuation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLight_setAttenuation__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLight_setAttenuation__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLight_setAttenuation__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLight_setAttenuation__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setAttenuation.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getAttenuationConstant(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getAttenuationConstant.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getAttenuationConstant" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (float)(arg1)->getAttenuationConstant();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getAttenuationLinear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getAttenuationLinear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getAttenuationLinear" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (float)(arg1)->getAttenuationLinear();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getAttenuationQuadratic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getAttenuationQuadratic.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getAttenuationQuadratic" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (float)(arg1)->getAttenuationQuadratic();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getType" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (int)(arg1)->getType();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setAmbientColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  ofFloatColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_setAmbientColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setAmbientColor" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofLight_setAmbientColor" "', argument " "2"" of type '" "ofFloatColor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLight_setAmbientColor" "', argument " "2"" of type '" "ofFloatColor const &""'"); 
  }
  arg2 = (ofFloatColor *)(argp2);
  (arg1)->setAmbientColor((ofFloatColor const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setDiffuseColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  ofFloatColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_setDiffuseColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setDiffuseColor" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofLight_setDiffuseColor" "', argument " "2"" of type '" "ofFloatColor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLight_setDiffuseColor" "', argument " "2"" of type '" "ofFloatColor const &""'"); 
  }
  arg2 = (ofFloatColor *)(argp2);
  (arg1)->setDiffuseColor((ofFloatColor const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_setSpecularColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  ofFloatColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_setSpecularColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_setSpecularColor" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofLight_setSpecularColor" "', argument " "2"" of type '" "ofFloatColor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLight_setSpecularColor" "', argument " "2"" of type '" "ofFloatColor const &""'"); 
  }
  arg2 = (ofFloatColor *)(argp2);
  (arg1)->setSpecularColor((ofFloatColor const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getAmbientColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofFloatColor result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getAmbientColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getAmbientColor" "', argument " "1"" of type '" "ofLight const *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = ((ofLight const *)arg1)->getAmbientColor();
  jsresult = SWIG_NewPointerObj((new ofFloatColor((const ofFloatColor&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getDiffuseColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofFloatColor result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getDiffuseColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getDiffuseColor" "', argument " "1"" of type '" "ofLight const *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = ((ofLight const *)arg1)->getDiffuseColor();
  jsresult = SWIG_NewPointerObj((new ofFloatColor((const ofFloatColor&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getSpecularColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofFloatColor result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getSpecularColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getSpecularColor" "', argument " "1"" of type '" "ofLight const *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = ((ofLight const *)arg1)->getSpecularColor();
  jsresult = SWIG_NewPointerObj((new ofFloatColor((const ofFloatColor&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_getLightID(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_getLightID.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_getLightID" "', argument " "1"" of type '" "ofLight const *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  result = (int)((ofLight const *)arg1)->getLightID();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLight_customDraw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLight *arg1 = (ofLight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLight_customDraw.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofLight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLight_customDraw" "', argument " "1"" of type '" "ofLight *""'"); 
  }
  arg1 = (ofLight *)(argp1);
  (arg1)->customDraw();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMaterial(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofMaterial *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMaterial.");  
  result = (ofMaterial *)new ofMaterial();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMaterial, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_setColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ;
  ofFloatColor arg3 ;
  ofFloatColor arg4 ;
  ofFloatColor arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_setColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_setColors" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMaterial_setColors" "', argument " "2"" of type '" "ofFloatColor""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMaterial_setColors" "', argument " "2"" of type '" "ofFloatColor""'");
    } else {
      arg2 = *((ofFloatColor *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMaterial_setColors" "', argument " "3"" of type '" "ofFloatColor""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMaterial_setColors" "', argument " "3"" of type '" "ofFloatColor""'");
    } else {
      arg3 = *((ofFloatColor *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMaterial_setColors" "', argument " "4"" of type '" "ofFloatColor""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMaterial_setColors" "', argument " "4"" of type '" "ofFloatColor""'");
    } else {
      arg4 = *((ofFloatColor *)(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofMaterial_setColors" "', argument " "5"" of type '" "ofFloatColor""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMaterial_setColors" "', argument " "5"" of type '" "ofFloatColor""'");
    } else {
      arg5 = *((ofFloatColor *)(argp5));
    }
  }
  (arg1)->setColors(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_setDiffuseColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_setDiffuseColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_setDiffuseColor" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMaterial_setDiffuseColor" "', argument " "2"" of type '" "ofFloatColor""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMaterial_setDiffuseColor" "', argument " "2"" of type '" "ofFloatColor""'");
    } else {
      arg2 = *((ofFloatColor *)(argp2));
    }
  }
  (arg1)->setDiffuseColor(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_setAmbientColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_setAmbientColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_setAmbientColor" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMaterial_setAmbientColor" "', argument " "2"" of type '" "ofFloatColor""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMaterial_setAmbientColor" "', argument " "2"" of type '" "ofFloatColor""'");
    } else {
      arg2 = *((ofFloatColor *)(argp2));
    }
  }
  (arg1)->setAmbientColor(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_setSpecularColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_setSpecularColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_setSpecularColor" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMaterial_setSpecularColor" "', argument " "2"" of type '" "ofFloatColor""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMaterial_setSpecularColor" "', argument " "2"" of type '" "ofFloatColor""'");
    } else {
      arg2 = *((ofFloatColor *)(argp2));
    }
  }
  (arg1)->setSpecularColor(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_setEmissiveColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_setEmissiveColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_setEmissiveColor" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_float_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMaterial_setEmissiveColor" "', argument " "2"" of type '" "ofFloatColor""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMaterial_setEmissiveColor" "', argument " "2"" of type '" "ofFloatColor""'");
    } else {
      arg2 = *((ofFloatColor *)(argp2));
    }
  }
  (arg1)->setEmissiveColor(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_setShininess(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_setShininess.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_setShininess" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMaterial_setShininess" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setShininess(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_getDiffuseColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofFloatColor result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_getDiffuseColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_getDiffuseColor" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  result = (arg1)->getDiffuseColor();
  jsresult = SWIG_NewPointerObj((new ofFloatColor((const ofFloatColor&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_getAmbientColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofFloatColor result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_getAmbientColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_getAmbientColor" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  result = (arg1)->getAmbientColor();
  jsresult = SWIG_NewPointerObj((new ofFloatColor((const ofFloatColor&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_getSpecularColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofFloatColor result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_getSpecularColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_getSpecularColor" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  result = (arg1)->getSpecularColor();
  jsresult = SWIG_NewPointerObj((new ofFloatColor((const ofFloatColor&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_getEmissiveColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofFloatColor result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_getEmissiveColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_getEmissiveColor" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  result = (arg1)->getEmissiveColor();
  jsresult = SWIG_NewPointerObj((new ofFloatColor((const ofFloatColor&)(result))), SWIGTYPE_p_ofColor_T_float_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_getShininess(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_getShininess.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_getShininess" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  result = (float)(arg1)->getShininess();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_begin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_begin.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_begin" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  (arg1)->begin();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMaterial_end_(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMaterial *arg1 = (ofMaterial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMaterial_end_.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMaterial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMaterial_end_" "', argument " "1"" of type '" "ofMaterial *""'"); 
  }
  arg1 = (ofMaterial *)(argp1);
  (arg1)->end();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofMaterial(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofMaterial(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofMaterial *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofShader(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofShader *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofShader.");  
  result = (ofShader *)new ofShader();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofShader, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofShader(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofShader(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofShader *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofShader_load__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_load" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->load(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_load__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  std::string *tmp3 ;
  std::string *tmp4 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_load" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  
  tmp3 = SWIGV8_valueToStringPtr(args[1]);
  arg3 = *tmp3;
  if (tmp3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp3) delete tmp3;
  
  
  tmp4 = SWIGV8_valueToStringPtr(args[2]);
  arg4 = *tmp4;
  if (tmp4 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp4) delete tmp4;
  
  result = (bool)(arg1)->load(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_load__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  std::string *tmp3 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_load" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  
  tmp3 = SWIGV8_valueToStringPtr(args[1]);
  arg3 = *tmp3;
  if (tmp3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp3) delete tmp3;
  
  result = (bool)(arg1)->load(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_load(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_load__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_load__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_load__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function load.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setGeometryInputType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLenum arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setGeometryInputType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setGeometryInputType" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLenum,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setGeometryInputType" "', argument " "2"" of type '" "GLenum""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setGeometryInputType" "', argument " "2"" of type '" "GLenum""'");
    } else {
      arg2 = *((GLenum *)(argp2));
    }
  }
  (arg1)->setGeometryInputType(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setGeometryOutputType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLenum arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setGeometryOutputType.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setGeometryOutputType" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLenum,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setGeometryOutputType" "', argument " "2"" of type '" "GLenum""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setGeometryOutputType" "', argument " "2"" of type '" "GLenum""'");
    } else {
      arg2 = *((GLenum *)(argp2));
    }
  }
  (arg1)->setGeometryOutputType(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setGeometryOutputCount(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setGeometryOutputCount.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setGeometryOutputCount" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofShader_setGeometryOutputCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setGeometryOutputCount(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_getGeometryMaxOutputCount(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_getGeometryMaxOutputCount.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_getGeometryMaxOutputCount" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  result = (int)(arg1)->getGeometryMaxOutputCount();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_unload(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_unload.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_unload" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  (arg1)->unload();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_begin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_begin.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_begin" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  (arg1)->begin();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_end_(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_end_.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_end_" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  (arg1)->end();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniformTexture__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  ofBaseHasTexture *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniformTexture" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniformTexture" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofBaseHasTexture,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniformTexture" "', argument " "3"" of type '" "ofBaseHasTexture &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setUniformTexture" "', argument " "3"" of type '" "ofBaseHasTexture &""'"); 
  }
  arg3 = (ofBaseHasTexture *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniformTexture" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniformTexture((char const *)arg2,*arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniformTexture__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  ofTexture *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniformTexture" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniformTexture" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofTexture,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniformTexture" "', argument " "3"" of type '" "ofTexture &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setUniformTexture" "', argument " "3"" of type '" "ofTexture &""'"); 
  }
  arg3 = (ofTexture *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniformTexture" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniformTexture((char const *)arg2,*arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniformTexture__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  GLint arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniformTexture" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniformTexture" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setUniformTexture" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofShader_setUniformTexture" "', argument " "4"" of type '" "GLint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setUniformTexture" "', argument " "4"" of type '" "GLint""'");
    } else {
      arg4 = *((GLint *)(argp4));
    }
  }
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setUniformTexture" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setUniformTexture((char const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniformTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniformTexture__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniformTexture__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniformTexture__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setUniformTexture.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform1i(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setUniform1i.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform1i" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform1i" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setUniform1i" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->setUniform1i((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform2i(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setUniform2i.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform2i" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform2i" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setUniform2i" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform2i" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniform2i((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform3i(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setUniform3i.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform3i" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform3i" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setUniform3i" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform3i" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setUniform3i" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setUniform3i((char const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform4i(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setUniform4i.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform4i" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform4i" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setUniform4i" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform4i" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setUniform4i" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShader_setUniform4i" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->setUniform4i((char const *)arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform1f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setUniform1f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform1f" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform1f" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setUniform1f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setUniform1f((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform2f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setUniform2f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform2f" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform2f" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setUniform2f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform2f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setUniform2f((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform3f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setUniform3f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform3f" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform3f" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setUniform3f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform3f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setUniform3f" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->setUniform3f((char const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform4f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setUniform4f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform4f" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform4f" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setUniform4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform4f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setUniform4f" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShader_setUniform4f" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->setUniform4f((char const *)arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform1iv__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform1iv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform1iv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform1iv" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = (int *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform1iv" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniform1iv((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform1iv__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform1iv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform1iv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform1iv" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = (int *)(argp3);
  (arg1)->setUniform1iv((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform1iv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform1iv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform1iv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setUniform1iv.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform2iv__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform2iv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform2iv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform2iv" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = (int *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform2iv" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniform2iv((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform2iv__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform2iv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform2iv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform2iv" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = (int *)(argp3);
  (arg1)->setUniform2iv((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform2iv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform2iv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform2iv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setUniform2iv.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform3iv__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform3iv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform3iv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform3iv" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = (int *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform3iv" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniform3iv((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform3iv__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform3iv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform3iv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform3iv" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = (int *)(argp3);
  (arg1)->setUniform3iv((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform3iv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform3iv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform3iv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setUniform3iv.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform4iv__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform4iv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform4iv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform4iv" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = (int *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform4iv" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniform4iv((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform4iv__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform4iv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform4iv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform4iv" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = (int *)(argp3);
  (arg1)->setUniform4iv((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform4iv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform4iv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform4iv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setUniform4iv.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform1fv__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform1fv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform1fv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform1fv" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform1fv" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniform1fv((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform1fv__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform1fv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform1fv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform1fv" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  (arg1)->setUniform1fv((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform1fv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform1fv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform1fv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setUniform1fv.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform2fv__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform2fv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform2fv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform2fv" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform2fv" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniform2fv((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform2fv__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform2fv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform2fv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform2fv" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  (arg1)->setUniform2fv((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform2fv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform2fv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform2fv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setUniform2fv.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform3fv__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform3fv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform3fv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform3fv" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform3fv" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniform3fv((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform3fv__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform3fv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform3fv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform3fv" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  (arg1)->setUniform3fv((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform3fv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform3fv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform3fv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setUniform3fv.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform4fv__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform4fv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform4fv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform4fv" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setUniform4fv" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setUniform4fv((char const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform4fv__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniform4fv" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniform4fv" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniform4fv" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  (arg1)->setUniform4fv((char const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofShader_setUniform4fv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform4fv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofShader_setUniform4fv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setUniform4fv.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setUniformMatrix4f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  ofMatrix4x4 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setUniformMatrix4f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setUniformMatrix4f" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setUniformMatrix4f" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofShader_setUniformMatrix4f" "', argument " "3"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setUniformMatrix4f" "', argument " "3"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg3 = (ofMatrix4x4 *)(argp3);
  (arg1)->setUniformMatrix4f((char const *)arg2,(ofMatrix4x4 const &)*arg3);
  jsresult = v8::Undefined();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_getAttributeLocation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  GLint result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_getAttributeLocation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_getAttributeLocation" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_getAttributeLocation" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (arg1)->getAttributeLocation((char const *)arg2);
  jsresult = SWIG_NewPointerObj((new GLint((const GLint&)(result))), SWIGTYPE_p_GLint, SWIG_POINTER_OWN |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute1s(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute1s.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute1s" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute1s" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute1s" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_short(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute1s" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = (short)(val3);
  (arg1)->setAttribute1s(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute2s(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  short arg3 ;
  short arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute2s.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute2s" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute2s" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute2s" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_short(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute2s" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = (short)(val3);
  ecode4 = SWIG_AsVal_short(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setAttribute2s" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = (short)(val4);
  (arg1)->setAttribute2s(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute3s(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  short arg3 ;
  short arg4 ;
  short arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute3s.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute3s" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute3s" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute3s" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_short(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute3s" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = (short)(val3);
  ecode4 = SWIG_AsVal_short(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setAttribute3s" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = (short)(val4);
  ecode5 = SWIG_AsVal_short(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setAttribute3s" "', argument " "5"" of type '" "short""'");
  } 
  arg5 = (short)(val5);
  (arg1)->setAttribute3s(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute4s(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  short arg3 ;
  short arg4 ;
  short arg5 ;
  short arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute4s.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute4s" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute4s" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute4s" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_short(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute4s" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = (short)(val3);
  ecode4 = SWIG_AsVal_short(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setAttribute4s" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = (short)(val4);
  ecode5 = SWIG_AsVal_short(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setAttribute4s" "', argument " "5"" of type '" "short""'");
  } 
  arg5 = (short)(val5);
  ecode6 = SWIG_AsVal_short(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShader_setAttribute4s" "', argument " "6"" of type '" "short""'");
  } 
  arg6 = (short)(val6);
  (arg1)->setAttribute4s(arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute1f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute1f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute1f" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute1f" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute1f" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute1f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAttribute1f(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute2f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute2f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute2f" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute2f" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute2f" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute2f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setAttribute2f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setAttribute2f(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute3f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute3f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute3f" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute3f" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute3f" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute3f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setAttribute3f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setAttribute3f" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->setAttribute3f(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute4f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute4f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute4f" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute4f" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute4f" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setAttribute4f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setAttribute4f" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShader_setAttribute4f" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->setAttribute4f(arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute1d(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute1d.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute1d" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute1d" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute1d" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute1d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  (arg1)->setAttribute1d(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute2d(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute2d.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute2d" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute2d" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute2d" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute2d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setAttribute2d" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  (arg1)->setAttribute2d(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute3d(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute3d.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute3d" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute3d" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute3d" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute3d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setAttribute3d" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ecode5 = SWIG_AsVal_double(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setAttribute3d" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  (arg1)->setAttribute3d(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setAttribute4d(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLint arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setAttribute4d.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setAttribute4d" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setAttribute4d" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setAttribute4d" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofShader_setAttribute4d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofShader_setAttribute4d" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ecode5 = SWIG_AsVal_double(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofShader_setAttribute4d" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  ecode6 = SWIG_AsVal_double(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofShader_setAttribute4d" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = (double)(val6);
  (arg1)->setAttribute4d(arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_printActiveUniforms(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_printActiveUniforms.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_printActiveUniforms" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  (arg1)->printActiveUniforms();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_printActiveAttributes(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_printActiveAttributes.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_printActiveAttributes" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  (arg1)->printActiveAttributes();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setupShaderFromSource(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLenum arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::string *tmp3 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setupShaderFromSource.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setupShaderFromSource" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLenum,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setupShaderFromSource" "', argument " "2"" of type '" "GLenum""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setupShaderFromSource" "', argument " "2"" of type '" "GLenum""'");
    } else {
      arg2 = *((GLenum *)(argp2));
    }
  }
  
  tmp3 = SWIGV8_valueToStringPtr(args[1]);
  arg3 = *tmp3;
  if (tmp3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp3) delete tmp3;
  
  result = (bool)(arg1)->setupShaderFromSource(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_setupShaderFromFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLenum arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::string *tmp3 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_setupShaderFromFile.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_setupShaderFromFile" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLenum,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_setupShaderFromFile" "', argument " "2"" of type '" "GLenum""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_setupShaderFromFile" "', argument " "2"" of type '" "GLenum""'");
    } else {
      arg2 = *((GLenum *)(argp2));
    }
  }
  
  tmp3 = SWIGV8_valueToStringPtr(args[1]);
  arg3 = *tmp3;
  if (tmp3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp3) delete tmp3;
  
  result = (bool)(arg1)->setupShaderFromFile(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_linkProgram(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_linkProgram.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_linkProgram" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  result = (bool)(arg1)->linkProgram();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_getProgram(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GLuint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_getProgram.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_getProgram" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  result = (GLuint *) &(arg1)->getProgram();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GLuint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofShader_getShader(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofShader *arg1 = (ofShader *) 0 ;
  GLenum arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  GLuint *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofShader_getShader.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofShader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofShader_getShader" "', argument " "1"" of type '" "ofShader *""'"); 
  }
  arg1 = (ofShader *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLenum,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofShader_getShader" "', argument " "2"" of type '" "GLenum""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofShader_getShader" "', argument " "2"" of type '" "GLenum""'");
    } else {
      arg2 = *((GLenum *)(argp2));
    }
  }
  result = (GLuint *) &(arg1)->getShader(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GLuint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetGlInternalFormat__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPixels *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofGetGlInternalFormat" "', argument " "1"" of type '" "ofPixels const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofGetGlInternalFormat" "', argument " "1"" of type '" "ofPixels const &""'"); 
  }
  arg1 = (ofPixels *)(argp1);
  result = (int)ofGetGlInternalFormat((ofPixels_< unsigned char > const &)*arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofGetGlInternalFormat__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofShortPixels *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofGetGlInternalFormat" "', argument " "1"" of type '" "ofShortPixels const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofGetGlInternalFormat" "', argument " "1"" of type '" "ofShortPixels const &""'"); 
  }
  arg1 = (ofShortPixels *)(argp1);
  result = (int)ofGetGlInternalFormat((ofPixels_< unsigned short > const &)*arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofGetGlInternalFormat__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFloatPixels *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofGetGlInternalFormat" "', argument " "1"" of type '" "ofFloatPixels const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofGetGlInternalFormat" "', argument " "1"" of type '" "ofFloatPixels const &""'"); 
  }
  arg1 = (ofFloatPixels *)(argp1);
  result = (int)ofGetGlInternalFormat((ofPixels_< float > const &)*arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofGetGlInternalFormat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofGetGlInternalFormat__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofGetGlInternalFormat__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofGetGlInternalFormat__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofGetGlInternalFormat.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetGlFormatAndType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetGlFormatAndType.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofGetGlFormatAndType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofGetGlFormatAndType" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofGetGlFormatAndType" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = (int *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofGetGlFormatAndType" "', argument " "3"" of type '" "int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofGetGlFormatAndType" "', argument " "3"" of type '" "int &""'"); 
  }
  arg3 = (int *)(argp3);
  ofGetGlFormatAndType(arg1,*arg2,*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetImageTypeFromGLType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  ofImageType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetImageTypeFromGLType.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofGetImageTypeFromGLType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (ofImageType)ofGetImageTypeFromGLType(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetUsingArbTex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetUsingArbTex.");  
  
  result = (bool)ofGetUsingArbTex();
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEnableArbTex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnableArbTex.");  
  
  ofEnableArbTex();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisableArbTex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisableArbTex.");  
  
  ofDisableArbTex();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetUsingNormalizedTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetUsingNormalizedTexCoords.");  
  
  result = (bool)ofGetUsingNormalizedTexCoords();
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEnableNormalizedTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnableNormalizedTexCoords.");  
  
  ofEnableNormalizedTexCoords();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisableNormalizedTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisableNormalizedTexCoords.");  
  
  ofDisableNormalizedTexCoords();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetTextureWrap__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  GLfloat arg1 ;
  GLfloat arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_GLfloat,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetTextureWrap" "', argument " "1"" of type '" "GLfloat""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetTextureWrap" "', argument " "1"" of type '" "GLfloat""'");
    } else {
      arg1 = *((GLfloat *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_GLfloat,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSetTextureWrap" "', argument " "2"" of type '" "GLfloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetTextureWrap" "', argument " "2"" of type '" "GLfloat""'");
    } else {
      arg2 = *((GLfloat *)(argp2));
    }
  }
  ofSetTextureWrap(arg1,arg2);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetTextureWrap__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  GLfloat arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_GLfloat,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetTextureWrap" "', argument " "1"" of type '" "GLfloat""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetTextureWrap" "', argument " "1"" of type '" "GLfloat""'");
    } else {
      arg1 = *((GLfloat *)(argp1));
    }
  }
  ofSetTextureWrap(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetTextureWrap__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofSetTextureWrap();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSetTextureWrap(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetTextureWrap__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetTextureWrap__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetTextureWrap__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSetTextureWrap.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetUsingCustomTextureWrap(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetUsingCustomTextureWrap.");  
  
  result = (bool)ofGetUsingCustomTextureWrap();
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRestoreTextureWrap(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRestoreTextureWrap.");  
  
  ofRestoreTextureWrap();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetMinMagFilters__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  GLfloat arg1 ;
  GLfloat arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_GLfloat,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetMinMagFilters" "', argument " "1"" of type '" "GLfloat""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetMinMagFilters" "', argument " "1"" of type '" "GLfloat""'");
    } else {
      arg1 = *((GLfloat *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_GLfloat,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSetMinMagFilters" "', argument " "2"" of type '" "GLfloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetMinMagFilters" "', argument " "2"" of type '" "GLfloat""'");
    } else {
      arg2 = *((GLfloat *)(argp2));
    }
  }
  ofSetMinMagFilters(arg1,arg2);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetMinMagFilters__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  GLfloat arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_GLfloat,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetMinMagFilters" "', argument " "1"" of type '" "GLfloat""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetMinMagFilters" "', argument " "1"" of type '" "GLfloat""'");
    } else {
      arg1 = *((GLfloat *)(argp1));
    }
  }
  ofSetMinMagFilters(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetMinMagFilters__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofSetMinMagFilters();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSetMinMagFilters(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetMinMagFilters__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetMinMagFilters__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetMinMagFilters__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSetMinMagFilters.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetUsingCustomMinMagFilters(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetUsingCustomMinMagFilters.");  
  
  result = (bool)ofGetUsingCustomMinMagFilters();
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRestoreMinMagFilters(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRestoreMinMagFilters.");  
  
  ofRestoreMinMagFilters();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_COMPRESS_NONE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_COMPRESS_NONE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_COMPRESS_SRGB(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_COMPRESS_SRGB));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_COMPRESS_ARB(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_COMPRESS_ARB));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofTextureData(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofTextureData *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofTextureData.");  
  result = (ofTextureData *)new ofTextureData();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofTextureData, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_textureID_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_textureID_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_textureID_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->textureID = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_textureID_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_textureID_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (unsigned int) ((arg1)->textureID);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_textureTarget_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_textureTarget_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_textureTarget_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->textureTarget = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_textureTarget_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_textureTarget_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (int) ((arg1)->textureTarget);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_glTypeInternal_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_glTypeInternal_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_glTypeInternal_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->glTypeInternal = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_glTypeInternal_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_glTypeInternal_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (int) ((arg1)->glTypeInternal);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_glType_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_glType_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_glType_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->glType = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_glType_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_glType_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (int) ((arg1)->glType);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_pixelType_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_pixelType_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_pixelType_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->pixelType = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_pixelType_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_pixelType_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (int) ((arg1)->pixelType);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_tex_t_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_tex_t_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_tex_t_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->tex_t = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_tex_t_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_tex_t_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (float) ((arg1)->tex_t);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_tex_u_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_tex_u_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_tex_u_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->tex_u = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_tex_u_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_tex_u_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (float) ((arg1)->tex_u);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_tex_w_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_tex_w_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_tex_w_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->tex_w = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_tex_w_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_tex_w_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (float) ((arg1)->tex_w);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_tex_h_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_tex_h_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_tex_h_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->tex_h = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_tex_h_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_tex_h_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (float) ((arg1)->tex_h);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_width_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_width_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_width_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (float) ((arg1)->width);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_height_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_height_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_height_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (float) ((arg1)->height);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_bFlipTexture_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_bFlipTexture_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_bFlipTexture_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->bFlipTexture = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_bFlipTexture_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_bFlipTexture_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (bool) ((arg1)->bFlipTexture);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_compressionType_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  ofTexCompression arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_compressionType_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_compressionType_set" "', argument " "2"" of type '" "ofTexCompression""'");
  } 
  arg2 = (ofTexCompression)(val2);
  if (arg1) (arg1)->compressionType = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_compressionType_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTexCompression result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_compressionType_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (ofTexCompression) ((arg1)->compressionType);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_bAllocated_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_bAllocated_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_bAllocated_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->bAllocated = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_bAllocated_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_bAllocated_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (bool) ((arg1)->bAllocated);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTextureData_bUseExternalTextureID_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_bUseExternalTextureID_set" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTextureData_bUseExternalTextureID_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->bUseExternalTextureID = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTextureData_bUseExternalTextureID_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTextureData *arg1 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTextureData_bUseExternalTextureID_get" "', argument " "1"" of type '" "ofTextureData *""'"); 
  }
  arg1 = (ofTextureData *)(argp1);
  result = (bool) ((arg1)->bUseExternalTextureID);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofTextureData(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofTextureData(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofTextureData *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofEnableTextureEdgeHack(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnableTextureEdgeHack.");  
  
  ofEnableTextureEdgeHack();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisableTextureEdgeHack(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisableTextureEdgeHack.");  
  
  ofDisableTextureEdgeHack();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofTexture__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofTexture *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofTexture__SWIG_0.");  
  result = (ofTexture *)new ofTexture();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofTexture, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofTexture__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofTexture *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofTexture *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofTexture__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofTexture,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofTexture" "', argument " "1"" of type '" "ofTexture const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofTexture" "', argument " "1"" of type '" "ofTexture const &""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  result = (ofTexture *)new ofTexture((ofTexture const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofTexture, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofTexture(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofTexture__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofTexture__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofTexture");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofTexture(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofTexture(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofTexture *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofTexture_allocate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_allocate" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofTextureData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_allocate" "', argument " "2"" of type '" "ofTextureData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_allocate" "', argument " "2"" of type '" "ofTextureData const &""'"); 
  }
  arg2 = (ofTextureData *)(argp2);
  (arg1)->allocate((ofTextureData const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_allocate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_allocate" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_allocate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->allocate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_allocate__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_allocate" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_allocate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_allocate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_allocate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_allocate" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  (arg1)->allocate(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_allocate__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_allocate" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_allocate" "', argument " "2"" of type '" "ofPixels const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_allocate" "', argument " "2"" of type '" "ofPixels const &""'"); 
  }
  arg2 = (ofPixels *)(argp2);
  (arg1)->allocate((ofPixels const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_allocate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_allocate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_allocate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_allocate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_allocate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function allocate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_clear" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_setUseExternalTextureID(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  GLuint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_setUseExternalTextureID.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_setUseExternalTextureID" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLuint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_setUseExternalTextureID" "', argument " "2"" of type '" "GLuint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_setUseExternalTextureID" "', argument " "2"" of type '" "GLuint""'");
    } else {
      arg2 = *((GLuint *)(argp2));
    }
  }
  (arg1)->setUseExternalTextureID(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_loadData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_loadData" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_loadData" "', argument " "2"" of type '" "unsigned char const *const""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_loadData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_loadData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_loadData" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->loadData((unsigned char const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_loadData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_loadData" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_loadData" "', argument " "2"" of type '" "unsigned short const *""'"); 
  }
  arg2 = (unsigned short *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_loadData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_loadData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_loadData" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->loadData((unsigned short const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_loadData__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_loadData" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_loadData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_loadData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_loadData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_loadData" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->loadData((float const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_loadData__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_loadData" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_loadData" "', argument " "2"" of type '" "ofPixels const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_loadData" "', argument " "2"" of type '" "ofPixels const &""'"); 
  }
  arg2 = (ofPixels *)(argp2);
  (arg1)->loadData((ofPixels const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_loadData__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_loadData" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_loadData" "', argument " "2"" of type '" "ofShortPixels const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_loadData" "', argument " "2"" of type '" "ofShortPixels const &""'"); 
  }
  arg2 = (ofShortPixels *)(argp2);
  (arg1)->loadData((ofShortPixels const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_loadData__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_loadData" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_loadData" "', argument " "2"" of type '" "ofFloatPixels const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_loadData" "', argument " "2"" of type '" "ofFloatPixels const &""'"); 
  }
  arg2 = (ofFloatPixels *)(argp2);
  (arg1)->loadData((ofFloatPixels const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_loadData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_loadData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_loadData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_loadData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_loadData__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_loadData__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_loadData__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function loadData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_loadScreenData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_loadScreenData.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_loadScreenData" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_loadScreenData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_loadScreenData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_loadScreenData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_loadScreenData" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->loadScreenData(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_setAnchorPercent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_setAnchorPercent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_setAnchorPercent" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_setAnchorPercent" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_setAnchorPercent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPercent(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_setAnchorPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_setAnchorPoint.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_setAnchorPoint" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_setAnchorPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_setAnchorPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPoint(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_resetAnchor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_resetAnchor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_resetAnchor" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  (arg1)->resetAnchor();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_draw__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ;
  ofPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_draw" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_draw" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_draw" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofTexture_draw" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_draw" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofTexture_draw" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_draw" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  arg4 = (ofPoint *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofTexture_draw" "', argument " "5"" of type '" "ofPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_draw" "', argument " "5"" of type '" "ofPoint const &""'"); 
  }
  arg5 = (ofPoint *)(argp5);
  (arg1)->draw((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,(ofPoint const &)*arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_draw__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_draw" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->draw(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_draw__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_draw" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->draw(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_draw__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_draw" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->draw(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_draw__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_draw" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTexture_draw" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->draw(arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_draw__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_draw__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_draw__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_draw__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_draw__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function draw.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_drawSubsection__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_drawSubsection" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTexture_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofTexture_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_drawSubsection__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_drawSubsection" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTexture_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofTexture_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofTexture_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_drawSubsection__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_drawSubsection" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTexture_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofTexture_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofTexture_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofTexture_drawSubsection" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_drawSubsection__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_drawSubsection" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_drawSubsection" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_drawSubsection" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTexture_drawSubsection" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTexture_drawSubsection" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTexture_drawSubsection" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofTexture_drawSubsection" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofTexture_drawSubsection" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofTexture_drawSubsection" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofTexture_drawSubsection" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_drawSubsection(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_drawSubsection__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_drawSubsection__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_drawSubsection__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_drawSubsection__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawSubsection.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_readToPixels__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_readToPixels" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_readToPixels" "', argument " "2"" of type '" "ofPixels &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_readToPixels" "', argument " "2"" of type '" "ofPixels &""'"); 
  }
  arg2 = (ofPixels *)(argp2);
  (arg1)->readToPixels(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_readToPixels__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_readToPixels" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_readToPixels" "', argument " "2"" of type '" "ofShortPixels &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_readToPixels" "', argument " "2"" of type '" "ofShortPixels &""'"); 
  }
  arg2 = (ofShortPixels *)(argp2);
  (arg1)->readToPixels(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_readToPixels__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_readToPixels" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPixels_T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_readToPixels" "', argument " "2"" of type '" "ofFloatPixels &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_readToPixels" "', argument " "2"" of type '" "ofFloatPixels &""'"); 
  }
  arg2 = (ofFloatPixels *)(argp2);
  (arg1)->readToPixels(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_readToPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_readToPixels__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_readToPixels__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_readToPixels__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function readToPixels.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_bind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_bind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_bind" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  (arg1)->bind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_unbind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_unbind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_unbind" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  (arg1)->unbind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_getCoordFromPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofPoint result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_getCoordFromPoint.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_getCoordFromPoint" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_getCoordFromPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_getCoordFromPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (arg1)->getCoordFromPoint(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_getCoordFromPercent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofPoint result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_getCoordFromPercent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_getCoordFromPercent" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_getCoordFromPercent" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTexture_getCoordFromPercent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (arg1)->getCoordFromPercent(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_setTextureWrap(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  GLint arg2 ;
  GLint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_setTextureWrap.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_setTextureWrap" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_setTextureWrap" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_setTextureWrap" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofTexture_setTextureWrap" "', argument " "3"" of type '" "GLint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_setTextureWrap" "', argument " "3"" of type '" "GLint""'");
    } else {
      arg3 = *((GLint *)(argp3));
    }
  }
  (arg1)->setTextureWrap(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_setTextureMinMagFilter(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  GLint arg2 ;
  GLint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_setTextureMinMagFilter.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_setTextureMinMagFilter" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_setTextureMinMagFilter" "', argument " "2"" of type '" "GLint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_setTextureMinMagFilter" "', argument " "2"" of type '" "GLint""'");
    } else {
      arg2 = *((GLint *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_GLint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofTexture_setTextureMinMagFilter" "', argument " "3"" of type '" "GLint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTexture_setTextureMinMagFilter" "', argument " "3"" of type '" "GLint""'");
    } else {
      arg3 = *((GLint *)(argp3));
    }
  }
  (arg1)->setTextureMinMagFilter(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_setCompression(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofTexCompression arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_setCompression.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_setCompression" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTexture_setCompression" "', argument " "2"" of type '" "ofTexCompression""'");
  } 
  arg2 = (ofTexCompression)(val2);
  (arg1)->setCompression(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_bAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_bAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_bAllocated" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  result = (bool)(arg1)->bAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_isAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_isAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_isAllocated" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  result = (bool)(arg1)->isAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_getTextureData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTextureData *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_getTextureData" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  result = (ofTextureData *) &(arg1)->getTextureData();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTextureData, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_getTextureData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTextureData *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_getTextureData" "', argument " "1"" of type '" "ofTexture const *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  result = (ofTextureData *) &((ofTexture const *)arg1)->getTextureData();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTextureData, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTexture_getTextureData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_getTextureData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTexture_getTextureData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getTextureData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofTexture_texData_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *arg2 = (ofTextureData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_texData_set" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofTextureData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTexture_texData_set" "', argument " "2"" of type '" "ofTextureData *""'"); 
  }
  arg2 = (ofTextureData *)(argp2);
  if (arg1) (arg1)->texData = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofTexture_texData_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTextureData *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_texData_get" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  result = (ofTextureData *)& ((arg1)->texData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTextureData, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_getHeight" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  result = (float)(arg1)->getHeight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTexture_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTexture *arg1 = (ofTexture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTexture_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTexture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTexture_getWidth" "', argument " "1"" of type '" "ofTexture *""'"); 
  }
  arg1 = (ofTexture *)(argp1);
  result = (float)(arg1)->getWidth();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVbo__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVbo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVbo__SWIG_0.");  
  result = (ofVbo *)new ofVbo();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVbo, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVbo__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVbo *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofVbo *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVbo__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVbo,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofVbo" "', argument " "1"" of type '" "ofVbo const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofVbo" "', argument " "1"" of type '" "ofVbo const &""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (ofVbo *)new ofVbo((ofVbo const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVbo, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVbo(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVbo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVbo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofVbo");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofVbo(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofVbo(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofVbo *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofVbo_setMesh(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofMesh *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_setMesh.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setMesh" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setMesh" "', argument " "2"" of type '" "ofMesh const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVbo_setMesh" "', argument " "2"" of type '" "ofMesh const &""'"); 
  }
  arg2 = (ofMesh *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setMesh" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->setMesh((ofMesh const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_setVertexData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setVertexData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setVertexData" "', argument " "2"" of type '" "ofVec3f const *""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setVertexData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setVertexData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setVertexData((ofVec3f const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setVertexData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setVertexData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setVertexData" "', argument " "2"" of type '" "ofVec2f const *""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setVertexData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setVertexData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setVertexData((ofVec2f const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setColorData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofFloatColor *arg2 = (ofFloatColor *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setColorData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setColorData" "', argument " "2"" of type '" "ofFloatColor const *""'"); 
  }
  arg2 = (ofFloatColor *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setColorData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setColorData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setColorData((ofFloatColor const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setNormalData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setNormalData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setNormalData" "', argument " "2"" of type '" "ofVec3f const *""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setNormalData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setNormalData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setNormalData((ofVec3f const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setTexCoordData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setTexCoordData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setTexCoordData" "', argument " "2"" of type '" "ofVec2f const *""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setTexCoordData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setTexCoordData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setTexCoordData((ofVec2f const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setIndexData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofIndexType *arg2 = (ofIndexType *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_setIndexData.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setIndexData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_TESSindex, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setIndexData" "', argument " "2"" of type '" "ofIndexType const *""'"); 
  }
  arg2 = (ofIndexType *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setIndexData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setIndexData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setIndexData((ofIndexType const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_setVertexData__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setVertexData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setVertexData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setVertexData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setVertexData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofVbo_setVertexData" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofVbo_setVertexData" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  (arg1)->setVertexData((float const *)arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setVertexData__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setVertexData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setVertexData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setVertexData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setVertexData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofVbo_setVertexData" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setVertexData((float const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setVertexData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setVertexData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setVertexData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setVertexData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setVertexData__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setVertexData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_setColorData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setColorData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setColorData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setColorData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setColorData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofVbo_setColorData" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setColorData((float const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setColorData__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setColorData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setColorData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setColorData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setColorData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setColorData((float const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setColorData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setColorData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setColorData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setColorData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setColorData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_setNormalData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setNormalData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setNormalData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setNormalData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setNormalData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofVbo_setNormalData" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setNormalData((float const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setNormalData__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setNormalData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setNormalData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setNormalData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setNormalData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setNormalData((float const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setNormalData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setNormalData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setNormalData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setNormalData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setNormalData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_setTexCoordData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setTexCoordData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setTexCoordData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setTexCoordData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setTexCoordData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofVbo_setTexCoordData" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->setTexCoordData((float const *)arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setTexCoordData__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_setTexCoordData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_setTexCoordData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_setTexCoordData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_setTexCoordData" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->setTexCoordData((float const *)arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_setTexCoordData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setTexCoordData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setTexCoordData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_setTexCoordData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setTexCoordData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_updateMesh(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofMesh *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_updateMesh.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateMesh" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateMesh" "', argument " "2"" of type '" "ofMesh const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVbo_updateMesh" "', argument " "2"" of type '" "ofMesh const &""'"); 
  }
  arg2 = (ofMesh *)(argp2);
  (arg1)->updateMesh((ofMesh const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_updateVertexData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateVertexData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateVertexData" "', argument " "2"" of type '" "ofVec3f const *""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateVertexData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateVertexData((ofVec3f const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_updateVertexData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateVertexData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateVertexData" "', argument " "2"" of type '" "ofVec2f const *""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateVertexData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateVertexData((ofVec2f const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_updateColorData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofFloatColor *arg2 = (ofFloatColor *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateColorData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofColor_T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateColorData" "', argument " "2"" of type '" "ofFloatColor const *""'"); 
  }
  arg2 = (ofFloatColor *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateColorData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateColorData((ofFloatColor const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_updateNormalData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateNormalData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateNormalData" "', argument " "2"" of type '" "ofVec3f const *""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateNormalData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateNormalData((ofVec3f const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_updateTexCoordData__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateTexCoordData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateTexCoordData" "', argument " "2"" of type '" "ofVec2f const *""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateTexCoordData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateTexCoordData((ofVec2f const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_updateIndexData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  ofIndexType *arg2 = (ofIndexType *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_updateIndexData.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateIndexData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_TESSindex, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateIndexData" "', argument " "2"" of type '" "ofIndexType const *""'"); 
  }
  arg2 = (ofIndexType *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateIndexData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateIndexData((ofIndexType const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_updateVertexData__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateVertexData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateVertexData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateVertexData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateVertexData((float const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_updateVertexData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_updateVertexData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_updateVertexData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_updateVertexData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function updateVertexData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_updateColorData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateColorData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateColorData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateColorData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateColorData((float const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_updateColorData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_updateColorData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_updateColorData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function updateColorData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_updateNormalData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateNormalData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateNormalData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateNormalData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateNormalData((float const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_updateNormalData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_updateNormalData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_updateNormalData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function updateNormalData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_updateTexCoordData__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_updateTexCoordData" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVbo_updateTexCoordData" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = (float *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_updateTexCoordData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->updateTexCoordData((float const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVbo_updateTexCoordData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_updateTexCoordData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVbo_updateTexCoordData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function updateTexCoordData.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_enableColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_enableColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_enableColors" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->enableColors();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_enableNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_enableNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_enableNormals" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->enableNormals();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_enableTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_enableTexCoords.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_enableTexCoords" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->enableTexCoords();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_enableIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_enableIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_enableIndices" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->enableIndices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_disableColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_disableColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_disableColors" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->disableColors();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_disableNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_disableNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_disableNormals" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->disableNormals();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_disableTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_disableTexCoords.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_disableTexCoords" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->disableTexCoords();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_disableIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_disableIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_disableIndices" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->disableIndices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getVertId(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GLuint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getVertId.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getVertId" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (arg1)->getVertId();
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getColorId(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GLuint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getColorId.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getColorId" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (arg1)->getColorId();
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getNormalId(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GLuint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getNormalId.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getNormalId" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (arg1)->getNormalId();
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getTexCoordId(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GLuint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getTexCoordId.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getTexCoordId" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (arg1)->getTexCoordId();
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getIndexId(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GLuint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getIndexId.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getIndexId" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (arg1)->getIndexId();
  jsresult = SWIG_NewPointerObj((new GLuint((const GLuint&)(result))), SWIGTYPE_p_GLuint, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getIsAllocated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getIsAllocated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getIsAllocated" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (bool)(arg1)->getIsAllocated();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getUsingVerts(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getUsingVerts.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getUsingVerts" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (bool)(arg1)->getUsingVerts();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getUsingColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getUsingColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getUsingColors" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (bool)(arg1)->getUsingColors();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getUsingNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getUsingNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getUsingNormals" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (bool)(arg1)->getUsingNormals();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getUsingTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getUsingTexCoords.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getUsingTexCoords" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (bool)(arg1)->getUsingTexCoords();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_getUsingIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_getUsingIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_getUsingIndices" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  result = (bool)(arg1)->getUsingIndices();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_draw.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_draw" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVbo_draw" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_draw" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVbo_draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  (arg1)->draw(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_drawElements(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_drawElements.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_drawElements" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVbo_drawElements" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVbo_drawElements" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->drawElements(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_bind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_bind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_bind" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->bind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_unbind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_unbind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_unbind" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->unbind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_clear" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_clearVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_clearVertices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_clearVertices" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->clearVertices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_clearNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_clearNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_clearNormals" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->clearNormals();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_clearColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_clearColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_clearColors" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->clearColors();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_clearTexCoords(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_clearTexCoords.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_clearTexCoords" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->clearTexCoords();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVbo_clearIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVbo *arg1 = (ofVbo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVbo_clearIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVbo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVbo_clearIndices" "', argument " "1"" of type '" "ofVbo *""'"); 
  }
  arg1 = (ofVbo *)(argp1);
  (arg1)->clearIndices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_draw__SWIG_0_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_draw" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  (arg1)->draw();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVboMesh_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVboMesh_draw__SWIG_0_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function draw.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVboMesh__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVboMesh *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVboMesh__SWIG_0.");  
  result = (ofVboMesh *)new ofVboMesh();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVboMesh, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVboMesh__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofMesh *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofVboMesh *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVboMesh__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofMesh,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofVboMesh" "', argument " "1"" of type '" "ofMesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofVboMesh" "', argument " "1"" of type '" "ofMesh const &""'"); 
  }
  arg1 = (ofMesh *)(argp1);
  result = (ofVboMesh *)new ofVboMesh((ofMesh const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVboMesh, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVboMesh(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVboMesh__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVboMesh__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofVboMesh");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_setUsage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_setUsage.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_setUsage" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVboMesh_setUsage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setUsage(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_enableColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_enableColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_enableColors" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  (arg1)->enableColors();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_enableTextures(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_enableTextures.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_enableTextures" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  (arg1)->enableTextures();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_enableNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_enableNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_enableNormals" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  (arg1)->enableNormals();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_enableIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_enableIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_enableIndices" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  (arg1)->enableIndices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_disableColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_disableColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_disableColors" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  (arg1)->disableColors();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_disableTextures(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_disableTextures.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_disableTextures" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  (arg1)->disableTextures();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_disableNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_disableNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_disableNormals" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  (arg1)->disableNormals();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_disableIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_disableIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_disableIndices" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  (arg1)->disableIndices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_usingColors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_usingColors.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_usingColors" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  result = (bool)(arg1)->usingColors();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_usingTextures(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_usingTextures.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_usingTextures" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  result = (bool)(arg1)->usingTextures();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_usingNormals(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_usingNormals.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_usingNormals" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  result = (bool)(arg1)->usingNormals();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVboMesh_usingIndices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVboMesh_usingIndices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVboMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVboMesh_usingIndices" "', argument " "1"" of type '" "ofVboMesh *""'"); 
  }
  arg1 = (ofVboMesh *)(argp1);
  result = (bool)(arg1)->usingIndices();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofVboMesh(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofVboMesh(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofVboMesh *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_CIRC_RESOLUTION(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(22));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetCurrentRenderer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< ofPtr< ofBaseRenderer > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetCurrentRenderer.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPtrT_ofBaseRenderer_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetCurrentRenderer" "', argument " "1"" of type '" "ofPtr< ofBaseRenderer >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetCurrentRenderer" "', argument " "1"" of type '" "ofPtr< ofBaseRenderer >""'");
    } else {
      arg1 = *((ofPtr< ofBaseRenderer > *)(argp1));
    }
  }
  ofSetCurrentRenderer(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetCurrentRenderer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPtr< ofBaseRenderer > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetCurrentRenderer.");  
  
  result = (ofPtr< ofBaseRenderer > *) &ofGetCurrentRenderer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofPtrT_ofBaseRenderer_t, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetGLRenderer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< ofPtr< ofGLRenderer > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetGLRenderer.");  
  
  result = ofGetGLRenderer();
  jsresult = SWIG_NewPointerObj((new ofPtr< ofGLRenderer >((const ofPtr< ofGLRenderer >&)(result))), SWIGTYPE_p_ofPtrT_ofGLRenderer_t, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBeginSaveScreenAsPDF__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  ofRectangle arg4 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBeginSaveScreenAsPDF" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBeginSaveScreenAsPDF" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofBeginSaveScreenAsPDF" "', argument " "4"" of type '" "ofRectangle""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBeginSaveScreenAsPDF" "', argument " "4"" of type '" "ofRectangle""'");
    } else {
      arg4 = *((ofRectangle *)(argp4));
    }
  }
  ofBeginSaveScreenAsPDF(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBeginSaveScreenAsPDF__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBeginSaveScreenAsPDF" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBeginSaveScreenAsPDF" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ofBeginSaveScreenAsPDF(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBeginSaveScreenAsPDF__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBeginSaveScreenAsPDF" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ofBeginSaveScreenAsPDF(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBeginSaveScreenAsPDF__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ofBeginSaveScreenAsPDF(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofBeginSaveScreenAsPDF(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBeginSaveScreenAsPDF__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBeginSaveScreenAsPDF__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBeginSaveScreenAsPDF__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBeginSaveScreenAsPDF__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofBeginSaveScreenAsPDF.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEndSaveScreenAsPDF(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEndSaveScreenAsPDF.");  
  
  ofEndSaveScreenAsPDF();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPushView(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPushView.");  
  
  ofPushView();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPopView(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPopView.");  
  
  ofPopView();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofViewport__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofRectangle,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofViewport" "', argument " "1"" of type '" "ofRectangle""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofViewport" "', argument " "1"" of type '" "ofRectangle""'");
    } else {
      arg1 = *((ofRectangle *)(argp1));
    }
  }
  ofViewport(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofViewport__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofViewport" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofViewport" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofViewport" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofViewport" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_bool(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofViewport" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  ofViewport(arg1,arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofViewport__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofViewport" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofViewport" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofViewport" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofViewport" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofViewport(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofViewport__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofViewport" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofViewport" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofViewport" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofViewport(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofViewport__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofViewport" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofViewport" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofViewport(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofViewport__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofViewport" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofViewport(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofViewport__SWIG_6(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofViewport();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofViewport(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofViewport__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofViewport__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofViewport__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofViewport__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofViewport__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofViewport__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofViewport__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofViewport.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetupScreenPerspective__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofOrientation arg3 ;
  bool arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenPerspective" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenPerspective" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetupScreenPerspective" "', argument " "3"" of type '" "ofOrientation""'");
  } 
  arg3 = (ofOrientation)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSetupScreenPerspective" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofSetupScreenPerspective" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofSetupScreenPerspective" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofSetupScreenPerspective" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ofSetupScreenPerspective(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenPerspective__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofOrientation arg3 ;
  bool arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenPerspective" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenPerspective" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetupScreenPerspective" "', argument " "3"" of type '" "ofOrientation""'");
  } 
  arg3 = (ofOrientation)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSetupScreenPerspective" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofSetupScreenPerspective" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofSetupScreenPerspective" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ofSetupScreenPerspective(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenPerspective__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofOrientation arg3 ;
  bool arg4 ;
  float arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenPerspective" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenPerspective" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetupScreenPerspective" "', argument " "3"" of type '" "ofOrientation""'");
  } 
  arg3 = (ofOrientation)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSetupScreenPerspective" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofSetupScreenPerspective" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ofSetupScreenPerspective(arg1,arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenPerspective__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofOrientation arg3 ;
  bool arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenPerspective" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenPerspective" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetupScreenPerspective" "', argument " "3"" of type '" "ofOrientation""'");
  } 
  arg3 = (ofOrientation)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSetupScreenPerspective" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ofSetupScreenPerspective(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenPerspective__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofOrientation arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenPerspective" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenPerspective" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetupScreenPerspective" "', argument " "3"" of type '" "ofOrientation""'");
  } 
  arg3 = (ofOrientation)(val3);
  ofSetupScreenPerspective(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenPerspective__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenPerspective" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenPerspective" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofSetupScreenPerspective(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenPerspective__SWIG_6(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenPerspective" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofSetupScreenPerspective(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenPerspective__SWIG_7(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofSetupScreenPerspective();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSetupScreenPerspective(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenPerspective__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenPerspective__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenPerspective__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenPerspective__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenPerspective__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenPerspective__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenPerspective__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenPerspective__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSetupScreenPerspective.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetupScreenOrtho__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofOrientation arg3 ;
  bool arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenOrtho" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenOrtho" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetupScreenOrtho" "', argument " "3"" of type '" "ofOrientation""'");
  } 
  arg3 = (ofOrientation)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSetupScreenOrtho" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofSetupScreenOrtho" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofSetupScreenOrtho" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ofSetupScreenOrtho(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenOrtho__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofOrientation arg3 ;
  bool arg4 ;
  float arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenOrtho" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenOrtho" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetupScreenOrtho" "', argument " "3"" of type '" "ofOrientation""'");
  } 
  arg3 = (ofOrientation)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSetupScreenOrtho" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofSetupScreenOrtho" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ofSetupScreenOrtho(arg1,arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenOrtho__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofOrientation arg3 ;
  bool arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenOrtho" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenOrtho" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetupScreenOrtho" "', argument " "3"" of type '" "ofOrientation""'");
  } 
  arg3 = (ofOrientation)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSetupScreenOrtho" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ofSetupScreenOrtho(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenOrtho__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofOrientation arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenOrtho" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenOrtho" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetupScreenOrtho" "', argument " "3"" of type '" "ofOrientation""'");
  } 
  arg3 = (ofOrientation)(val3);
  ofSetupScreenOrtho(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenOrtho__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenOrtho" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetupScreenOrtho" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofSetupScreenOrtho(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenOrtho__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetupScreenOrtho" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofSetupScreenOrtho(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetupScreenOrtho__SWIG_6(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofSetupScreenOrtho();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSetupScreenOrtho(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenOrtho__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenOrtho__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenOrtho__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenOrtho__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenOrtho__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenOrtho__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetupScreenOrtho__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSetupScreenOrtho.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetCurrentViewport(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetCurrentViewport.");  
  
  result = ofGetCurrentViewport();
  jsresult = SWIG_NewPointerObj((new ofRectangle((const ofRectangle&)(result))), SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetViewportWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetViewportWidth.");  
  
  result = (int)ofGetViewportWidth();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetViewportHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetViewportHeight.");  
  
  result = (int)ofGetViewportHeight();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofOrientationToDegrees(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofOrientation arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofOrientationToDegrees.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofOrientationToDegrees" "', argument " "1"" of type '" "ofOrientation""'");
  } 
  arg1 = (ofOrientation)(val1);
  result = (int)ofOrientationToDegrees(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetCoordHandedness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofHandednessType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetCoordHandedness.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetCoordHandedness" "', argument " "1"" of type '" "ofHandednessType""'");
  } 
  arg1 = (ofHandednessType)(val1);
  ofSetCoordHandedness(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetCoordHandedness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofHandednessType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetCoordHandedness.");  
  
  result = (ofHandednessType)ofGetCoordHandedness();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPushMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPushMatrix.");  
  
  ofPushMatrix();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPopMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPopMatrix.");  
  
  ofPopMatrix();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTranslate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofTranslate" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTranslate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTranslate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofTranslate(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTranslate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofTranslate" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTranslate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofTranslate(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTranslate__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTranslate" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTranslate" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ofTranslate((ofVec3f const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofTranslate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTranslate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTranslate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTranslate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofTranslate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofScale__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofScale" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofScale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofScale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofScale(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofScale__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofScale" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofScale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofScale(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofScale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofScale__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofScale__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofScale.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRotate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRotate" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRotate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRotate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofRotate(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRotateX(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRotateX.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRotateX" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofRotateX(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRotateY(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRotateY.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRotateY" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofRotateY(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRotateZ(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRotateZ.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRotateZ" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofRotateZ(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRotate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRotate" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofRotate(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofRotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRotate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRotate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofRotate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLoadIdentityMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLoadIdentityMatrix.");  
  
  ofLoadIdentityMatrix();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLoadMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadMatrix" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLoadMatrix" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ofLoadMatrix((ofMatrix4x4 const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLoadMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float *arg1 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLoadMatrix" "', argument " "1"" of type '" "float const *""'"); 
  }
  arg1 = (float *)(argp1);
  ofLoadMatrix((float const *)arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofLoadMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLoadMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofLoadMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMultMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMultMatrix" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMultMatrix" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ofMultMatrix((ofMatrix4x4 const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMultMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float *arg1 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMultMatrix" "', argument " "1"" of type '" "float const *""'"); 
  }
  arg1 = (float *)(argp1);
  ofMultMatrix((float const *)arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofMultMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMultMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMultMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofMultMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetMatrixMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrixMode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetMatrixMode.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetMatrixMode" "', argument " "1"" of type '" "ofMatrixMode""'");
  } 
  arg1 = (ofMatrixMode)(val1);
  ofSetMatrixMode(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetupGraphicDefaults(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetupGraphicDefaults.");  
  
  ofSetupGraphicDefaults();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetupScreen(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetupScreen.");  
  
  ofSetupScreen();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetRectMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectMode result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetRectMode.");  
  
  result = (ofRectMode)ofGetRectMode();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetCircleResolution(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetCircleResolution.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetCircleResolution" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofSetCircleResolution(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetCurveResolution(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetCurveResolution.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetCurveResolution" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofSetCurveResolution(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetSphereResolution(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetSphereResolution.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetSphereResolution" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofSetSphereResolution(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNoFill(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNoFill.");  
  
  ofNoFill();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFill(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFill.");  
  
  ofFill();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetFill(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFillFlag result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetFill.");  
  
  result = (ofFillFlag)ofGetFill();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetLineWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetLineWidth.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetLineWidth" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofSetLineWidth(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetColor__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ofSetColor(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetColor__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSetColor" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ofSetColor(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetColor__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetColor" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetColor" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  arg1 = (ofColor *)(argp1);
  ofSetColor((ofColor_< unsigned char > const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetColor__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor *arg1 = 0 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetColor" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetColor" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  arg1 = (ofColor *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ofSetColor((ofColor_< unsigned char > const &)*arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetColor__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofSetColor(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSetColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetColor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetColor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetColor__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetColor__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetColor__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSetColor.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetHexColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetHexColor.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetHexColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofSetHexColor(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEnableBlendMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofBlendMode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnableBlendMode.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofEnableBlendMode" "', argument " "1"" of type '" "ofBlendMode""'");
  } 
  arg1 = (ofBlendMode)(val1);
  ofEnableBlendMode(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisableBlendMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisableBlendMode.");  
  
  ofDisableBlendMode();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEnablePointSprites(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnablePointSprites.");  
  
  ofEnablePointSprites();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisablePointSprites(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisablePointSprites.");  
  
  ofDisablePointSprites();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEnableAlphaBlending(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnableAlphaBlending.");  
  
  ofEnableAlphaBlending();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisableAlphaBlending(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisableAlphaBlending.");  
  
  ofDisableAlphaBlending();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEnableSmoothing(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnableSmoothing.");  
  
  ofEnableSmoothing();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisableSmoothing(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisableSmoothing.");  
  
  ofDisableSmoothing();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetStyle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetStyle.");  
  
  result = ofGetStyle();
  jsresult = SWIG_NewPointerObj((new ofStyle((const ofStyle&)(result))), SWIGTYPE_p_ofStyle, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetStyle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofStyle arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetStyle.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofStyle,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetStyle" "', argument " "1"" of type '" "ofStyle""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetStyle" "', argument " "1"" of type '" "ofStyle""'");
    } else {
      arg1 = *((ofStyle *)(argp1));
    }
  }
  ofSetStyle(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPushStyle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPushStyle.");  
  
  ofPushStyle();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPopStyle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPopStyle.");  
  
  ofPopStyle();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetPolyMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyWindingMode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetPolyMode.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetPolyMode" "', argument " "1"" of type '" "ofPolyWindingMode""'");
  } 
  arg1 = (ofPolyWindingMode)(val1);
  ofSetPolyMode(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetRectMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectMode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetRectMode.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetRectMode" "', argument " "1"" of type '" "ofRectMode""'");
  } 
  arg1 = (ofRectMode)(val1);
  ofSetRectMode(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBgColorPtr(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBgColorPtr.");  
  
  result = (float *)ofBgColorPtr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBackground__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBackground" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBackground" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBackground" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofBackground" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ofBackground(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBackground__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBackground" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBackground" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBackground" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ofBackground(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBackground__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBackground" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBackground" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ofBackground(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBackground__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBackground" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofBackground(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBackground__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBackground" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBackground" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  arg1 = (ofColor *)(argp1);
  ofBackground((ofColor_< unsigned char > const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofBackground(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBackground__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBackground__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBackground__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBackground__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBackground__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofBackground.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBackgroundHex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBackgroundHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBackgroundHex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ofBackgroundHex(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBackgroundHex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBackgroundHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofBackgroundHex(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofBackgroundHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBackgroundHex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBackgroundHex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofBackgroundHex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBackgroundGradient__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor *arg1 = 0 ;
  ofColor *arg2 = 0 ;
  ofGradientMode arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBackgroundGradient" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBackgroundGradient" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  arg1 = (ofColor *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBackgroundGradient" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBackgroundGradient" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  arg2 = (ofColor *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBackgroundGradient" "', argument " "3"" of type '" "ofGradientMode""'");
  } 
  arg3 = (ofGradientMode)(val3);
  ofBackgroundGradient((ofColor_< unsigned char > const &)*arg1,(ofColor_< unsigned char > const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBackgroundGradient__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor *arg1 = 0 ;
  ofColor *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBackgroundGradient" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBackgroundGradient" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  arg1 = (ofColor *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBackgroundGradient" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBackgroundGradient" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  arg2 = (ofColor *)(argp2);
  ofBackgroundGradient((ofColor_< unsigned char > const &)*arg1,(ofColor_< unsigned char > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofBackgroundGradient(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBackgroundGradient__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBackgroundGradient__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofBackgroundGradient.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetBackgroundColor__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetBackgroundColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetBackgroundColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetBackgroundColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSetBackgroundColor" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ofSetBackgroundColor(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetBackgroundColor__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetBackgroundColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetBackgroundColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSetBackgroundColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ofSetBackgroundColor(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetBackgroundColor__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetBackgroundColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetBackgroundColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ofSetBackgroundColor(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetBackgroundColor__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetBackgroundColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofSetBackgroundColor(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetBackgroundColor__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetBackgroundColor" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetBackgroundColor" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  arg1 = (ofColor *)(argp1);
  ofSetBackgroundColor((ofColor_< unsigned char > const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSetBackgroundColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetBackgroundColor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetBackgroundColor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetBackgroundColor__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetBackgroundColor__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetBackgroundColor__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSetBackgroundColor.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetBackgroundColorHex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetBackgroundColorHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetBackgroundColorHex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ofSetBackgroundColorHex(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetBackgroundColorHex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetBackgroundColorHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofSetBackgroundColorHex(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSetBackgroundColorHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetBackgroundColorHex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetBackgroundColorHex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSetBackgroundColorHex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetBackgroundAuto(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetBackgroundAuto.");  
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetBackgroundAuto" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  ofSetBackgroundAuto(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofClear__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofClear" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofClear" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofClear" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofClear" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofClear(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofClear__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofClear" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofClear" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofClear" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofClear(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofClear__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofClear" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofClear" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofClear(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofClear__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofClear" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofClear(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofClear__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofColor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofClear" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofClear" "', argument " "1"" of type '" "ofColor const &""'"); 
  }
  arg1 = (ofColor *)(argp1);
  ofClear((ofColor_< unsigned char > const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofClear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofClear__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofClear__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofClear__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofClear__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofClear__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofClear.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofClearAlpha(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofClearAlpha.");  
  
  ofClearAlpha();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofbClearBg(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofbClearBg.");  
  
  result = (bool)ofbClearBg();
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTriangle__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofTriangle" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTriangle" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTriangle" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTriangle" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTriangle" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTriangle" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ofTriangle(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTriangle__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofTriangle" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTriangle" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTriangle" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTriangle" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTriangle" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTriangle" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofTriangle" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofTriangle" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofTriangle" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ofTriangle(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTriangle__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTriangle" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTriangle" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTriangle" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTriangle" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofTriangle" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTriangle" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  ofTriangle((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofTriangle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTriangle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTriangle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTriangle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofTriangle.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCircle__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofCircle" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCircle" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCircle" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofCircle(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCircle__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofCircle" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCircle" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCircle" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofCircle" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofCircle(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCircle__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCircle" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCircle" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCircle" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofCircle((ofVec3f const &)*arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofCircle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCircle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCircle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCircle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofCircle.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEllipse__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofEllipse" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofEllipse" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofEllipse" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofEllipse" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofEllipse(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofEllipse__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofEllipse" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofEllipse" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofEllipse" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofEllipse" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofEllipse" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ofEllipse(arg1,arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofEllipse__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofEllipse" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofEllipse" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofEllipse" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofEllipse" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofEllipse((ofVec3f const &)*arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofEllipse(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofEllipse__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofEllipse__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofEllipse__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofEllipse.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLine__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofLine" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLine" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofLine" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofLine" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofLine(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLine__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofLine" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLine" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofLine" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofLine" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofLine" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofLine" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ofLine(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLine__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLine" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLine" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofLine" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLine" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ofLine((ofVec3f const &)*arg1,(ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofLine(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLine__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLine__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLine__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofLine.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRect__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRect" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRect" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRect" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRect" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofRect(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRect__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRect" "', argument " "1"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRect" "', argument " "1"" of type '" "ofRectangle const &""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ofRect((ofRectangle const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRect__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRect" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRect" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRect" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRect" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofRect((ofVec3f const &)*arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRect__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRect" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRect" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRect" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRect" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofRect" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ofRect(arg1,arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofRect(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRect__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRect__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRect__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRect__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofRect.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRectRounded__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = 0 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectRounded" "', argument " "1"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectRounded" "', argument " "1"" of type '" "ofRectangle const &""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectRounded" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofRectRounded((ofRectangle const &)*arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectRounded__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofRectRounded" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofRectRounded" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectRounded" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectRounded" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectRounded" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofRectRounded((ofVec3f const &)*arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectRounded__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRectRounded" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectRounded" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectRounded" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectRounded" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofRectRounded" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ofRectRounded(arg1,arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRectRounded__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRectRounded" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRectRounded" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofRectRounded" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofRectRounded" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofRectRounded" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofRectRounded" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ofRectRounded(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofRectRounded(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectRounded__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectRounded__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectRounded__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRectRounded__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofRectRounded.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCurve__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofCurve" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCurve" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCurve" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofCurve" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofCurve" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofCurve" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofCurve" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofCurve" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ofCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCurve__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  float val11 ;
  int ecode11 = 0 ;
  float val12 ;
  int ecode12 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofCurve" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCurve" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCurve" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofCurve" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofCurve" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofCurve" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofCurve" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofCurve" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofCurve" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofCurve" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  ecode11 = SWIG_AsVal_float(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ofCurve" "', argument " "11"" of type '" "float""'");
  } 
  arg11 = (float)(val11);
  ecode12 = SWIG_AsVal_float(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ofCurve" "', argument " "12"" of type '" "float""'");
  } 
  arg12 = (float)(val12);
  ofCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofCurve(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 12) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofCurve.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBezier__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBezier" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBezier" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBezier" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofBezier" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofBezier" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofBezier" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofBezier" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofBezier" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ofBezier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBezier__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  float val11 ;
  int ecode11 = 0 ;
  float val12 ;
  int ecode12 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBezier" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBezier" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBezier" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofBezier" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofBezier" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofBezier" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofBezier" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofBezier" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofBezier" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofBezier" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  ecode11 = SWIG_AsVal_float(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ofBezier" "', argument " "11"" of type '" "float""'");
  } 
  arg11 = (float)(val11);
  ecode12 = SWIG_AsVal_float(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ofBezier" "', argument " "12"" of type '" "float""'");
  } 
  arg12 = (float)(val12);
  ofBezier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofBezier(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBezier__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 12) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBezier__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofBezier.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBeginShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBeginShape.");  
  
  ofBeginShape();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVertex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofVertex" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVertex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofVertex(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVertex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofVertex" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVertex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVertex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofVertex(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVertex__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVertex" "', argument " "1"" of type '" "ofPoint &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVertex" "', argument " "1"" of type '" "ofPoint &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ofVertex(*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofVertex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVertex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVertex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVertex__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofVertex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::vector< ofPoint > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVertices.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVertices" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVertices" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  arg1 = (std::vector< ofPoint > *)(argp1);
  ofVertices((std::vector< ofVec3f > const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVertexes(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::vector< ofPoint > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVertexes.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVertexes" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVertexes" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  arg1 = (std::vector< ofPoint > *)(argp1);
  ofVertexes((std::vector< ofVec3f > const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCurveVertex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofCurveVertex" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCurveVertex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofCurveVertex(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCurveVertex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofCurveVertex" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCurveVertex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCurveVertex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofCurveVertex(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCurveVertex__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCurveVertex" "', argument " "1"" of type '" "ofPoint &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurveVertex" "', argument " "1"" of type '" "ofPoint &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ofCurveVertex(*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofCurveVertex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCurveVertex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCurveVertex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCurveVertex__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofCurveVertex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCurveVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::vector< ofPoint > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCurveVertices.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCurveVertices" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurveVertices" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  arg1 = (std::vector< ofPoint > *)(argp1);
  ofCurveVertices((std::vector< ofVec3f > const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCurveVertexes(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::vector< ofPoint > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCurveVertexes.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCurveVertexes" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurveVertexes" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  arg1 = (std::vector< ofPoint > *)(argp1);
  ofCurveVertexes((std::vector< ofVec3f > const &)*arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBezierVertex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBezierVertex" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBezierVertex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBezierVertex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofBezierVertex" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofBezierVertex" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofBezierVertex" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ofBezierVertex(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBezierVertex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBezierVertex" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierVertex" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBezierVertex" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierVertex" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofBezierVertex" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierVertex" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  ofBezierVertex((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBezierVertex__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBezierVertex" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBezierVertex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBezierVertex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofBezierVertex" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofBezierVertex" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofBezierVertex" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofBezierVertex" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofBezierVertex" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofBezierVertex" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ofBezierVertex(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofBezierVertex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBezierVertex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBezierVertex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBezierVertex__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofBezierVertex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEndShape__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofEndShape" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  ofEndShape(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofEndShape__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofEndShape();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofEndShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofEndShape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofEndShape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofEndShape.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNextContour__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNextContour" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  ofNextContour(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNextContour__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofNextContour();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofNextContour(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNextContour__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNextContour__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofNextContour.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSphere__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSphere" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSphere" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSphere" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSphere" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofSphere(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSphere__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSphere" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSphere" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSphere" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofSphere(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSphere__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSphere" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSphere" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSphere" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofSphere((ofVec3f const &)*arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSphere__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSphere" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofSphere(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSphere(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSphere__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSphere__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSphere__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSphere__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSphere.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBox__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBox" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBox" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBox" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofBox" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofBox(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBox__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBox" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBox" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofBox" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofBox(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBox__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBox" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBox" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBox" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofBox((ofVec3f const &)*arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBox__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofBox" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofBox(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofBox(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBox__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBox__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBox__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBox__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofBox.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCone__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofCone" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCone" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCone" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofCone" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofCone" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ofCone(arg1,arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCone__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofCone" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCone" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCone" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofCone" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofCone(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCone__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCone" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCone" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCone" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofCone" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofCone((ofVec3f const &)*arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofCone__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofCone" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofCone" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ofCone(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofCone(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCone__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCone__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCone__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofCone__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofCone.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetDrawBitmapMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofDrawBitmapMode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetDrawBitmapMode.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetDrawBitmapMode" "', argument " "1"" of type '" "ofDrawBitmapMode""'");
  } 
  arg1 = (ofDrawBitmapMode)(val1);
  ofSetDrawBitmapMode(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDrawBitmapString__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  ofPoint *arg2 = 0 ;
  std::string *tmp1 ;
  void *argp2 ;
  int res2 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofDrawBitmapString" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapString" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ofDrawBitmapString(arg1,(ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawBitmapString__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  float arg2 ;
  float arg3 ;
  std::string *tmp1 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawBitmapString" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawBitmapString" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ofDrawBitmapString(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawBitmapString__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  std::string *tmp1 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawBitmapString" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawBitmapString" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDrawBitmapString" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ofDrawBitmapString(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofDrawBitmapString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawBitmapString__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawBitmapString__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawBitmapString__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofDrawBitmapString.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDrawBitmapStringHighlight__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  ofPoint *arg2 = 0 ;
  ofColor *arg3 = 0 ;
  ofColor *arg4 = 0 ;
  std::string *tmp1 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofDrawBitmapStringHighlight" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapStringHighlight" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofDrawBitmapStringHighlight" "', argument " "3"" of type '" "ofColor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapStringHighlight" "', argument " "3"" of type '" "ofColor const &""'"); 
  }
  arg3 = (ofColor *)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofDrawBitmapStringHighlight" "', argument " "4"" of type '" "ofColor const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapStringHighlight" "', argument " "4"" of type '" "ofColor const &""'"); 
  }
  arg4 = (ofColor *)(argp4);
  ofDrawBitmapStringHighlight(arg1,(ofVec3f const &)*arg2,(ofColor_< unsigned char > const &)*arg3,(ofColor_< unsigned char > const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawBitmapStringHighlight__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  ofPoint *arg2 = 0 ;
  ofColor *arg3 = 0 ;
  std::string *tmp1 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofDrawBitmapStringHighlight" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapStringHighlight" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofDrawBitmapStringHighlight" "', argument " "3"" of type '" "ofColor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapStringHighlight" "', argument " "3"" of type '" "ofColor const &""'"); 
  }
  arg3 = (ofColor *)(argp3);
  ofDrawBitmapStringHighlight(arg1,(ofVec3f const &)*arg2,(ofColor_< unsigned char > const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawBitmapStringHighlight__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  ofPoint *arg2 = 0 ;
  std::string *tmp1 ;
  void *argp2 ;
  int res2 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofDrawBitmapStringHighlight" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapStringHighlight" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ofDrawBitmapStringHighlight(arg1,(ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawBitmapStringHighlight__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  ofColor *arg4 = 0 ;
  ofColor *arg5 = 0 ;
  std::string *tmp1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawBitmapStringHighlight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawBitmapStringHighlight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofDrawBitmapStringHighlight" "', argument " "4"" of type '" "ofColor const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapStringHighlight" "', argument " "4"" of type '" "ofColor const &""'"); 
  }
  arg4 = (ofColor *)(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofDrawBitmapStringHighlight" "', argument " "5"" of type '" "ofColor const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapStringHighlight" "', argument " "5"" of type '" "ofColor const &""'"); 
  }
  arg5 = (ofColor *)(argp5);
  ofDrawBitmapStringHighlight(arg1,arg2,arg3,(ofColor_< unsigned char > const &)*arg4,(ofColor_< unsigned char > const &)*arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawBitmapStringHighlight__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  ofColor *arg4 = 0 ;
  std::string *tmp1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawBitmapStringHighlight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawBitmapStringHighlight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofDrawBitmapStringHighlight" "', argument " "4"" of type '" "ofColor const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofDrawBitmapStringHighlight" "', argument " "4"" of type '" "ofColor const &""'"); 
  }
  arg4 = (ofColor *)(argp4);
  ofDrawBitmapStringHighlight(arg1,arg2,arg3,(ofColor_< unsigned char > const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofDrawBitmapStringHighlight__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  std::string *tmp1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDrawBitmapStringHighlight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDrawBitmapStringHighlight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ofDrawBitmapStringHighlight(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofDrawBitmapStringHighlight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawBitmapStringHighlight__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawBitmapStringHighlight__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawBitmapStringHighlight__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawBitmapStringHighlight__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawBitmapStringHighlight__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofDrawBitmapStringHighlight__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofDrawBitmapStringHighlight.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofPath(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPath *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofPath.");  
  result = (ofPath *)new ofPath();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofPath, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_clear" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_newSubPath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_newSubPath.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_newSubPath" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  (arg1)->newSubPath();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_close(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_close.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_close" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  (arg1)->close();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_lineTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_lineTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_lineTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_lineTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->lineTo((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_lineTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_lineTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_lineTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_lineTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->lineTo(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_lineTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_lineTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_lineTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_lineTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_lineTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->lineTo(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_lineTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_lineTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_lineTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_lineTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function lineTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_moveTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_moveTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_moveTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_moveTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->moveTo((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_moveTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_moveTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_moveTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_moveTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_moveTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->moveTo(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_moveTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_moveTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_moveTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_moveTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->moveTo(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_moveTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_moveTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_moveTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_moveTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function moveTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_curveTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_curveTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_curveTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_curveTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->curveTo((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_curveTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_curveTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_curveTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_curveTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->curveTo(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_curveTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_curveTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_curveTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_curveTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_curveTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->curveTo(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_curveTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_curveTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_curveTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_curveTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function curveTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_bezierTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_bezierTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_bezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_bezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPath_bezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_bezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofPath_bezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_bezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  arg4 = (ofPoint *)(argp4);
  (arg1)->bezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_bezierTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_bezierTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_bezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_bezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_bezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_bezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_bezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPath_bezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_bezierTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_bezierTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_bezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_bezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_bezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_bezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_bezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPath_bezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPath_bezierTo" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofPath_bezierTo" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofPath_bezierTo" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_bezierTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_bezierTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_bezierTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_bezierTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function bezierTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_quadBezierTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_quadBezierTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_quadBezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_quadBezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPath_quadBezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_quadBezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofPath_quadBezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_quadBezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  arg4 = (ofPoint *)(argp4);
  (arg1)->quadBezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_quadBezierTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_quadBezierTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_quadBezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_quadBezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_quadBezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_quadBezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_quadBezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPath_quadBezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_quadBezierTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_quadBezierTo" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_quadBezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_quadBezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_quadBezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_quadBezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_quadBezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPath_quadBezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPath_quadBezierTo" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofPath_quadBezierTo" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofPath_quadBezierTo" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_quadBezierTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_quadBezierTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_quadBezierTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_quadBezierTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function quadBezierTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_arc__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_arc" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_bool(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPath_arc" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = (bool)(val7);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_arc__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_arc" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_arc__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_arc" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_arc" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPath_arc" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_arc__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_arc" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_arc" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPath_arc" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPath_arc" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_arc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_arc__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_arc__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_arc__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_arc__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function arc.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_arcNegative__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_arcNegative" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_arcNegative" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_arcNegative" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_arcNegative" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_arcNegative" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_arcNegative" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_arcNegative" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->arcNegative((ofPoint const &)*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_arcNegative__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_arcNegative" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_arcNegative" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_arcNegative" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_arcNegative" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_arcNegative" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_arcNegative" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPath_arcNegative" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_arcNegative__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_arcNegative" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_arcNegative" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_arcNegative" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPath_arcNegative" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPath_arcNegative" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPath_arcNegative" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPath_arcNegative" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPath_arcNegative" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_arcNegative(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_arcNegative__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_arcNegative__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_arcNegative__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function arcNegative.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setPolyWindingMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPolyWindingMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setPolyWindingMode.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setPolyWindingMode" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setPolyWindingMode" "', argument " "2"" of type '" "ofPolyWindingMode""'");
  } 
  arg2 = (ofPolyWindingMode)(val2);
  (arg1)->setPolyWindingMode(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setFilled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setFilled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setFilled" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setFilled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setFilled(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setStrokeWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setStrokeWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setStrokeWidth" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setStrokeWidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setStrokeWidth(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setColor" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_setColor" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_setColor" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  arg2 = (ofColor *)(argp2);
  (arg1)->setColor((ofColor const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setHexColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setHexColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setHexColor" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setHexColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setHexColor(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setFillColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setFillColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setFillColor" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_setFillColor" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_setFillColor" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  arg2 = (ofColor *)(argp2);
  (arg1)->setFillColor((ofColor const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setFillHexColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setFillHexColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setFillHexColor" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setFillHexColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setFillHexColor(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setStrokeColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setStrokeColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setStrokeColor" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofColor_T_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_setStrokeColor" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_setStrokeColor" "', argument " "2"" of type '" "ofColor const &""'"); 
  }
  arg2 = (ofColor *)(argp2);
  (arg1)->setStrokeColor((ofColor const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setStrokeHexColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setStrokeHexColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setStrokeHexColor" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setStrokeHexColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setStrokeHexColor(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getWindingMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPolyWindingMode result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_getWindingMode.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getWindingMode" "', argument " "1"" of type '" "ofPath const *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (ofPolyWindingMode)((ofPath const *)arg1)->getWindingMode();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_isFilled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_isFilled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_isFilled" "', argument " "1"" of type '" "ofPath const *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (bool)((ofPath const *)arg1)->isFilled();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getFillColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_getFillColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getFillColor" "', argument " "1"" of type '" "ofPath const *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = ((ofPath const *)arg1)->getFillColor();
  jsresult = SWIG_NewPointerObj((new ofColor((const ofColor&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getStrokeColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofColor result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_getStrokeColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getStrokeColor" "', argument " "1"" of type '" "ofPath const *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = ((ofPath const *)arg1)->getStrokeColor();
  jsresult = SWIG_NewPointerObj((new ofColor((const ofColor&)(result))), SWIGTYPE_p_ofColor_T_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getStrokeWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_getStrokeWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getStrokeWidth" "', argument " "1"" of type '" "ofPath const *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (float)((ofPath const *)arg1)->getStrokeWidth();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_hasOutline(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_hasOutline.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_hasOutline" "', argument " "1"" of type '" "ofPath const *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (bool)((ofPath const *)arg1)->hasOutline();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_draw__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_draw" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->draw(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_draw__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_draw" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  (arg1)->draw();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_draw__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_draw__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function draw.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getSubPaths__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofSubPath > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getSubPaths" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (std::vector< ofSubPath > *) &(arg1)->getSubPaths();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofSubPath_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_getSubPaths__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofSubPath > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getSubPaths" "', argument " "1"" of type '" "ofPath const *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (std::vector< ofSubPath > *) &((ofPath const *)arg1)->getSubPaths();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofSubPath_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_getSubPaths(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_getSubPaths__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_getSubPaths__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getSubPaths.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getOutline(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofPolyline > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_getOutline.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getOutline" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (std::vector< ofPolyline > *) &(arg1)->getOutline();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofPolyline_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getTessellation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofMesh *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_getTessellation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getTessellation" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (ofMesh *) &(arg1)->getTessellation();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofMesh, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_simplify__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_simplify" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_simplify" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->simplify(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_simplify__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_simplify" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  (arg1)->simplify();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPath_simplify(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_simplify__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPath_simplify__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function simplify.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_flagShapeChanged(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_flagShapeChanged.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_flagShapeChanged" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  (arg1)->flagShapeChanged();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_PATHS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofPath::PATHS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_POLYLINES(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofPath::POLYLINES));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setMode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPath::Mode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setMode.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setMode" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setMode" "', argument " "2"" of type '" "ofPath::Mode""'");
  } 
  arg2 = (ofPath::Mode)(val2);
  (arg1)->setMode(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setCurveResolution(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setCurveResolution.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setCurveResolution" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setCurveResolution" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setCurveResolution(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getCurveResolution(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_getCurveResolution.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getCurveResolution" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (int)(arg1)->getCurveResolution();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setArcResolution(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setArcResolution.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setArcResolution" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setArcResolution" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setArcResolution(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getArcResolution(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_getArcResolution.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getArcResolution" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (int)(arg1)->getArcResolution();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_setUseShapeColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_setUseShapeColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_setUseShapeColor" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_setUseShapeColor" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setUseShapeColor(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_getUseShapeColor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_getUseShapeColor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_getUseShapeColor" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  result = (bool)(arg1)->getUseShapeColor();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_tessellate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_tessellate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_tessellate" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  (arg1)->tessellate();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_translate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_translate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_translate" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPath_translate" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_translate" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->translate((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_rotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_rotate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_rotate" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPath_rotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPath_rotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->rotate(arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPath_scale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPath *arg1 = (ofPath *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPath_scale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPath_scale" "', argument " "1"" of type '" "ofPath *""'"); 
  }
  arg1 = (ofPath *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPath_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPath_scale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->scale(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofPath(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofPath(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofPath *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofSubPath(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofSubPath *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofSubPath.");  
  result = (ofSubPath *)new ofSubPath();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofSubPath, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSubPath_getCommands__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofSubPath *arg1 = (ofSubPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofSubPath::Command > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSubPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSubPath_getCommands" "', argument " "1"" of type '" "ofSubPath *""'"); 
  }
  arg1 = (ofSubPath *)(argp1);
  result = (std::vector< ofSubPath::Command > *) &(arg1)->getCommands();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofSubPath__Command_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSubPath_getCommands__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofSubPath *arg1 = (ofSubPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofSubPath::Command > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSubPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSubPath_getCommands" "', argument " "1"" of type '" "ofSubPath const *""'"); 
  }
  arg1 = (ofSubPath *)(argp1);
  result = (std::vector< ofSubPath::Command > *) &((ofSubPath const *)arg1)->getCommands();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofSubPath__Command_t, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSubPath_getCommands(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSubPath_getCommands__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSubPath_getCommands__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getCommands.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSubPath_addCommand(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSubPath *arg1 = (ofSubPath *) 0 ;
  ofSubPath::Command *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSubPath_addCommand.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSubPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSubPath_addCommand" "', argument " "1"" of type '" "ofSubPath *""'"); 
  }
  arg1 = (ofSubPath *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofSubPath__Command,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSubPath_addCommand" "', argument " "2"" of type '" "ofSubPath::Command const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSubPath_addCommand" "', argument " "2"" of type '" "ofSubPath::Command const &""'"); 
  }
  arg2 = (ofSubPath::Command *)(argp2);
  (arg1)->addCommand((ofSubPath::Command const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSubPath_close(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSubPath *arg1 = (ofSubPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSubPath_close.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSubPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSubPath_close" "', argument " "1"" of type '" "ofSubPath *""'"); 
  }
  arg1 = (ofSubPath *)(argp1);
  (arg1)->close();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSubPath_isClosed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSubPath *arg1 = (ofSubPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSubPath_isClosed.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSubPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSubPath_isClosed" "', argument " "1"" of type '" "ofSubPath *""'"); 
  }
  arg1 = (ofSubPath *)(argp1);
  result = (bool)(arg1)->isClosed();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSubPath_size(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSubPath *arg1 = (ofSubPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSubPath_size.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSubPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSubPath_size" "', argument " "1"" of type '" "ofSubPath *""'"); 
  }
  arg1 = (ofSubPath *)(argp1);
  result = (int)(arg1)->size();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofSubPath(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofSubPath(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofSubPath *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofPolyline__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofPolyline *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofPolyline__SWIG_0.");  
  result = (ofPolyline *)new ofPolyline();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofPolyline, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofPolyline__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< ofPoint > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofPolyline *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofPolyline__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofPolyline" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofPolyline" "', argument " "1"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  arg1 = (std::vector< ofPoint > *)(argp1);
  result = (ofPolyline *)new ofPolyline((std::vector< ofPoint > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofPolyline, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofPolyline(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofPolyline__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofPolyline__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofPolyline");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_fromRectangle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofRectangle *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofPolyline result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_fromRectangle.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofRectangle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_fromRectangle" "', argument " "1"" of type '" "ofRectangle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_fromRectangle" "', argument " "1"" of type '" "ofRectangle const &""'"); 
  }
  arg1 = (ofRectangle *)(argp1);
  result = ofPolyline::fromRectangle((ofRectangle const &)*arg1);
  jsresult = SWIG_NewPointerObj((new ofPolyline((const ofPolyline&)(result))), SWIGTYPE_p_ofPolyline, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_clear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_clear.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_clear" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  (arg1)->clear();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertex__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_addVertex" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_addVertex" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_addVertex" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->addVertex((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertex__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_addVertex" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_addVertex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_addVertex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_addVertex" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->addVertex(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertex__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_addVertex" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_addVertex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_addVertex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->addVertex(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_addVertex__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_addVertex__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_addVertex__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function addVertex.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertices__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  std::vector< ofPoint > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_addVertices" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_addVertices" "', argument " "2"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_addVertices" "', argument " "2"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  arg2 = (std::vector< ofPoint > *)(argp2);
  (arg1)->addVertices((std::vector< ofPoint > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertexes__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  std::vector< ofPoint > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_addVertexes" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_addVertexes" "', argument " "2"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_addVertexes" "', argument " "2"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  arg2 = (std::vector< ofPoint > *)(argp2);
  (arg1)->addVertexes((std::vector< ofPoint > const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertices__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_addVertices" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_addVertices" "', argument " "2"" of type '" "ofPoint const *""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_addVertices" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->addVertices((ofPoint const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_addVertices__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_addVertices__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function addVertices.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertexes__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_addVertexes" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_addVertexes" "', argument " "2"" of type '" "ofPoint const *""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_addVertexes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->addVertexes((ofPoint const *)arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_addVertexes(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_addVertexes__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_addVertexes__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function addVertexes.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_lineTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_lineTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_lineTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_lineTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->lineTo((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_lineTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_lineTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_lineTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_lineTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_lineTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->lineTo(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_lineTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_lineTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_lineTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_lineTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->lineTo(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_lineTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_lineTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_lineTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_lineTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function lineTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_arc__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arc" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_bool(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arc" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = (bool)(val7);
  ecode8 = SWIG_AsVal_int(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_arc" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arc__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arc" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_bool(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arc" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = (bool)(val7);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arc__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arc" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_int(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arc" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = (int)(val7);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arc__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arc" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arc__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arc" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arc" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_int(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_arc" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arc__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arc" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arc" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arc__SWIG_6(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arc" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arc" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_arc" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_int(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofPolyline_arc" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = (int)(val9);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arc__SWIG_7(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arc" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_arc" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arc" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arc" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arc" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arc" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arc" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_arc" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arc__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arc__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arc__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arc__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arc__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arc__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arc__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arc__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function arc.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_arcNegative__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arcNegative" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_arcNegative" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_arcNegative" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arcNegative" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arcNegative" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arcNegative" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arcNegative" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_int(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arcNegative" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = (int)(val7);
  (arg1)->arcNegative((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arcNegative__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arcNegative" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_arcNegative" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_arcNegative" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arcNegative" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arcNegative" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arcNegative" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arcNegative" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  (arg1)->arcNegative((ofPoint const &)*arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arcNegative__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arcNegative" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_arcNegative" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arcNegative" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arcNegative" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arcNegative" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arcNegative" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arcNegative" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_int(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_arcNegative" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arcNegative__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arcNegative" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_arcNegative" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arcNegative" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arcNegative" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arcNegative" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arcNegative" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arcNegative" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arcNegative__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arcNegative" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_arcNegative" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arcNegative" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arcNegative" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arcNegative" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arcNegative" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arcNegative" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_arcNegative" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_int(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofPolyline_arcNegative" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = (int)(val9);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arcNegative__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_arcNegative" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_arcNegative" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_arcNegative" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_arcNegative" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_arcNegative" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_arcNegative" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_arcNegative" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_arcNegative" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_arcNegative(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arcNegative__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arcNegative__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arcNegative__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arcNegative__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arcNegative__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_arcNegative__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function arcNegative.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_curveTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_curveTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_curveTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_curveTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_curveTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  (arg1)->curveTo((ofPoint const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_curveTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_curveTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_curveTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_curveTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  (arg1)->curveTo((ofPoint const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_curveTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_curveTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_curveTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_curveTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_curveTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_curveTo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->curveTo(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_curveTo__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_curveTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_curveTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_curveTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_curveTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->curveTo(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_curveTo__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_curveTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_curveTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_curveTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->curveTo(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_curveTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_curveTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_curveTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_curveTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_curveTo__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_curveTo__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function curveTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_bezierTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_bezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_bezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_bezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPolyline_bezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_bezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofPolyline_bezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_bezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  arg4 = (ofPoint *)(argp4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_bezierTo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->bezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_bezierTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_bezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_bezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_bezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPolyline_bezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_bezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofPolyline_bezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_bezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  arg4 = (ofPoint *)(argp4);
  (arg1)->bezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_bezierTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_bezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_bezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_bezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_bezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_bezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_bezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_bezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_int(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_bezierTo" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_bezierTo__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_bezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_bezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_bezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_bezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_bezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_bezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_bezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_bezierTo__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  int arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_bezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_bezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_bezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_bezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_bezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_bezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_bezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_bezierTo" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofPolyline_bezierTo" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofPolyline_bezierTo" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  ecode11 = SWIG_AsVal_int(args[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ofPolyline_bezierTo" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = (int)(val11);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_bezierTo__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_bezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_bezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_bezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_bezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_bezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_bezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_bezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_bezierTo" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofPolyline_bezierTo" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofPolyline_bezierTo" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_bezierTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_bezierTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_bezierTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_bezierTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_bezierTo__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 10) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_bezierTo__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_bezierTo__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function bezierTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_quadBezierTo__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  int arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_quadBezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_quadBezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_quadBezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_quadBezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_quadBezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_quadBezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_quadBezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_quadBezierTo" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofPolyline_quadBezierTo" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofPolyline_quadBezierTo" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  ecode11 = SWIG_AsVal_int(args[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ofPolyline_quadBezierTo" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = (int)(val11);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_quadBezierTo__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_quadBezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_quadBezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_quadBezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_quadBezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_quadBezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_quadBezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_quadBezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_quadBezierTo" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofPolyline_quadBezierTo" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofPolyline_quadBezierTo" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_quadBezierTo__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_quadBezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_quadBezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_quadBezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPolyline_quadBezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_quadBezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofPolyline_quadBezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_quadBezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  arg4 = (ofPoint *)(argp4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_quadBezierTo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  (arg1)->quadBezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_quadBezierTo__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_quadBezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_quadBezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_quadBezierTo" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPolyline_quadBezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_quadBezierTo" "', argument " "3"" of type '" "ofPoint const &""'"); 
  }
  arg3 = (ofPoint *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofPolyline_quadBezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_quadBezierTo" "', argument " "4"" of type '" "ofPoint const &""'"); 
  }
  arg4 = (ofPoint *)(argp4);
  (arg1)->quadBezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_quadBezierTo__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_quadBezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_quadBezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_quadBezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_quadBezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_quadBezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_quadBezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_quadBezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_int(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofPolyline_quadBezierTo" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_quadBezierTo__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_quadBezierTo" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_quadBezierTo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_quadBezierTo" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofPolyline_quadBezierTo" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofPolyline_quadBezierTo" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofPolyline_quadBezierTo" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofPolyline_quadBezierTo" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_quadBezierTo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 10) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_quadBezierTo__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_quadBezierTo__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_quadBezierTo__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_quadBezierTo__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_quadBezierTo__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_quadBezierTo__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function quadBezierTo.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_getSmoothed__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofPolyline result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getSmoothed" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_getSmoothed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_getSmoothed" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (arg1)->getSmoothed(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofPolyline((const ofPolyline&)(result))), SWIGTYPE_p_ofPolyline, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_getSmoothed__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ofPolyline result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getSmoothed" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_getSmoothed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (arg1)->getSmoothed(arg2);
  jsresult = SWIG_NewPointerObj((new ofPolyline((const ofPolyline&)(result))), SWIGTYPE_p_ofPolyline, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_getSmoothed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_getSmoothed__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_getSmoothed__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getSmoothed.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_getResampledBySpacing(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofPolyline result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_getResampledBySpacing.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getResampledBySpacing" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_getResampledBySpacing" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (arg1)->getResampledBySpacing(arg2);
  jsresult = SWIG_NewPointerObj((new ofPolyline((const ofPolyline&)(result))), SWIGTYPE_p_ofPolyline, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_getResampledByCount(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ofPolyline result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_getResampledByCount.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getResampledByCount" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_getResampledByCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (arg1)->getResampledByCount(arg2);
  jsresult = SWIG_NewPointerObj((new ofPolyline((const ofPolyline&)(result))), SWIGTYPE_p_ofPolyline, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_getBoundingBox(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofRectangle result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_getBoundingBox.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getBoundingBox" "', argument " "1"" of type '" "ofPolyline const *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  result = ((ofPolyline const *)arg1)->getBoundingBox();
  jsresult = SWIG_NewPointerObj((new ofRectangle((const ofRectangle&)(result))), SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_getClosestPoint__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ofPoint result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getClosestPoint" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_getClosestPoint" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_getClosestPoint" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPolyline_getClosestPoint" "', argument " "3"" of type '" "unsigned int *""'"); 
  }
  arg3 = (unsigned int *)(argp3);
  result = (arg1)->getClosestPoint((ofPoint const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_getClosestPoint__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofPoint result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getClosestPoint" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_getClosestPoint" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_getClosestPoint" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  result = (arg1)->getClosestPoint((ofPoint const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_getClosestPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_getClosestPoint__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_getClosestPoint__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getClosestPoint.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_inside__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  ofPolyline *arg3 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofPolyline_inside" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_inside" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofPolyline,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofPolyline_inside" "', argument " "3"" of type '" "ofPolyline const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_inside" "', argument " "3"" of type '" "ofPolyline const &""'"); 
  }
  arg3 = (ofPolyline *)(argp3);
  result = (bool)ofPolyline::inside(arg1,arg2,(ofPolyline const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_inside__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  ofPolyline *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_inside" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_inside" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofPolyline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_inside" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_inside" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  arg2 = (ofPolyline *)(argp2);
  result = (bool)ofPolyline::inside((ofVec3f const &)*arg1,(ofPolyline const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_inside__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_inside" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_inside" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofPolyline_inside" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)(arg1)->inside(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_inside__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_inside" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofPolyline_inside" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofPolyline_inside" "', argument " "2"" of type '" "ofPoint const &""'"); 
  }
  arg2 = (ofPoint *)(argp2);
  result = (bool)(arg1)->inside((ofPoint const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_inside(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_inside__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_inside__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_inside__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_inside__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function inside.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_simplify__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_simplify" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_simplify" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->simplify(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_simplify__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_simplify" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  (arg1)->simplify();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofPolyline_simplify(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_simplify__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofPolyline_simplify__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function simplify.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_size(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_size.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_size" "', argument " "1"" of type '" "ofPolyline const *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  result = ((ofPolyline const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_resize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_resize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_resize" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  (arg1)->resize(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_setClosed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_setClosed.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_setClosed" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofPolyline_setClosed" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setClosed(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_isClosed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_isClosed.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_isClosed" "', argument " "1"" of type '" "ofPolyline const *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  result = (bool)((ofPolyline const *)arg1)->isClosed();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_close(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_close.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_close" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  (arg1)->close();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_hasChanged(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_hasChanged.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_hasChanged" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  result = (bool)(arg1)->hasChanged();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_getVertices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ofPoint > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_getVertices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getVertices" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  result = (std::vector< ofPoint > *) &(arg1)->getVertices();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ofVec3f_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_getPerimeter(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_getPerimeter.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getPerimeter" "', argument " "1"" of type '" "ofPolyline const *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  result = (float)((ofPolyline const *)arg1)->getPerimeter();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_getArea(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_getArea.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getArea" "', argument " "1"" of type '" "ofPolyline const *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  result = (float)((ofPolyline const *)arg1)->getArea();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_getCentroid2D(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPoint result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_getCentroid2D.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_getCentroid2D" "', argument " "1"" of type '" "ofPolyline const *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  result = ((ofPolyline const *)arg1)->getCentroid2D();
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofPolyline_draw(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPolyline *arg1 = (ofPolyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofPolyline_draw.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofPolyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofPolyline_draw" "', argument " "1"" of type '" "ofPolyline *""'"); 
  }
  arg1 = (ofPolyline *)(argp1);
  (arg1)->draw();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofPolyline(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofPolyline(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofPolyline *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofTessellator__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofTessellator *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofTessellator__SWIG_0.");  
  result = (ofTessellator *)new ofTessellator();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofTessellator, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofTessellator(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofTessellator(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofTessellator *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofTessellator__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofTessellator *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofTessellator *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofTessellator__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofTessellator,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofTessellator" "', argument " "1"" of type '" "ofTessellator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofTessellator" "', argument " "1"" of type '" "ofTessellator const &""'"); 
  }
  arg1 = (ofTessellator *)(argp1);
  result = (ofTessellator *)new ofTessellator((ofTessellator const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofTessellator, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofTessellator(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofTessellator__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofTessellator__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofTessellator");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToMesh__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTessellator *arg1 = (ofTessellator *) 0 ;
  std::vector< ofPolyline > *arg2 = 0 ;
  ofPolyWindingMode arg3 ;
  ofMesh *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTessellator_tessellateToMesh" "', argument " "1"" of type '" "ofTessellator *""'"); 
  }
  arg1 = (ofTessellator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofPolyline_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTessellator_tessellateToMesh" "', argument " "2"" of type '" "std::vector< ofPolyline > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToMesh" "', argument " "2"" of type '" "std::vector< ofPolyline > const &""'"); 
  }
  arg2 = (std::vector< ofPolyline > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTessellator_tessellateToMesh" "', argument " "3"" of type '" "ofPolyWindingMode""'");
  } 
  arg3 = (ofPolyWindingMode)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofMesh,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofTessellator_tessellateToMesh" "', argument " "4"" of type '" "ofMesh &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToMesh" "', argument " "4"" of type '" "ofMesh &""'"); 
  }
  arg4 = (ofMesh *)(argp4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTessellator_tessellateToMesh" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  (arg1)->tessellateToMesh((std::vector< ofPolyline > const &)*arg2,arg3,*arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToMesh__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTessellator *arg1 = (ofTessellator *) 0 ;
  std::vector< ofPolyline > *arg2 = 0 ;
  ofPolyWindingMode arg3 ;
  ofMesh *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTessellator_tessellateToMesh" "', argument " "1"" of type '" "ofTessellator *""'"); 
  }
  arg1 = (ofTessellator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofPolyline_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTessellator_tessellateToMesh" "', argument " "2"" of type '" "std::vector< ofPolyline > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToMesh" "', argument " "2"" of type '" "std::vector< ofPolyline > const &""'"); 
  }
  arg2 = (std::vector< ofPolyline > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTessellator_tessellateToMesh" "', argument " "3"" of type '" "ofPolyWindingMode""'");
  } 
  arg3 = (ofPolyWindingMode)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofMesh,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofTessellator_tessellateToMesh" "', argument " "4"" of type '" "ofMesh &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToMesh" "', argument " "4"" of type '" "ofMesh &""'"); 
  }
  arg4 = (ofMesh *)(argp4);
  (arg1)->tessellateToMesh((std::vector< ofPolyline > const &)*arg2,arg3,*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToMesh__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTessellator *arg1 = (ofTessellator *) 0 ;
  ofPolyline *arg2 = 0 ;
  ofPolyWindingMode arg3 ;
  ofMesh *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTessellator_tessellateToMesh" "', argument " "1"" of type '" "ofTessellator *""'"); 
  }
  arg1 = (ofTessellator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPolyline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTessellator_tessellateToMesh" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToMesh" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  arg2 = (ofPolyline *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTessellator_tessellateToMesh" "', argument " "3"" of type '" "ofPolyWindingMode""'");
  } 
  arg3 = (ofPolyWindingMode)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofMesh,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofTessellator_tessellateToMesh" "', argument " "4"" of type '" "ofMesh &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToMesh" "', argument " "4"" of type '" "ofMesh &""'"); 
  }
  arg4 = (ofMesh *)(argp4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTessellator_tessellateToMesh" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  (arg1)->tessellateToMesh((ofPolyline const &)*arg2,arg3,*arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToMesh__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTessellator *arg1 = (ofTessellator *) 0 ;
  ofPolyline *arg2 = 0 ;
  ofPolyWindingMode arg3 ;
  ofMesh *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTessellator_tessellateToMesh" "', argument " "1"" of type '" "ofTessellator *""'"); 
  }
  arg1 = (ofTessellator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPolyline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTessellator_tessellateToMesh" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToMesh" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  arg2 = (ofPolyline *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTessellator_tessellateToMesh" "', argument " "3"" of type '" "ofPolyWindingMode""'");
  } 
  arg3 = (ofPolyWindingMode)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofMesh,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofTessellator_tessellateToMesh" "', argument " "4"" of type '" "ofMesh &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToMesh" "', argument " "4"" of type '" "ofMesh &""'"); 
  }
  arg4 = (ofMesh *)(argp4);
  (arg1)->tessellateToMesh((ofPolyline const &)*arg2,arg3,*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToMesh(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTessellator_tessellateToMesh__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTessellator_tessellateToMesh__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTessellator_tessellateToMesh__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTessellator_tessellateToMesh__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function tessellateToMesh.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToPolylines__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTessellator *arg1 = (ofTessellator *) 0 ;
  std::vector< ofPolyline > *arg2 = 0 ;
  ofPolyWindingMode arg3 ;
  std::vector< ofPolyline > *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "1"" of type '" "ofTessellator *""'"); 
  }
  arg1 = (ofTessellator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofPolyline_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "2"" of type '" "std::vector< ofPolyline > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToPolylines" "', argument " "2"" of type '" "std::vector< ofPolyline > const &""'"); 
  }
  arg2 = (std::vector< ofPolyline > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "3"" of type '" "ofPolyWindingMode""'");
  } 
  arg3 = (ofPolyWindingMode)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_ofPolyline_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "4"" of type '" "std::vector< ofPolyline > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToPolylines" "', argument " "4"" of type '" "std::vector< ofPolyline > &""'"); 
  }
  arg4 = (std::vector< ofPolyline > *)(argp4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  (arg1)->tessellateToPolylines((std::vector< ofPolyline > const &)*arg2,arg3,*arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToPolylines__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTessellator *arg1 = (ofTessellator *) 0 ;
  std::vector< ofPolyline > *arg2 = 0 ;
  ofPolyWindingMode arg3 ;
  std::vector< ofPolyline > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "1"" of type '" "ofTessellator *""'"); 
  }
  arg1 = (ofTessellator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_ofPolyline_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "2"" of type '" "std::vector< ofPolyline > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToPolylines" "', argument " "2"" of type '" "std::vector< ofPolyline > const &""'"); 
  }
  arg2 = (std::vector< ofPolyline > *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "3"" of type '" "ofPolyWindingMode""'");
  } 
  arg3 = (ofPolyWindingMode)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_ofPolyline_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "4"" of type '" "std::vector< ofPolyline > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToPolylines" "', argument " "4"" of type '" "std::vector< ofPolyline > &""'"); 
  }
  arg4 = (std::vector< ofPolyline > *)(argp4);
  (arg1)->tessellateToPolylines((std::vector< ofPolyline > const &)*arg2,arg3,*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToPolylines__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTessellator *arg1 = (ofTessellator *) 0 ;
  ofPolyline *arg2 = 0 ;
  ofPolyWindingMode arg3 ;
  std::vector< ofPolyline > *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "1"" of type '" "ofTessellator *""'"); 
  }
  arg1 = (ofTessellator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPolyline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToPolylines" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  arg2 = (ofPolyline *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "3"" of type '" "ofPolyWindingMode""'");
  } 
  arg3 = (ofPolyWindingMode)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_ofPolyline_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "4"" of type '" "std::vector< ofPolyline > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToPolylines" "', argument " "4"" of type '" "std::vector< ofPolyline > &""'"); 
  }
  arg4 = (std::vector< ofPolyline > *)(argp4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  (arg1)->tessellateToPolylines((ofPolyline const &)*arg2,arg3,*arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToPolylines__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTessellator *arg1 = (ofTessellator *) 0 ;
  ofPolyline *arg2 = 0 ;
  ofPolyWindingMode arg3 ;
  std::vector< ofPolyline > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "1"" of type '" "ofTessellator *""'"); 
  }
  arg1 = (ofTessellator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPolyline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToPolylines" "', argument " "2"" of type '" "ofPolyline const &""'"); 
  }
  arg2 = (ofPolyline *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "3"" of type '" "ofPolyWindingMode""'");
  } 
  arg3 = (ofPolyWindingMode)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_ofPolyline_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofTessellator_tessellateToPolylines" "', argument " "4"" of type '" "std::vector< ofPolyline > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofTessellator_tessellateToPolylines" "', argument " "4"" of type '" "std::vector< ofPolyline > &""'"); 
  }
  arg4 = (std::vector< ofPolyline > *)(argp4);
  (arg1)->tessellateToPolylines((ofPolyline const &)*arg2,arg3,*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTessellator_tessellateToPolylines(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTessellator_tessellateToPolylines__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTessellator_tessellateToPolylines__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTessellator_tessellateToPolylines__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTessellator_tessellateToPolylines__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function tessellateToPolylines.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_character_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_character_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_character_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->character = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_character_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_character_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (int) ((arg1)->character);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_height_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_height_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (int) ((arg1)->height);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_width_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_width_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (int) ((arg1)->width);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_setWidth_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_setWidth_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_setWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->setWidth = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_setWidth_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_setWidth_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (int) ((arg1)->setWidth);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_topExtent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_topExtent_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_topExtent_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->topExtent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_topExtent_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_topExtent_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (int) ((arg1)->topExtent);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_leftExtent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_leftExtent_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_leftExtent_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->leftExtent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_leftExtent_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_leftExtent_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (int) ((arg1)->leftExtent);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_tW_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_tW_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_tW_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->tW = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_tW_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_tW_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->tW);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_tH_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_tH_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_tH_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->tH = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_tH_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_tH_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->tH);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_x1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_x1_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_x1_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->x1 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_x1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_x1_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->x1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_x2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_x2_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_x2_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->x2 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_x2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_x2_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->x2);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_y1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_y1_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_y1_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->y1 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_y1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_y1_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->y1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_y2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_y2_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_y2_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->y2 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_y2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_y2_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->y2);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_t1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_t1_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_t1_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->t1 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_t1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_t1_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->t1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_t2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_t2_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_t2_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->t2 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_t2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_t2_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->t2);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_v1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_v1_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_v1_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->v1 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_v1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_v1_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->v1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_charProps_v2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  charProps *arg1 = (charProps *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_v2_set" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charProps_v2_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->v2 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_charProps_v2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  charProps *arg1 = (charProps *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_charProps, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charProps_v2_get" "', argument " "1"" of type '" "charProps *""'"); 
  }
  arg1 = (charProps *)(argp1);
  result = (float) ((arg1)->v2);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_charProps(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  charProps *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_charProps.");  
  result = (charProps *)new charProps();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_charProps, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_charProps(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_charProps(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (charProps *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_NUM_CHARACTER_TO_START(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(33));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofTrueTypeFont(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofTrueTypeFont *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofTrueTypeFont.");  
  result = (ofTrueTypeFont *)new ofTrueTypeFont();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofTrueTypeFont, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofTrueTypeFont(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofTrueTypeFont(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofTrueTypeFont *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_setGlobalDpi(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_setGlobalDpi.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofTrueTypeFont_setGlobalDpi" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofTrueTypeFont::setGlobalDpi(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_loadFont__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  float arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_loadFont" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTrueTypeFont_loadFont" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTrueTypeFont_loadFont" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTrueTypeFont_loadFont" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  ecode6 = SWIG_AsVal_bool(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTrueTypeFont_loadFont" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = (bool)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofTrueTypeFont_loadFont" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_int(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofTrueTypeFont_loadFont" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  result = (bool)(arg1)->loadFont(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_loadFont__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_loadFont" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTrueTypeFont_loadFont" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTrueTypeFont_loadFont" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTrueTypeFont_loadFont" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  ecode6 = SWIG_AsVal_bool(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTrueTypeFont_loadFont" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = (bool)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofTrueTypeFont_loadFont" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  result = (bool)(arg1)->loadFont(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_loadFont__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_loadFont" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTrueTypeFont_loadFont" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTrueTypeFont_loadFont" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTrueTypeFont_loadFont" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  ecode6 = SWIG_AsVal_bool(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofTrueTypeFont_loadFont" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = (bool)(val6);
  result = (bool)(arg1)->loadFont(arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_loadFont__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_loadFont" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTrueTypeFont_loadFont" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTrueTypeFont_loadFont" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofTrueTypeFont_loadFont" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  result = (bool)(arg1)->loadFont(arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_loadFont__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_loadFont" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTrueTypeFont_loadFont" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTrueTypeFont_loadFont" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->loadFont(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_loadFont__SWIG_5(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_loadFont" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTrueTypeFont_loadFont" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)(arg1)->loadFont(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_loadFont(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTrueTypeFont_loadFont__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTrueTypeFont_loadFont__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTrueTypeFont_loadFont__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTrueTypeFont_loadFont__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTrueTypeFont_loadFont__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofTrueTypeFont_loadFont__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function loadFont.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_isLoaded(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_isLoaded.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_isLoaded" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  result = (bool)(arg1)->isLoaded();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_isAntiAliased(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_isAntiAliased.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_isAntiAliased" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  result = (bool)(arg1)->isAntiAliased();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_hasFullCharacterSet(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_hasFullCharacterSet.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_hasFullCharacterSet" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  result = (bool)(arg1)->hasFullCharacterSet();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_getSize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_getSize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_getSize" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  result = (int)(arg1)->getSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_getLineHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_getLineHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_getLineHeight" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  result = (float)(arg1)->getLineHeight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_setLineHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_setLineHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_setLineHeight" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTrueTypeFont_setLineHeight" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setLineHeight(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_getLetterSpacing(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_getLetterSpacing.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_getLetterSpacing" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  result = (float)(arg1)->getLetterSpacing();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_setLetterSpacing(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_setLetterSpacing.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_setLetterSpacing" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTrueTypeFont_setLetterSpacing" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setLetterSpacing(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_getSpaceSize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_getSpaceSize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_getSpaceSize" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  result = (float)(arg1)->getSpaceSize();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_setSpaceSize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_setSpaceSize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_setSpaceSize" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTrueTypeFont_setSpaceSize" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setSpaceSize(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_stringWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_stringWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_stringWidth" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (float)(arg1)->stringWidth(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_stringHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_stringHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_stringHeight" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (float)(arg1)->stringHeight(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_getStringBoundingBox(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofRectangle result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_getStringBoundingBox.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_getStringBoundingBox" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTrueTypeFont_getStringBoundingBox" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTrueTypeFont_getStringBoundingBox" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (arg1)->getStringBoundingBox(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofRectangle((const ofRectangle&)(result))), SWIGTYPE_p_ofRectangle, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_drawString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_drawString.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_drawString" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTrueTypeFont_drawString" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTrueTypeFont_drawString" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->drawString(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_drawStringAsShapes(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_drawStringAsShapes.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_drawStringAsShapes" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofTrueTypeFont_drawStringAsShapes" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofTrueTypeFont_drawStringAsShapes" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->drawStringAsShapes(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_getNumCharacters(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_getNumCharacters.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_getNumCharacters" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  result = (int)(arg1)->getNumCharacters();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_getCharacterAsPoints(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ofTTFCharacter result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_getCharacterAsPoints.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_getCharacterAsPoints" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofTrueTypeFont_getCharacterAsPoints" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (arg1)->getCharacterAsPoints(arg2);
  jsresult = SWIG_NewPointerObj((new ofTTFCharacter((const ofTTFCharacter&)(result))), SWIGTYPE_p_ofPath, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_getStringAsPoints(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  SwigValueWrapper< std::vector< ofPath > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_getStringAsPoints.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_getStringAsPoints" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (arg1)->getStringAsPoints(arg2);
  jsresult = SWIG_NewPointerObj((new std::vector< ofTTFCharacter >((const std::vector< ofTTFCharacter >&)(result))), SWIGTYPE_p_std__vectorT_ofPath_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_bind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_bind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_bind" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  (arg1)->bind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofTrueTypeFont_unbind(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofTrueTypeFont_unbind.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofTrueTypeFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofTrueTypeFont_unbind" "', argument " "1"" of type '" "ofTrueTypeFont *""'"); 
  }
  arg1 = (ofTrueTypeFont *)(argp1);
  (arg1)->unbind();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNextPow2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNextPow2.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNextPow2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (int)ofNextPow2(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSeedRandom__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofSeedRandom();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSeedRandom__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSeedRandom" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ofSeedRandom(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSeedRandom(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSeedRandom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSeedRandom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSeedRandom.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRandom__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRandom" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (float)ofRandom(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofRandom__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRandom" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofRandom" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (float)ofRandom(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofRandom(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRandom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofRandom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofRandom.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRandomf(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRandomf.");  
  
  result = (float)ofRandomf();
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRandomuf(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRandomuf.");  
  
  result = (float)ofRandomuf();
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNormalize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofNormalize.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNormalize" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNormalize" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNormalize" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (float)ofNormalize(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMap__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMap" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMap" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMap" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMap" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMap" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_bool(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofMap" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = (bool)(val6);
  result = (float)ofMap(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMap__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMap" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMap" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMap" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMap" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMap" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  result = (float)ofMap(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofMap(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMap__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMap__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofMap.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofClamp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofClamp.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofClamp" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofClamp" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofClamp" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (float)ofClamp(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLerp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLerp.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofLerp" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLerp" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofLerp" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (float)ofLerp(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDist(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDist.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDist" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDist" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDist" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDist" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (float)ofDist(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDistSquared(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDistSquared.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDistSquared" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofDistSquared" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofDistSquared" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofDistSquared" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (float)ofDistSquared(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSign(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSign.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSign" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (int)ofSign(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofInRange(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofInRange.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofInRange" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofInRange" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofInRange" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)ofInRange(arg1,arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRadToDeg(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRadToDeg.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofRadToDeg" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (float)ofRadToDeg(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDegToRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDegToRad.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofDegToRad" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (float)ofDegToRad(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLerpDegrees(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLerpDegrees.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofLerpDegrees" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLerpDegrees" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofLerpDegrees" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (float)ofLerpDegrees(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLerpRadians(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLerpRadians.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofLerpRadians" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLerpRadians" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofLerpRadians" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (float)ofLerpRadians(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofAngleDifferenceDegrees(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofAngleDifferenceDegrees.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofAngleDifferenceDegrees" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofAngleDifferenceDegrees" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (float)ofAngleDifferenceDegrees(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofAngleDifferenceRadians(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofAngleDifferenceRadians.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofAngleDifferenceRadians" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofAngleDifferenceRadians" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (float)ofAngleDifferenceRadians(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofWrapRadians__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofWrapRadians" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofWrapRadians" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofWrapRadians" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (float)ofWrapRadians(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofWrapRadians__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofWrapRadians" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofWrapRadians" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (float)ofWrapRadians(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofWrapRadians__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofWrapRadians" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (float)ofWrapRadians(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofWrapRadians(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofWrapRadians__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofWrapRadians__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofWrapRadians__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofWrapRadians.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofWrapDegrees__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofWrapDegrees" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofWrapDegrees" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofWrapDegrees" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (float)ofWrapDegrees(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofWrapDegrees__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofWrapDegrees" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofWrapDegrees" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (float)ofWrapDegrees(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofWrapDegrees__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofWrapDegrees" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (float)ofWrapDegrees(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofWrapDegrees(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofWrapDegrees__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofWrapDegrees__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofWrapDegrees__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofWrapDegrees.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRandomWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRandomWidth.");  
  
  result = (float)ofRandomWidth();
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofRandomHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofRandomHeight.");  
  
  result = (float)ofRandomHeight();
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofNoise__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNoise" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (float)ofNoise(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNoise__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNoise" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNoise" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (float)ofNoise(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNoise__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNoise" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNoise" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNoise" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (float)ofNoise(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofNoise__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofNoise" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofNoise" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofNoise" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofNoise" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (float)ofNoise(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofNoise(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNoise__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNoise__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNoise__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofNoise__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofNoise.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSignedNoise__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSignedNoise" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (float)ofSignedNoise(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSignedNoise__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSignedNoise" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSignedNoise" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (float)ofSignedNoise(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSignedNoise__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSignedNoise" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSignedNoise" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSignedNoise" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (float)ofSignedNoise(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSignedNoise__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSignedNoise" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSignedNoise" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSignedNoise" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSignedNoise" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (float)ofSignedNoise(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSignedNoise(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSignedNoise__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSignedNoise__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSignedNoise__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSignedNoise__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSignedNoise.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofInsidePoly__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  std::vector< ofPoint > *arg3 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofInsidePoly" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofInsidePoly" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofInsidePoly" "', argument " "3"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofInsidePoly" "', argument " "3"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  arg3 = (std::vector< ofPoint > *)(argp3);
  result = (bool)ofInsidePoly(arg1,arg2,(std::vector< ofVec3f > const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofInsidePoly__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofPoint *arg1 = 0 ;
  std::vector< ofPoint > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofInsidePoly" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofInsidePoly" "', argument " "1"" of type '" "ofPoint const &""'"); 
  }
  arg1 = (ofPoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__vectorT_ofVec3f_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofInsidePoly" "', argument " "2"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofInsidePoly" "', argument " "2"" of type '" "std::vector< ofPoint > const &""'"); 
  }
  arg2 = (std::vector< ofPoint > *)(argp2);
  result = (bool)ofInsidePoly((ofVec3f const &)*arg1,(std::vector< ofVec3f > const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofInsidePoly(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofInsidePoly__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofInsidePoly__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofInsidePoly.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLineSegmentIntersection(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPoint arg1 ;
  ofPoint arg2 ;
  ofPoint arg3 ;
  ofPoint arg4 ;
  ofPoint *arg5 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLineSegmentIntersection.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLineSegmentIntersection" "', argument " "1"" of type '" "ofPoint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLineSegmentIntersection" "', argument " "1"" of type '" "ofPoint""'");
    } else {
      arg1 = *((ofPoint *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofLineSegmentIntersection" "', argument " "2"" of type '" "ofPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLineSegmentIntersection" "', argument " "2"" of type '" "ofPoint""'");
    } else {
      arg2 = *((ofPoint *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofLineSegmentIntersection" "', argument " "3"" of type '" "ofPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLineSegmentIntersection" "', argument " "3"" of type '" "ofPoint""'");
    } else {
      arg3 = *((ofPoint *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofLineSegmentIntersection" "', argument " "4"" of type '" "ofPoint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLineSegmentIntersection" "', argument " "4"" of type '" "ofPoint""'");
    } else {
      arg4 = *((ofPoint *)(argp4));
    }
  }
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofLineSegmentIntersection" "', argument " "5"" of type '" "ofPoint &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLineSegmentIntersection" "', argument " "5"" of type '" "ofPoint &""'"); 
  }
  arg5 = (ofPoint *)(argp5);
  result = (bool)ofLineSegmentIntersection(arg1,arg2,arg3,arg4,*arg5);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBezierPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPoint arg1 ;
  ofPoint arg2 ;
  ofPoint arg3 ;
  ofPoint arg4 ;
  float arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  ofPoint result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBezierPoint.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBezierPoint" "', argument " "1"" of type '" "ofPoint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierPoint" "', argument " "1"" of type '" "ofPoint""'");
    } else {
      arg1 = *((ofPoint *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBezierPoint" "', argument " "2"" of type '" "ofPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierPoint" "', argument " "2"" of type '" "ofPoint""'");
    } else {
      arg2 = *((ofPoint *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofBezierPoint" "', argument " "3"" of type '" "ofPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierPoint" "', argument " "3"" of type '" "ofPoint""'");
    } else {
      arg3 = *((ofPoint *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofBezierPoint" "', argument " "4"" of type '" "ofPoint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierPoint" "', argument " "4"" of type '" "ofPoint""'");
    } else {
      arg4 = *((ofPoint *)(argp4));
    }
  }
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofBezierPoint" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  result = ofBezierPoint(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCurvePoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPoint arg1 ;
  ofPoint arg2 ;
  ofPoint arg3 ;
  ofPoint arg4 ;
  float arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  ofPoint result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCurvePoint.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCurvePoint" "', argument " "1"" of type '" "ofPoint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurvePoint" "', argument " "1"" of type '" "ofPoint""'");
    } else {
      arg1 = *((ofPoint *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCurvePoint" "', argument " "2"" of type '" "ofPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurvePoint" "', argument " "2"" of type '" "ofPoint""'");
    } else {
      arg2 = *((ofPoint *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofCurvePoint" "', argument " "3"" of type '" "ofPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurvePoint" "', argument " "3"" of type '" "ofPoint""'");
    } else {
      arg3 = *((ofPoint *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofCurvePoint" "', argument " "4"" of type '" "ofPoint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurvePoint" "', argument " "4"" of type '" "ofPoint""'");
    } else {
      arg4 = *((ofPoint *)(argp4));
    }
  }
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofCurvePoint" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  result = ofCurvePoint(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBezierTangent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPoint arg1 ;
  ofPoint arg2 ;
  ofPoint arg3 ;
  ofPoint arg4 ;
  float arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  ofPoint result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBezierTangent.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBezierTangent" "', argument " "1"" of type '" "ofPoint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierTangent" "', argument " "1"" of type '" "ofPoint""'");
    } else {
      arg1 = *((ofPoint *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofBezierTangent" "', argument " "2"" of type '" "ofPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierTangent" "', argument " "2"" of type '" "ofPoint""'");
    } else {
      arg2 = *((ofPoint *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofBezierTangent" "', argument " "3"" of type '" "ofPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierTangent" "', argument " "3"" of type '" "ofPoint""'");
    } else {
      arg3 = *((ofPoint *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofBezierTangent" "', argument " "4"" of type '" "ofPoint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBezierTangent" "', argument " "4"" of type '" "ofPoint""'");
    } else {
      arg4 = *((ofPoint *)(argp4));
    }
  }
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofBezierTangent" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  result = ofBezierTangent(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofCurveTangent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofPoint arg1 ;
  ofPoint arg2 ;
  ofPoint arg3 ;
  ofPoint arg4 ;
  float arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  ofPoint result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofCurveTangent.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofCurveTangent" "', argument " "1"" of type '" "ofPoint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurveTangent" "', argument " "1"" of type '" "ofPoint""'");
    } else {
      arg1 = *((ofPoint *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofCurveTangent" "', argument " "2"" of type '" "ofPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurveTangent" "', argument " "2"" of type '" "ofPoint""'");
    } else {
      arg2 = *((ofPoint *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofCurveTangent" "', argument " "3"" of type '" "ofPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurveTangent" "', argument " "3"" of type '" "ofPoint""'");
    } else {
      arg3 = *((ofPoint *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofVec3f,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofCurveTangent" "', argument " "4"" of type '" "ofPoint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofCurveTangent" "', argument " "4"" of type '" "ofPoint""'");
    } else {
      arg4 = *((ofPoint *)(argp4));
    }
  }
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofCurveTangent" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  result = ofCurveTangent(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj((new ofPoint((const ofPoint&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMatrix3x3_a_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_a_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_a_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->a = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_a_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_a_get" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float) ((arg1)->a);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMatrix3x3_b_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_b_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_b_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->b = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_b_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_b_get" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float) ((arg1)->b);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMatrix3x3_c_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_c_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_c_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->c = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_c_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_c_get" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float) ((arg1)->c);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMatrix3x3_d_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_d_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_d_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->d = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_d_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_d_get" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float) ((arg1)->d);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMatrix3x3_e_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_e_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_e_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->e = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_e_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_e_get" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float) ((arg1)->e);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMatrix3x3_f_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_f_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_f_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->f = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_f_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_f_get" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float) ((arg1)->f);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMatrix3x3_g_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_g_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_g_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->g = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_g_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_g_get" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float) ((arg1)->g);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMatrix3x3_h_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_h_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_h_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->h = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_h_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_h_get" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float) ((arg1)->h);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofMatrix3x3_i_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_i_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_i_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->i = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_i_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_i_get" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float) ((arg1)->i);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  ofMatrix3x3 *result;
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_0.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix3x3" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofMatrix3x3" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofMatrix3x3" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofMatrix3x3" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ofMatrix3x3" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ofMatrix3x3" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ofMatrix3x3" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_ofMatrix3x3" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_ofMatrix3x3" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  
  
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  ofMatrix3x3 *result;
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_1.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix3x3" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofMatrix3x3" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofMatrix3x3" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofMatrix3x3" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ofMatrix3x3" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ofMatrix3x3" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ofMatrix3x3" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_ofMatrix3x3" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  ofMatrix3x3 *result;
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_2.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix3x3" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofMatrix3x3" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofMatrix3x3" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofMatrix3x3" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ofMatrix3x3" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ofMatrix3x3" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ofMatrix3x3" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  ofMatrix3x3 *result;
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_3.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix3x3" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofMatrix3x3" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofMatrix3x3" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofMatrix3x3" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ofMatrix3x3" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ofMatrix3x3" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6);
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  ofMatrix3x3 *result;
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_4.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix3x3" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofMatrix3x3" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofMatrix3x3" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofMatrix3x3" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ofMatrix3x3" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5);
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_5(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofMatrix3x3 *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_5.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix3x3" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofMatrix3x3" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofMatrix3x3" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofMatrix3x3" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_6(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofMatrix3x3 *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_6.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix3x3" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofMatrix3x3" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofMatrix3x3" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_7(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofMatrix3x3 *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_7.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix3x3" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofMatrix3x3" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_8(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  ofMatrix3x3 *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_8.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix3x3" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3__SWIG_9(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofMatrix3x3 *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix3x3__SWIG_9.");  
  result = (ofMatrix3x3 *)new ofMatrix3x3();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix3x3(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix3x3__SWIG_9(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofMatrix3x3");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix3x3_set.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_set" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix3x3_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix3x3_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix3x3_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix3x3_set" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofMatrix3x3_set" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofMatrix3x3_set" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofMatrix3x3_set" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofMatrix3x3_set" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofMatrix3x3_set" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_transpose__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_transpose" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  (arg1)->transpose();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_transpose__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofMatrix3x3 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_transpose" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix3x3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix3x3_transpose" "', argument " "2"" of type '" "ofMatrix3x3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix3x3_transpose" "', argument " "2"" of type '" "ofMatrix3x3 const &""'"); 
  }
  arg2 = (ofMatrix3x3 *)(argp2);
  result = (arg1)->transpose((ofMatrix3x3 const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofMatrix3x3((const ofMatrix3x3&)(result))), SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_transpose(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix3x3_transpose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix3x3_transpose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function transpose.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_determinant__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_determinant" "', argument " "1"" of type '" "ofMatrix3x3 const *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  result = (float)((ofMatrix3x3 const *)arg1)->determinant();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_determinant__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_determinant" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix3x3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix3x3_determinant" "', argument " "2"" of type '" "ofMatrix3x3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix3x3_determinant" "', argument " "2"" of type '" "ofMatrix3x3 const &""'"); 
  }
  arg2 = (ofMatrix3x3 *)(argp2);
  result = (float)(arg1)->determinant((ofMatrix3x3 const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_determinant(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix3x3_determinant__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix3x3_determinant__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function determinant.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_invert(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix3x3_invert.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_invert" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  (arg1)->invert();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_inverse(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofMatrix3x3 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix3x3_inverse.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_inverse" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix3x3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix3x3_inverse" "', argument " "2"" of type '" "ofMatrix3x3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix3x3_inverse" "', argument " "2"" of type '" "ofMatrix3x3 const &""'"); 
  }
  arg2 = (ofMatrix3x3 *)(argp2);
  result = (arg1)->inverse((ofMatrix3x3 const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofMatrix3x3((const ofMatrix3x3&)(result))), SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix3x3_entrywiseTimes(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofMatrix3x3 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix3x3_entrywiseTimes.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix3x3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix3x3_entrywiseTimes" "', argument " "1"" of type '" "ofMatrix3x3 *""'"); 
  }
  arg1 = (ofMatrix3x3 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix3x3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix3x3_entrywiseTimes" "', argument " "2"" of type '" "ofMatrix3x3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix3x3_entrywiseTimes" "', argument " "2"" of type '" "ofMatrix3x3 const &""'"); 
  }
  arg2 = (ofMatrix3x3 *)(argp2);
  result = (arg1)->entrywiseTimes((ofMatrix3x3 const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofMatrix3x3((const ofMatrix3x3&)(result))), SWIGTYPE_p_ofMatrix3x3, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofMatrix3x3(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofMatrix3x3(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofMatrix3x3 *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofMatrix4x4__mat_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4__mat_set" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4__mat_set" "', argument " "2"" of type '" "ofVec4f [4]""'"); 
  } 
  arg2 = (ofVec4f *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) arg1->_mat[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""_mat""' of type '""ofVec4f [4]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4__mat_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec4f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4__mat_get" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = (ofVec4f *)(ofVec4f *) ((arg1)->_mat);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec4f, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix4x4__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofMatrix4x4 *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix4x4__SWIG_0.");  
  result = (ofMatrix4x4 *)new ofMatrix4x4();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix4x4__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofMatrix4x4 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofMatrix4x4 *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix4x4__SWIG_1.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofMatrix4x4" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofMatrix4x4" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = (ofMatrix4x4 *)new ofMatrix4x4((ofMatrix4x4 const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix4x4__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float *arg1 = (float *) (float *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofMatrix4x4 *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix4x4__SWIG_2.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofMatrix4x4" "', argument " "1"" of type '" "float const *const""'"); 
  }
  arg1 = (float *)(argp1);
  result = (ofMatrix4x4 *)new ofMatrix4x4((float const *)arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix4x4__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofQuaternion *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofMatrix4x4 *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix4x4__SWIG_3.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofMatrix4x4" "', argument " "1"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofMatrix4x4" "', argument " "1"" of type '" "ofQuaternion const &""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (ofMatrix4x4 *)new ofMatrix4x4((ofQuaternion const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix4x4__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  float val11 ;
  int ecode11 = 0 ;
  float val12 ;
  int ecode12 = 0 ;
  float val13 ;
  int ecode13 = 0 ;
  float val14 ;
  int ecode14 = 0 ;
  float val15 ;
  int ecode15 = 0 ;
  float val16 ;
  int ecode16 = 0 ;
  ofMatrix4x4 *result;
  if(args.Length() != 16) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofMatrix4x4__SWIG_4.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofMatrix4x4" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofMatrix4x4" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofMatrix4x4" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofMatrix4x4" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ofMatrix4x4" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ofMatrix4x4" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ofMatrix4x4" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_ofMatrix4x4" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_ofMatrix4x4" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_ofMatrix4x4" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  ecode11 = SWIG_AsVal_float(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_ofMatrix4x4" "', argument " "11"" of type '" "float""'");
  } 
  arg11 = (float)(val11);
  ecode12 = SWIG_AsVal_float(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_ofMatrix4x4" "', argument " "12"" of type '" "float""'");
  } 
  arg12 = (float)(val12);
  ecode13 = SWIG_AsVal_float(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_ofMatrix4x4" "', argument " "13"" of type '" "float""'");
  } 
  arg13 = (float)(val13);
  ecode14 = SWIG_AsVal_float(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_ofMatrix4x4" "', argument " "14"" of type '" "float""'");
  } 
  arg14 = (float)(val14);
  ecode15 = SWIG_AsVal_float(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_ofMatrix4x4" "', argument " "15"" of type '" "float""'");
  } 
  arg15 = (float)(val15);
  ecode16 = SWIG_AsVal_float(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_ofMatrix4x4" "', argument " "16"" of type '" "float""'");
  } 
  arg16 = (float)(val16);
  result = (ofMatrix4x4 *)new ofMatrix4x4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofMatrix4x4(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix4x4__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix4x4__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix4x4__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix4x4__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 16) {
    errorHandler.err.Clear();
    self = _wrap_new_ofMatrix4x4__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofMatrix4x4");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofMatrix4x4(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofMatrix4x4(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofMatrix4x4 *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getRowAsVec3f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getRowAsVec3f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getRowAsVec3f" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_getRowAsVec3f" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((ofMatrix4x4 const *)arg1)->getRowAsVec3f(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getRowAsVec4f(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getRowAsVec4f.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getRowAsVec4f" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_getRowAsVec4f" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((ofMatrix4x4 const *)arg1)->getRowAsVec4f(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_isValid(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_isValid.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_isValid" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = (bool)((ofMatrix4x4 const *)arg1)->isValid();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_isNaN(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_isNaN.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_isNaN" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = (bool)((ofMatrix4x4 const *)arg1)->isNaN();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_set" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_set" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_set" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  (arg1)->set((ofMatrix4x4 const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_set" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_set" "', argument " "2"" of type '" "float const *const""'"); 
  }
  arg2 = (float *)(argp2);
  (arg1)->set((float const *)arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_set__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_set" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_set" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = (double *)(argp2);
  (arg1)->set((double const *)arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_set__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  float val11 ;
  int ecode11 = 0 ;
  float val12 ;
  int ecode12 = 0 ;
  float val13 ;
  int ecode13 = 0 ;
  float val14 ;
  int ecode14 = 0 ;
  float val15 ;
  int ecode15 = 0 ;
  float val16 ;
  int ecode16 = 0 ;
  float val17 ;
  int ecode17 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_set" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_set" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofMatrix4x4_set" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofMatrix4x4_set" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ofMatrix4x4_set" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  ecode9 = SWIG_AsVal_float(args[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ofMatrix4x4_set" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = (float)(val9);
  ecode10 = SWIG_AsVal_float(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ofMatrix4x4_set" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = (float)(val10);
  ecode11 = SWIG_AsVal_float(args[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ofMatrix4x4_set" "', argument " "11"" of type '" "float""'");
  } 
  arg11 = (float)(val11);
  ecode12 = SWIG_AsVal_float(args[10], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ofMatrix4x4_set" "', argument " "12"" of type '" "float""'");
  } 
  arg12 = (float)(val12);
  ecode13 = SWIG_AsVal_float(args[11], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "ofMatrix4x4_set" "', argument " "13"" of type '" "float""'");
  } 
  arg13 = (float)(val13);
  ecode14 = SWIG_AsVal_float(args[12], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "ofMatrix4x4_set" "', argument " "14"" of type '" "float""'");
  } 
  arg14 = (float)(val14);
  ecode15 = SWIG_AsVal_float(args[13], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "ofMatrix4x4_set" "', argument " "15"" of type '" "float""'");
  } 
  arg15 = (float)(val15);
  ecode16 = SWIG_AsVal_float(args[14], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "ofMatrix4x4_set" "', argument " "16"" of type '" "float""'");
  } 
  arg16 = (float)(val16);
  ecode17 = SWIG_AsVal_float(args[15], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "ofMatrix4x4_set" "', argument " "17"" of type '" "float""'");
  } 
  arg17 = (float)(val17);
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 16) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_set__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getPtr__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getPtr" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = (float *)(arg1)->getPtr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getPtr__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getPtr" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = (float *)((ofMatrix4x4 const *)arg1)->getPtr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getPtr(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_getPtr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_getPtr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getPtr.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_isIdentity(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_isIdentity.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_isIdentity" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = (bool)((ofMatrix4x4 const *)arg1)->isIdentity();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeIdentityMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makeIdentityMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeIdentityMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  (arg1)->makeIdentityMatrix();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeScaleMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeScaleMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_makeScaleMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeScaleMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->makeScaleMatrix((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeScaleMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeScaleMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_makeScaleMatrix" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_makeScaleMatrix" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_makeScaleMatrix" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->makeScaleMatrix(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeScaleMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_makeScaleMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_makeScaleMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function makeScaleMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeTranslationMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeTranslationMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_makeTranslationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeTranslationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->makeTranslationMatrix((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeTranslationMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeTranslationMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_makeTranslationMatrix" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_makeTranslationMatrix" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_makeTranslationMatrix" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->makeTranslationMatrix(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeTranslationMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_makeTranslationMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_makeTranslationMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function makeTranslationMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->makeRotationMatrix((ofVec3f const &)*arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->makeRotationMatrix(arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->makeRotationMatrix(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  (arg1)->makeRotationMatrix((ofQuaternion const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  float arg4 ;
  ofVec3f *arg5 = 0 ;
  float arg6 ;
  ofVec3f *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  arg5 = (ofVec3f *)(argp5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "7"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeRotationMatrix" "', argument " "7"" of type '" "ofVec3f const &""'"); 
  }
  arg7 = (ofVec3f *)(argp7);
  (arg1)->makeRotationMatrix(arg2,(ofVec3f const &)*arg3,arg4,(ofVec3f const &)*arg5,arg6,(ofVec3f const &)*arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeRotationMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function makeRotationMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeInvertOf(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makeInvertOf.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeInvertOf" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_makeInvertOf" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeInvertOf" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  result = (bool)(arg1)->makeInvertOf((ofMatrix4x4 const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeOrthoNormalOf(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makeOrthoNormalOf.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeOrthoNormalOf" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_makeOrthoNormalOf" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeOrthoNormalOf" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  (arg1)->makeOrthoNormalOf((ofMatrix4x4 const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeFromMultiplicationOf(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  ofMatrix4x4 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makeFromMultiplicationOf.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeFromMultiplicationOf" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_makeFromMultiplicationOf" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeFromMultiplicationOf" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_makeFromMultiplicationOf" "', argument " "3"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeFromMultiplicationOf" "', argument " "3"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg3 = (ofMatrix4x4 *)(argp3);
  (arg1)->makeFromMultiplicationOf((ofMatrix4x4 const &)*arg2,(ofMatrix4x4 const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getInverse(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getInverse.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getInverse" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = (arg1)->getInverse();
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeOrthoMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makeOrthoMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeOrthoMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_makeOrthoMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_makeOrthoMatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_makeOrthoMatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ecode5 = SWIG_AsVal_double(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_makeOrthoMatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  ecode6 = SWIG_AsVal_double(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofMatrix4x4_makeOrthoMatrix" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = (double)(val6);
  ecode7 = SWIG_AsVal_double(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofMatrix4x4_makeOrthoMatrix" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = (double)(val7);
  (arg1)->makeOrthoMatrix(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeOrtho2DMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makeOrtho2DMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeOrtho2DMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_makeOrtho2DMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_makeOrtho2DMatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_makeOrtho2DMatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ecode5 = SWIG_AsVal_double(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_makeOrtho2DMatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  (arg1)->makeOrtho2DMatrix(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeFrustumMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makeFrustumMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeFrustumMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_makeFrustumMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_makeFrustumMatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_makeFrustumMatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ecode5 = SWIG_AsVal_double(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_makeFrustumMatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  ecode6 = SWIG_AsVal_double(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofMatrix4x4_makeFrustumMatrix" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = (double)(val6);
  ecode7 = SWIG_AsVal_double(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ofMatrix4x4_makeFrustumMatrix" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = (double)(val7);
  (arg1)->makeFrustumMatrix(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makePerspectiveMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makePerspectiveMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makePerspectiveMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_makePerspectiveMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_makePerspectiveMatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_makePerspectiveMatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ecode5 = SWIG_AsVal_double(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_makePerspectiveMatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  (arg1)->makePerspectiveMatrix(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeLookAtMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makeLookAtMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeLookAtMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_makeLookAtMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeLookAtMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_makeLookAtMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeLookAtMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMatrix4x4_makeLookAtMatrix" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeLookAtMatrix" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  (arg1)->makeLookAtMatrix((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_makeLookAtViewMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_makeLookAtViewMatrix.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_makeLookAtViewMatrix" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_makeLookAtViewMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeLookAtViewMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_makeLookAtViewMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeLookAtViewMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMatrix4x4_makeLookAtViewMatrix" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_makeLookAtViewMatrix" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  (arg1)->makeLookAtViewMatrix((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getOrtho(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  bool result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getOrtho.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getOrtho" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_getOrtho" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getOrtho" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = (double *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_getOrtho" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getOrtho" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = (double *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMatrix4x4_getOrtho" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getOrtho" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = (double *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofMatrix4x4_getOrtho" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getOrtho" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = (double *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ofMatrix4x4_getOrtho" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getOrtho" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = (double *)(argp6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ofMatrix4x4_getOrtho" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getOrtho" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = (double *)(argp7);
  result = (bool)((ofMatrix4x4 const *)arg1)->getOrtho(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getFrustum(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  bool result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getFrustum.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getFrustum" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_getFrustum" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getFrustum" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = (double *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_getFrustum" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getFrustum" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = (double *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMatrix4x4_getFrustum" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getFrustum" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = (double *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofMatrix4x4_getFrustum" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getFrustum" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = (double *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ofMatrix4x4_getFrustum" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getFrustum" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = (double *)(argp6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ofMatrix4x4_getFrustum" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getFrustum" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = (double *)(argp7);
  result = (bool)((ofMatrix4x4 const *)arg1)->getFrustum(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getPerspective(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getPerspective.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getPerspective" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_getPerspective" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getPerspective" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = (double *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_getPerspective" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getPerspective" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = (double *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMatrix4x4_getPerspective" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getPerspective" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = (double *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofMatrix4x4_getPerspective" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getPerspective" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = (double *)(argp5);
  result = (bool)((ofMatrix4x4 const *)arg1)->getPerspective(*arg2,*arg3,*arg4,*arg5);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getLookAt__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getLookAt" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_getLookAt" "', argument " "2"" of type '" "ofVec3f &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getLookAt" "', argument " "2"" of type '" "ofVec3f &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_getLookAt" "', argument " "3"" of type '" "ofVec3f &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getLookAt" "', argument " "3"" of type '" "ofVec3f &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMatrix4x4_getLookAt" "', argument " "4"" of type '" "ofVec3f &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getLookAt" "', argument " "4"" of type '" "ofVec3f &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_getLookAt" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ((ofMatrix4x4 const *)arg1)->getLookAt(*arg2,*arg3,*arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getLookAt__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getLookAt" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_getLookAt" "', argument " "2"" of type '" "ofVec3f &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getLookAt" "', argument " "2"" of type '" "ofVec3f &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_getLookAt" "', argument " "3"" of type '" "ofVec3f &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getLookAt" "', argument " "3"" of type '" "ofVec3f &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMatrix4x4_getLookAt" "', argument " "4"" of type '" "ofVec3f &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getLookAt" "', argument " "4"" of type '" "ofVec3f &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  ((ofMatrix4x4 const *)arg1)->getLookAt(*arg2,*arg3,*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getLookAt(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_getLookAt__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_getLookAt__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getLookAt.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_decompose(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofQuaternion *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  ofQuaternion *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_decompose.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_decompose" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_decompose" "', argument " "2"" of type '" "ofVec3f &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_decompose" "', argument " "2"" of type '" "ofVec3f &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_decompose" "', argument " "3"" of type '" "ofQuaternion &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_decompose" "', argument " "3"" of type '" "ofQuaternion &""'"); 
  }
  arg3 = (ofQuaternion *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMatrix4x4_decompose" "', argument " "4"" of type '" "ofVec3f &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_decompose" "', argument " "4"" of type '" "ofVec3f &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofMatrix4x4_decompose" "', argument " "5"" of type '" "ofQuaternion &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_decompose" "', argument " "5"" of type '" "ofQuaternion &""'"); 
  }
  arg5 = (ofQuaternion *)(argp5);
  ((ofMatrix4x4 const *)arg1)->decompose(*arg2,*arg3,*arg4,*arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newIdentityMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_newIdentityMatrix.");  
  
  result = ofMatrix4x4::newIdentityMatrix();
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newScaleMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_newScaleMatrix" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newScaleMatrix" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = ofMatrix4x4::newScaleMatrix((ofVec3f const &)*arg1);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newScaleMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofMatrix4x4 result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMatrix4x4_newScaleMatrix" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_newScaleMatrix" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_newScaleMatrix" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ofMatrix4x4::newScaleMatrix(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newScaleMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_newScaleMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_newScaleMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function newScaleMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newTranslationMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_newTranslationMatrix" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newTranslationMatrix" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = ofMatrix4x4::newTranslationMatrix((ofVec3f const &)*arg1);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newTranslationMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofMatrix4x4 result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMatrix4x4_newTranslationMatrix" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_newTranslationMatrix" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_newTranslationMatrix" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ofMatrix4x4::newTranslationMatrix(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newTranslationMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_newTranslationMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_newTranslationMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function newTranslationMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newRotationMatrix__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofMatrix4x4 result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ofMatrix4x4::newRotationMatrix((ofVec3f const &)*arg1,(ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newRotationMatrix__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofMatrix4x4 result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = ofMatrix4x4::newRotationMatrix(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newRotationMatrix__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  ofVec3f *arg2 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofMatrix4x4 result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ofMatrix4x4::newRotationMatrix(arg1,(ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newRotationMatrix__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  ofVec3f *arg4 = 0 ;
  float arg5 ;
  ofVec3f *arg6 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  ofMatrix4x4 result;
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "6"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "6"" of type '" "ofVec3f const &""'"); 
  }
  arg6 = (ofVec3f *)(argp6);
  result = ofMatrix4x4::newRotationMatrix(arg1,(ofVec3f const &)*arg2,arg3,(ofVec3f const &)*arg4,arg5,(ofVec3f const &)*arg6);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newRotationMatrix__SWIG_4(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "1"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newRotationMatrix" "', argument " "1"" of type '" "ofQuaternion const &""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = ofMatrix4x4::newRotationMatrix((ofQuaternion const &)*arg1);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newRotationMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_newRotationMatrix__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_newRotationMatrix__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_newRotationMatrix__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_newRotationMatrix__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_newRotationMatrix__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function newRotationMatrix.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getInverseOf(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getInverseOf.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getInverseOf" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getInverseOf" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = ofMatrix4x4::getInverseOf((ofMatrix4x4 const &)*arg1);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getTransposedOf(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getTransposedOf.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getTransposedOf" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getTransposedOf" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = ofMatrix4x4::getTransposedOf((ofMatrix4x4 const &)*arg1);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getOrthoNormalOf(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getOrthoNormalOf.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getOrthoNormalOf" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_getOrthoNormalOf" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = ofMatrix4x4::getOrthoNormalOf((ofMatrix4x4 const &)*arg1);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newOrthoMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_newOrthoMatrix.");  
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMatrix4x4_newOrthoMatrix" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = (double)(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_newOrthoMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_newOrthoMatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_newOrthoMatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_newOrthoMatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofMatrix4x4_newOrthoMatrix" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = (double)(val6);
  result = ofMatrix4x4::newOrthoMatrix(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newOrtho2DMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_newOrtho2DMatrix.");  
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMatrix4x4_newOrtho2DMatrix" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = (double)(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_newOrtho2DMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_newOrtho2DMatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_newOrtho2DMatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  result = ofMatrix4x4::newOrtho2DMatrix(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newFrustumMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_newFrustumMatrix.");  
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMatrix4x4_newFrustumMatrix" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = (double)(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_newFrustumMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_newFrustumMatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_newFrustumMatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_newFrustumMatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofMatrix4x4_newFrustumMatrix" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = (double)(val6);
  result = ofMatrix4x4::newFrustumMatrix(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newPerspectiveMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_newPerspectiveMatrix.");  
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofMatrix4x4_newPerspectiveMatrix" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = (double)(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_newPerspectiveMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_newPerspectiveMatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_newPerspectiveMatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  result = ofMatrix4x4::newPerspectiveMatrix(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_newLookAtMatrix(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofMatrix4x4 result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_newLookAtMatrix.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_newLookAtMatrix" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newLookAtMatrix" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_newLookAtMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newLookAtMatrix" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofMatrix4x4_newLookAtMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_newLookAtMatrix" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  result = ofMatrix4x4::newLookAtMatrix((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3);
  jsresult = SWIG_NewPointerObj((new ofMatrix4x4((const ofMatrix4x4&)(result))), SWIGTYPE_p_ofMatrix4x4, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMult__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_postMult" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_postMult" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_postMult" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ((ofMatrix4x4 const *)arg1)->postMult((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMult__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec4f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_postMult" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_postMult" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_postMult" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = ((ofMatrix4x4 const *)arg1)->postMult((ofVec4f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_preMult__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_preMult" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_preMult" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_preMult" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ((ofMatrix4x4 const *)arg1)->preMult((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_preMult__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec4f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_preMult" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_preMult" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_preMult" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = ((ofMatrix4x4 const *)arg1)->preMult((ofVec4f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_setRotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_setRotate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_setRotate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_setRotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_setRotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  (arg1)->setRotate((ofQuaternion const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_setTranslation__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_setTranslation" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_setTranslation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_setTranslation" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_setTranslation" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->setTranslation(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_setTranslation__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_setTranslation" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_setTranslation" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_setTranslation" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->setTranslation((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_setTranslation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_setTranslation__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_setTranslation__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setTranslation.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_rotate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_rotate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_rotate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_rotate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_rotate" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->rotate(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_rotateRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_rotateRad.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_rotateRad" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_rotateRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_rotateRad" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_rotateRad" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_rotateRad" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->rotateRad(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_rotate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_rotate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_rotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_rotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  (arg1)->rotate((ofQuaternion const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_rotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_rotate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_rotate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rotate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_translate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_translate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_translate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_translate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_translate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->translate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_translate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_translate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_translate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_translate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->translate((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_translate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_translate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_translate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function translate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_scale__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_scale" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_scale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_scale" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->scale(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_scale__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_scale" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_scale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_scale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->scale((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_scale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_scale__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_scale__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function scale.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glRotate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_glRotate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_glRotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_glRotate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_glRotate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_glRotate" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->glRotate(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glRotateRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_glRotateRad.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_glRotateRad" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_glRotateRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_glRotateRad" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_glRotateRad" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_glRotateRad" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->glRotateRad(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glRotate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_glRotate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_glRotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_glRotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  (arg1)->glRotate((ofQuaternion const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glRotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_glRotate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_glRotate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function glRotate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glTranslate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_glTranslate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_glTranslate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_glTranslate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_glTranslate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->glTranslate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glTranslate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_glTranslate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_glTranslate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_glTranslate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->glTranslate((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glTranslate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_glTranslate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_glTranslate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function glTranslate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glScale__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_glScale" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_glScale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_glScale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_glScale" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->glScale(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glScale__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_glScale" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_glScale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_glScale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->glScale((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_glScale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_glScale__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_glScale__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function glScale.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getRotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofQuaternion result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getRotate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getRotate" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = ((ofMatrix4x4 const *)arg1)->getRotate();
  jsresult = SWIG_NewPointerObj((new ofQuaternion((const ofQuaternion&)(result))), SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getTranslation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getTranslation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getTranslation" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = ((ofMatrix4x4 const *)arg1)->getTranslation();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_getScale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_getScale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_getScale" "', argument " "1"" of type '" "ofMatrix4x4 const *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  result = ((ofMatrix4x4 const *)arg1)->getScale();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_transform3x3__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_transform3x3" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_transform3x3" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_transform3x3" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_transform3x3" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  result = ofMatrix4x4::transform3x3((ofVec3f const &)*arg1,(ofMatrix4x4 const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_transform3x3__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_transform3x3" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_transform3x3" "', argument " "1"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_transform3x3" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_transform3x3" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ofMatrix4x4::transform3x3((ofMatrix4x4 const &)*arg1,(ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_transform3x3(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_transform3x3__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_transform3x3__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function transform3x3.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMult__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_postMult" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_postMult" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_postMult" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  (arg1)->postMult((ofMatrix4x4 const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMult(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_postMult__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_postMult__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_postMult__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function postMult.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_preMult__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_preMult" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_preMult" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_preMult" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  (arg1)->preMult((ofMatrix4x4 const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_preMult(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_preMult__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_preMult__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_preMult__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function preMult.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMultTranslate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_postMultTranslate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_postMultTranslate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_postMultTranslate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->postMultTranslate((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMultScale__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_postMultScale" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_postMultScale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_postMultScale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->postMultScale((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMultRotate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_postMultRotate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_postMultRotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_postMultRotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  (arg1)->postMultRotate((ofQuaternion const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMultTranslate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_postMultTranslate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_postMultTranslate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_postMultTranslate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_postMultTranslate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->postMultTranslate(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMultTranslate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_postMultTranslate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_postMultTranslate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function postMultTranslate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMultRotate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_postMultRotate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_postMultRotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_postMultRotate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_postMultRotate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofMatrix4x4_postMultRotate" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->postMultRotate(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMultRotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_postMultRotate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_postMultRotate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function postMultRotate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMultScale__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_postMultScale" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofMatrix4x4_postMultScale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofMatrix4x4_postMultScale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofMatrix4x4_postMultScale" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->postMultScale(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_postMultScale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_postMultScale__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofMatrix4x4_postMultScale__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function postMultScale.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_preMultScale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_preMultScale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_preMultScale" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_preMultScale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_preMultScale" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->preMultScale((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_preMultTranslate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_preMultTranslate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_preMultTranslate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_preMultTranslate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_preMultTranslate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->preMultTranslate((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofMatrix4x4_preMultRotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofMatrix4x4_preMultRotate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofMatrix4x4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofMatrix4x4_preMultRotate" "', argument " "1"" of type '" "ofMatrix4x4 *""'"); 
  }
  arg1 = (ofMatrix4x4 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofMatrix4x4_preMultRotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofMatrix4x4_preMultRotate" "', argument " "2"" of type '" "ofQuaternion const &""'"); 
  }
  arg2 = (ofQuaternion *)(argp2);
  (arg1)->preMultRotate((ofQuaternion const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofQuaternion__v_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec4f *arg2 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion__v_set" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofQuaternion__v_set" "', argument " "2"" of type '" "ofVec4f *""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  if (arg1) (arg1)->_v = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofQuaternion__v_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec4f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion__v_get" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (ofVec4f *)& ((arg1)->_v);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec4f, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofQuaternion__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofQuaternion *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofQuaternion__SWIG_0.");  
  result = (ofQuaternion *)new ofQuaternion();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofQuaternion__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofQuaternion *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofQuaternion__SWIG_1.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofQuaternion" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofQuaternion" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofQuaternion" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofQuaternion" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (ofQuaternion *)new ofQuaternion(arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofQuaternion__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec4f *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofQuaternion *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofQuaternion__SWIG_2.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofQuaternion" "', argument " "1"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofQuaternion" "', argument " "1"" of type '" "ofVec4f const &""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (ofQuaternion *)new ofQuaternion((ofVec4f const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofQuaternion__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  ofVec3f *arg2 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofQuaternion *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofQuaternion__SWIG_3.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofQuaternion" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ofQuaternion" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofQuaternion" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (ofQuaternion *)new ofQuaternion(arg1,(ofVec3f const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofQuaternion__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  ofVec3f *arg4 = 0 ;
  float arg5 ;
  ofVec3f *arg6 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  ofQuaternion *result;
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofQuaternion__SWIG_4.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofQuaternion" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ofQuaternion" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofQuaternion" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofQuaternion" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ofQuaternion" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofQuaternion" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ofQuaternion" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ofQuaternion" "', argument " "6"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofQuaternion" "', argument " "6"" of type '" "ofVec3f const &""'"); 
  }
  arg6 = (ofVec3f *)(argp6);
  result = (ofQuaternion *)new ofQuaternion(arg1,(ofVec3f const &)*arg2,arg3,(ofVec3f const &)*arg4,arg5,(ofVec3f const &)*arg6);
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofQuaternion(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofQuaternion__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    self = _wrap_new_ofQuaternion__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofQuaternion__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofQuaternion__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    self = _wrap_new_ofQuaternion__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofQuaternion");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_asVec4(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_asVec4.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_asVec4" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = ((ofQuaternion const *)arg1)->asVec4();
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_asVec3(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_asVec3.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_asVec3" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = ((ofQuaternion const *)arg1)->asVec3();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_set" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofQuaternion_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofQuaternion_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofQuaternion_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofQuaternion_set" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_set" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofQuaternion_set" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_set" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  (arg1)->set((ofVec4f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_set__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_set" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofQuaternion_set" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_set" "', argument " "2"" of type '" "ofMatrix4x4 const &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  (arg1)->set((ofMatrix4x4 const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_get(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofMatrix4x4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_get.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_get" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofMatrix4x4,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofQuaternion_get" "', argument " "2"" of type '" "ofMatrix4x4 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_get" "', argument " "2"" of type '" "ofMatrix4x4 &""'"); 
  }
  arg2 = (ofMatrix4x4 *)(argp2);
  ((ofQuaternion const *)arg1)->get(*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_x__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_x" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float *) &(arg1)->x();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_y__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_y" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float *) &(arg1)->y();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_z__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_z" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float *) &(arg1)->z();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_w__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_w" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float *) &(arg1)->w();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_x__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_x" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float)((ofQuaternion const *)arg1)->x();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_x(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_x__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_x__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function x.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_y__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_y" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float)((ofQuaternion const *)arg1)->y();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_y(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_y__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_y__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function y.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_z__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_z" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float)((ofQuaternion const *)arg1)->z();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_z(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_z__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_z__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function z.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_w__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_w" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float)((ofQuaternion const *)arg1)->w();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_w(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_w__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_w__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function w.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_zeroRotation(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_zeroRotation.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_zeroRotation" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (bool)((ofQuaternion const *)arg1)->zeroRotation();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_length(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_length.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_length" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float)((ofQuaternion const *)arg1)->length();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_length2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_length2.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_length2" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = (float)((ofQuaternion const *)arg1)->length2();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_conj(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofQuaternion result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_conj.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_conj" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = ((ofQuaternion const *)arg1)->conj();
  jsresult = SWIG_NewPointerObj((new ofQuaternion((const ofQuaternion&)(result))), SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_inverse(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofQuaternion result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_inverse.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_inverse" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = ((ofQuaternion const *)arg1)->inverse();
  jsresult = SWIG_NewPointerObj((new ofQuaternion((const ofQuaternion&)(result))), SWIGTYPE_p_ofQuaternion, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_makeRotate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_makeRotate" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofQuaternion_makeRotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofQuaternion_makeRotate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofQuaternion_makeRotate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofQuaternion_makeRotate" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->makeRotate(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_makeRotate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_makeRotate" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofQuaternion_makeRotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofQuaternion_makeRotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_makeRotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->makeRotate(arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_makeRotate__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  float arg4 ;
  ofVec3f *arg5 = 0 ;
  float arg6 ;
  ofVec3f *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_makeRotate" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofQuaternion_makeRotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofQuaternion_makeRotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_makeRotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofQuaternion_makeRotate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofQuaternion_makeRotate" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_makeRotate" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  arg5 = (ofVec3f *)(argp5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ofQuaternion_makeRotate" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ofQuaternion_makeRotate" "', argument " "7"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_makeRotate" "', argument " "7"" of type '" "ofVec3f const &""'"); 
  }
  arg7 = (ofVec3f *)(argp7);
  (arg1)->makeRotate(arg2,(ofVec3f const &)*arg3,arg4,(ofVec3f const &)*arg5,arg6,(ofVec3f const &)*arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_makeRotate__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_makeRotate" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofQuaternion_makeRotate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_makeRotate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofQuaternion_makeRotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_makeRotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->makeRotate((ofVec3f const &)*arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_makeRotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_makeRotate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_makeRotate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_makeRotate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_makeRotate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function makeRotate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_makeRotate_original(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_makeRotate_original.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_makeRotate_original" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofQuaternion_makeRotate_original" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_makeRotate_original" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofQuaternion_makeRotate_original" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_makeRotate_original" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  (arg1)->makeRotate_original((ofVec3f const &)*arg2,(ofVec3f const &)*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_getRotate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_getRotate" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofQuaternion_getRotate" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_getRotate" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = (float *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofQuaternion_getRotate" "', argument " "3"" of type '" "float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_getRotate" "', argument " "3"" of type '" "float &""'"); 
  }
  arg3 = (float *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofQuaternion_getRotate" "', argument " "4"" of type '" "float &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_getRotate" "', argument " "4"" of type '" "float &""'"); 
  }
  arg4 = (float *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofQuaternion_getRotate" "', argument " "5"" of type '" "float &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_getRotate" "', argument " "5"" of type '" "float &""'"); 
  }
  arg5 = (float *)(argp5);
  ((ofQuaternion const *)arg1)->getRotate(*arg2,*arg3,*arg4,*arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_getRotate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_getRotate" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofQuaternion_getRotate" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_getRotate" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = (float *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofQuaternion_getRotate" "', argument " "3"" of type '" "ofVec3f &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_getRotate" "', argument " "3"" of type '" "ofVec3f &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  ((ofQuaternion const *)arg1)->getRotate(*arg2,*arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofQuaternion_getRotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_getRotate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofQuaternion_getRotate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getRotate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_getEuler(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_getEuler.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_getEuler" "', argument " "1"" of type '" "ofQuaternion const *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  result = ((ofQuaternion const *)arg1)->getEuler();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_slerp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ;
  ofQuaternion *arg3 = 0 ;
  ofQuaternion *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_slerp.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_slerp" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofQuaternion_slerp" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofQuaternion_slerp" "', argument " "3"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_slerp" "', argument " "3"" of type '" "ofQuaternion const &""'"); 
  }
  arg3 = (ofQuaternion *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofQuaternion,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofQuaternion_slerp" "', argument " "4"" of type '" "ofQuaternion const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofQuaternion_slerp" "', argument " "4"" of type '" "ofQuaternion const &""'"); 
  }
  arg4 = (ofQuaternion *)(argp4);
  (arg1)->slerp(arg2,(ofQuaternion const &)*arg3,(ofQuaternion const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofQuaternion_normalize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofQuaternion_normalize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofQuaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofQuaternion_normalize" "', argument " "1"" of type '" "ofQuaternion *""'"); 
  }
  arg1 = (ofQuaternion *)(argp1);
  (arg1)->normalize();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofQuaternion(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofQuaternion(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofQuaternion *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofVec2f_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_x_set" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_x_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->x = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVec2f_x_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_x_get" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (float) ((arg1)->x);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVec2f_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_y_set" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_y_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->y = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVec2f_y_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_y_get" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (float) ((arg1)->y);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_DIM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofVec2f::DIM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec2f__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec2f *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec2f__SWIG_0.");  
  result = (ofVec2f *)new ofVec2f();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec2f__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  ofVec2f *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec2f__SWIG_1.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofVec2f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (ofVec2f *)new ofVec2f(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec2f__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec2f__SWIG_2.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofVec2f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofVec2f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec2f *)new ofVec2f(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec2f__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec3f *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofVec2f *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec2f__SWIG_3.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofVec2f" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofVec2f" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (ofVec2f *)new ofVec2f((ofVec3f const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec2f__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec4f *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofVec2f *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec2f__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofVec2f" "', argument " "1"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofVec2f" "', argument " "1"" of type '" "ofVec4f const &""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (ofVec2f *)new ofVec2f((ofVec4f const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec2f(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec2f__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec2f__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec2f__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec2f__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec2f__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofVec2f");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getPtr__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getPtr" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (float *)(arg1)->getPtr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_getPtr__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getPtr" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (float *)((ofVec2f const *)arg1)->getPtr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_getPtr(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_getPtr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_getPtr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getPtr.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_set" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->set(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_set" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->set(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_set__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_set" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_set" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_set" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  (arg1)->set((ofVec2f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_match__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_match" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_match" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_match" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_match" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec2f const *)arg1)->match((ofVec2f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_match__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_match" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_match" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_match" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (bool)((ofVec2f const *)arg1)->match((ofVec2f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_match(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_match__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_match__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function match.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_isAligned__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_isAligned" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_isAligned" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_isAligned" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_isAligned" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec2f const *)arg1)->isAligned((ofVec2f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_isAligned__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_isAligned" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_isAligned" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_isAligned" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (bool)((ofVec2f const *)arg1)->isAligned((ofVec2f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_isAligned(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_isAligned__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_isAligned__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function isAligned.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_isAlignedRad__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_isAlignedRad" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_isAlignedRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_isAlignedRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_isAlignedRad" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec2f const *)arg1)->isAlignedRad((ofVec2f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_isAlignedRad__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_isAlignedRad" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_isAlignedRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_isAlignedRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (bool)((ofVec2f const *)arg1)->isAlignedRad((ofVec2f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_isAlignedRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_isAlignedRad__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_isAlignedRad__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function isAlignedRad.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_align__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_align" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_align" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_align" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_align" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec2f const *)arg1)->align((ofVec2f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_align__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_align" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_align" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_align" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (bool)((ofVec2f const *)arg1)->align((ofVec2f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_align(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_align__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_align__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function align.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_alignRad__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_alignRad" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_alignRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_alignRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_alignRad" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec2f const *)arg1)->alignRad((ofVec2f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_alignRad__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_alignRad" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_alignRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_alignRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (bool)((ofVec2f const *)arg1)->alignRad((ofVec2f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_alignRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_alignRad__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_alignRad__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function alignRad.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getScaled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_getScaled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getScaled" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_getScaled" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec2f const *)arg1)->getScaled(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_scale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_scale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_scale" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec2f *) &(arg1)->scale(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getRotated__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getRotated" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_getRotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec2f const *)arg1)->getRotated(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_getRotatedRad__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getRotatedRad" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_getRotatedRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec2f const *)arg1)->getRotatedRad(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_rotate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_rotate" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec2f *) &(arg1)->rotate(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_rotateRad__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_rotateRad" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_rotateRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec2f *) &(arg1)->rotateRad(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_getRotated__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  ofVec2f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec2f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getRotated" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_getRotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec2f_getRotated" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_getRotated" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  arg3 = (ofVec2f *)(argp3);
  result = ((ofVec2f const *)arg1)->getRotated(arg2,(ofVec2f const &)*arg3);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_getRotated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_getRotated__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_getRotated__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getRotated.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_rotate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  ofVec2f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec2f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_rotate" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec2f_rotate" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_rotate" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  arg3 = (ofVec2f *)(argp3);
  result = (ofVec2f *) &(arg1)->rotate(arg2,(ofVec2f const &)*arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_rotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_rotate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_rotate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rotate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getRotatedRad__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  ofVec2f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec2f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getRotatedRad" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_getRotatedRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec2f_getRotatedRad" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_getRotatedRad" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  arg3 = (ofVec2f *)(argp3);
  result = ((ofVec2f const *)arg1)->getRotatedRad(arg2,(ofVec2f const &)*arg3);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_getRotatedRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_getRotatedRad__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_getRotatedRad__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getRotatedRad.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_rotateRad__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  ofVec2f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec2f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_rotateRad" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_rotateRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec2f_rotateRad" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_rotateRad" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  arg3 = (ofVec2f *)(argp3);
  result = (ofVec2f *) &(arg1)->rotateRad(arg2,(ofVec2f const &)*arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_rotateRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_rotateRad__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_rotateRad__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rotateRad.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getMapped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  ofVec2f *arg3 = 0 ;
  ofVec2f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_getMapped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getMapped" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_getMapped" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_getMapped" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec2f_getMapped" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_getMapped" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  arg3 = (ofVec2f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec2f_getMapped" "', argument " "4"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_getMapped" "', argument " "4"" of type '" "ofVec2f const &""'"); 
  }
  arg4 = (ofVec2f *)(argp4);
  result = ((ofVec2f const *)arg1)->getMapped((ofVec2f const &)*arg2,(ofVec2f const &)*arg3,(ofVec2f const &)*arg4);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_map(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  ofVec2f *arg3 = 0 ;
  ofVec2f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ofVec2f *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_map.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_map" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_map" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_map" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec2f_map" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_map" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  arg3 = (ofVec2f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec2f_map" "', argument " "4"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_map" "', argument " "4"" of type '" "ofVec2f const &""'"); 
  }
  arg4 = (ofVec2f *)(argp4);
  result = (ofVec2f *) &(arg1)->map((ofVec2f const &)*arg2,(ofVec2f const &)*arg3,(ofVec2f const &)*arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_distance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_distance.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_distance" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_distance" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_distance" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (float)((ofVec2f const *)arg1)->distance((ofVec2f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_squareDistance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_squareDistance.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_squareDistance" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_squareDistance" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_squareDistance" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (float)((ofVec2f const *)arg1)->squareDistance((ofVec2f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getInterpolated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_getInterpolated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getInterpolated" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_getInterpolated" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_getInterpolated" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_getInterpolated" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ((ofVec2f const *)arg1)->getInterpolated((ofVec2f const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_interpolate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec2f *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_interpolate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_interpolate" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_interpolate" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_interpolate" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofVec2f *) &(arg1)->interpolate((ofVec2f const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getMiddle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_getMiddle.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getMiddle" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_getMiddle" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_getMiddle" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = ((ofVec2f const *)arg1)->getMiddle((ofVec2f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_middle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec2f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_middle.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_middle" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_middle" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_middle" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (ofVec2f *) &(arg1)->middle((ofVec2f const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_average(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofVec2f *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_average.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_average" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_average" "', argument " "2"" of type '" "ofVec2f const *""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_average" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (ofVec2f *) &(arg1)->average((ofVec2f const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getNormalized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_getNormalized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getNormalized" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = ((ofVec2f const *)arg1)->getNormalized();
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_normalize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec2f *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_normalize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_normalize" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (ofVec2f *) &(arg1)->normalize();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getLimited(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_getLimited.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getLimited" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_getLimited" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec2f const *)arg1)->getLimited(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_limit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_limit.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_limit" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_limit" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec2f *) &(arg1)->limit(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_getPerpendicular(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_getPerpendicular.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_getPerpendicular" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = ((ofVec2f const *)arg1)->getPerpendicular();
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_perpendicular(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec2f *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_perpendicular.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_perpendicular" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (ofVec2f *) &(arg1)->perpendicular();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_length(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_length.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_length" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (float)((ofVec2f const *)arg1)->length();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_lengthSquared(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_lengthSquared.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_lengthSquared" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (float)((ofVec2f const *)arg1)->lengthSquared();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_squareLength(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_squareLength.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_squareLength" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (float)((ofVec2f const *)arg1)->squareLength();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_angle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_angle.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_angle" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_angle" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_angle" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (float)((ofVec2f const *)arg1)->angle((ofVec2f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_angleRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_angleRad.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_angleRad" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_angleRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_angleRad" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (float)((ofVec2f const *)arg1)->angleRad((ofVec2f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_dot(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_dot.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_dot" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_dot" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_dot" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (float)((ofVec2f const *)arg1)->dot((ofVec2f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_rescaled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_rescaled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_rescaled" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_rescaled" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec2f const *)arg1)->rescaled(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_rescale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_rescale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_rescale" "', argument " "1"" of type '" "ofVec2f *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_rescale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec2f *) &(arg1)->rescale(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec2f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_rotated__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_rotated" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_rotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec2f const *)arg1)->rotated(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_normalized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_normalized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_normalized" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = ((ofVec2f const *)arg1)->normalized();
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_limited(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_limited.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_limited" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_limited" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec2f const *)arg1)->limited(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_perpendiculared(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_perpendiculared.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_perpendiculared" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = ((ofVec2f const *)arg1)->perpendiculared();
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_interpolated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_interpolated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_interpolated" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_interpolated" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_interpolated" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec2f_interpolated" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ((ofVec2f const *)arg1)->interpolated((ofVec2f const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_middled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_middled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_middled" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_middled" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_middled" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = ((ofVec2f const *)arg1)->middled((ofVec2f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_mapped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  ofVec2f *arg3 = 0 ;
  ofVec2f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ofVec2f result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_mapped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_mapped" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_mapped" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_mapped" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec2f_mapped" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_mapped" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  arg3 = (ofVec2f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec2f_mapped" "', argument " "4"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_mapped" "', argument " "4"" of type '" "ofVec2f const &""'"); 
  }
  arg4 = (ofVec2f *)(argp4);
  result = ((ofVec2f const *)arg1)->mapped((ofVec2f const &)*arg2,(ofVec2f const &)*arg3,(ofVec2f const &)*arg4);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_distanceSquared(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_distanceSquared.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_distanceSquared" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec2f_distanceSquared" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_distanceSquared" "', argument " "2"" of type '" "ofVec2f const &""'"); 
  }
  arg2 = (ofVec2f *)(argp2);
  result = (float)((ofVec2f const *)arg1)->distanceSquared((ofVec2f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_rotated__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec2f *arg1 = (ofVec2f *) 0 ;
  float arg2 ;
  ofVec2f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec2f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec2f_rotated" "', argument " "1"" of type '" "ofVec2f const *""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec2f_rotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec2f_rotated" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec2f_rotated" "', argument " "3"" of type '" "ofVec2f const &""'"); 
  }
  arg3 = (ofVec2f *)(argp3);
  result = ((ofVec2f const *)arg1)->rotated(arg2,(ofVec2f const &)*arg3);
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec2f_rotated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_rotated__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec2f_rotated__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rotated.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_zero(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_zero.");  
  
  result = ofVec2f::zero();
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec2f_one(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec2f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec2f_one.");  
  
  result = ofVec2f::one();
  jsresult = SWIG_NewPointerObj((new ofVec2f((const ofVec2f&)(result))), SWIGTYPE_p_ofVec2f, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofVec2f(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofVec2f(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofVec2f *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofVec3f_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_x_set" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_x_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->x = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVec3f_x_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_x_get" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (float) ((arg1)->x);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVec3f_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_y_set" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_y_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->y = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVec3f_y_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_y_get" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (float) ((arg1)->y);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVec3f_z_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_z_set" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_z_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->z = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVec3f_z_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_z_get" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (float) ((arg1)->z);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_DIM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofVec3f::DIM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec3f__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec3f *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec3f__SWIG_0.");  
  result = (ofVec3f *)new ofVec3f();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec3f__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec3f *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec3f__SWIG_1.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofVec3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofVec3f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofVec3f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofVec3f *)new ofVec3f(arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec3f__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec3f *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec3f__SWIG_2.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofVec3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofVec3f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec3f *)new ofVec3f(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec3f__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  ofVec3f *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec3f__SWIG_3.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofVec3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (ofVec3f *)new ofVec3f(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec3f__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec2f *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofVec3f *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec3f__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofVec3f" "', argument " "1"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofVec3f" "', argument " "1"" of type '" "ofVec2f const &""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (ofVec3f *)new ofVec3f((ofVec2f const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec3f__SWIG_5(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec4f *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofVec3f *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec3f__SWIG_5.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofVec3f" "', argument " "1"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofVec3f" "', argument " "1"" of type '" "ofVec4f const &""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (ofVec3f *)new ofVec3f((ofVec4f const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec3f(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec3f__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec3f__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec3f__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec3f__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec3f__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec3f__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofVec3f");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getPtr__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getPtr" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (float *)(arg1)->getPtr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_getPtr__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getPtr" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (float *)((ofVec3f const *)arg1)->getPtr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_getPtr(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_getPtr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_getPtr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getPtr.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_set" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVec3f_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  (arg1)->set(arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_set" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->set(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_set__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_set" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_set" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_set" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  (arg1)->set((ofVec3f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_set__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_set" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->set(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_set__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_set__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_match__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_match" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_match" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_match" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_match" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec3f const *)arg1)->match((ofVec3f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_match__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_match" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_match" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_match" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (bool)((ofVec3f const *)arg1)->match((ofVec3f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_match(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_match__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_match__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function match.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_isAligned__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_isAligned" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_isAligned" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_isAligned" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_isAligned" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec3f const *)arg1)->isAligned((ofVec3f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_isAligned__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_isAligned" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_isAligned" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_isAligned" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (bool)((ofVec3f const *)arg1)->isAligned((ofVec3f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_isAligned(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_isAligned__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_isAligned__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function isAligned.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_align__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_align" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_align" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_align" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_align" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec3f const *)arg1)->align((ofVec3f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_align__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_align" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_align" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_align" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (bool)((ofVec3f const *)arg1)->align((ofVec3f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_align(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_align__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_align__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function align.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_isAlignedRad__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_isAlignedRad" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_isAlignedRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_isAlignedRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_isAlignedRad" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec3f const *)arg1)->isAlignedRad((ofVec3f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_isAlignedRad__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_isAlignedRad" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_isAlignedRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_isAlignedRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (bool)((ofVec3f const *)arg1)->isAlignedRad((ofVec3f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_isAlignedRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_isAlignedRad__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_isAlignedRad__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function isAlignedRad.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_alignRad__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_alignRad" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_alignRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_alignRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_alignRad" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec3f const *)arg1)->alignRad((ofVec3f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_alignRad__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_alignRad" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_alignRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_alignRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (bool)((ofVec3f const *)arg1)->alignRad((ofVec3f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_alignRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_alignRad__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_alignRad__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function alignRad.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getScaled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_getScaled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getScaled" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_getScaled" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec3f const *)arg1)->getScaled(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_scale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_scale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_scale" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec3f *) &(arg1)->scale(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getRotated__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getRotated" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_getRotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_getRotated" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getRotated" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  result = ((ofVec3f const *)arg1)->getRotated(arg2,(ofVec3f const &)*arg3);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_getRotatedRad__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getRotatedRad" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_getRotatedRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_getRotatedRad" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getRotatedRad" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  result = ((ofVec3f const *)arg1)->getRotatedRad(arg2,(ofVec3f const &)*arg3);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotate__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rotate" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_rotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_rotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  result = (ofVec3f *) &(arg1)->rotate(arg2,(ofVec3f const &)*arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotateRad__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rotateRad" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rotateRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_rotateRad" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_rotateRad" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  result = (ofVec3f *) &(arg1)->rotateRad(arg2,(ofVec3f const &)*arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_getRotated__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getRotated" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_getRotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_getRotated" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVec3f_getRotated" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = ((ofVec3f const *)arg1)->getRotated(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_getRotatedRad__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getRotatedRad" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_getRotatedRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_getRotatedRad" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVec3f_getRotatedRad" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = ((ofVec3f const *)arg1)->getRotatedRad(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotate__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rotate" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_rotate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVec3f_rotate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (ofVec3f *) &(arg1)->rotate(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotateRad__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rotateRad" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rotateRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_rotateRad" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVec3f_rotateRad" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (ofVec3f *) &(arg1)->rotateRad(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_getRotated__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getRotated" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_getRotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_getRotated" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getRotated" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec3f_getRotated" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getRotated" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  result = ((ofVec3f const *)arg1)->getRotated(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_getRotated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_getRotated__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_getRotated__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_getRotated__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getRotated.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotate__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rotate" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_rotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_rotate" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec3f_rotate" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_rotate" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  result = (ofVec3f *) &(arg1)->rotate(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_rotate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_rotate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_rotate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rotate.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getRotatedRad__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getRotatedRad" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_getRotatedRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_getRotatedRad" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getRotatedRad" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec3f_getRotatedRad" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getRotatedRad" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  result = ((ofVec3f const *)arg1)->getRotatedRad(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_getRotatedRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_getRotatedRad__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_getRotatedRad__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_getRotatedRad__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getRotatedRad.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotateRad__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ofVec3f *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rotateRad" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rotateRad" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_rotateRad" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_rotateRad" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec3f_rotateRad" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_rotateRad" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  result = (ofVec3f *) &(arg1)->rotateRad(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotateRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_rotateRad__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_rotateRad__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_rotateRad__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rotateRad.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getMapped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  ofVec3f *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_getMapped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getMapped" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_getMapped" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getMapped" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_getMapped" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getMapped" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec3f_getMapped" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getMapped" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofVec3f_getMapped" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getMapped" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  arg5 = (ofVec3f *)(argp5);
  result = ((ofVec3f const *)arg1)->getMapped((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,(ofVec3f const &)*arg5);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_map(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  ofVec3f *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_map.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_map" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_map" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_map" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_map" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_map" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec3f_map" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_map" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofVec3f_map" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_map" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  arg5 = (ofVec3f *)(argp5);
  result = (ofVec3f *) &(arg1)->map((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,(ofVec3f const &)*arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_distance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_distance.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_distance" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_distance" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_distance" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (float)((ofVec3f const *)arg1)->distance((ofVec3f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_squareDistance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_squareDistance.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_squareDistance" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_squareDistance" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_squareDistance" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (float)((ofVec3f const *)arg1)->squareDistance((ofVec3f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getInterpolated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_getInterpolated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getInterpolated" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_getInterpolated" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getInterpolated" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_getInterpolated" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ((ofVec3f const *)arg1)->getInterpolated((ofVec3f const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_interpolate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_interpolate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_interpolate" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_interpolate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_interpolate" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofVec3f *) &(arg1)->interpolate((ofVec3f const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getMiddle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_getMiddle.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getMiddle" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_getMiddle" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getMiddle" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ((ofVec3f const *)arg1)->getMiddle((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_middle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_middle.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_middle" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_middle" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_middle" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (ofVec3f *) &(arg1)->middle((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_average(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_average.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_average" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_average" "', argument " "2"" of type '" "ofVec3f const *""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_average" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (ofVec3f *) &(arg1)->average((ofVec3f const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getNormalized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_getNormalized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getNormalized" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = ((ofVec3f const *)arg1)->getNormalized();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_normalize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_normalize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_normalize" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (ofVec3f *) &(arg1)->normalize();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getLimited(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_getLimited.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getLimited" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_getLimited" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec3f const *)arg1)->getLimited(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_limit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_limit.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_limit" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_limit" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec3f *) &(arg1)->limit(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getCrossed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_getCrossed.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getCrossed" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_getCrossed" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getCrossed" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ((ofVec3f const *)arg1)->getCrossed((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_cross(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_cross.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_cross" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_cross" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_cross" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (ofVec3f *) &(arg1)->cross((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_getPerpendicular(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_getPerpendicular.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_getPerpendicular" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_getPerpendicular" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_getPerpendicular" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ((ofVec3f const *)arg1)->getPerpendicular((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_perpendicular(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_perpendicular.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_perpendicular" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_perpendicular" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_perpendicular" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (ofVec3f *) &(arg1)->perpendicular((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_length(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_length.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_length" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (float)((ofVec3f const *)arg1)->length();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_lengthSquared(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_lengthSquared.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_lengthSquared" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (float)((ofVec3f const *)arg1)->lengthSquared();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_squareLength(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_squareLength.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_squareLength" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (float)((ofVec3f const *)arg1)->squareLength();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_angle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_angle.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_angle" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_angle" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_angle" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (float)((ofVec3f const *)arg1)->angle((ofVec3f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_angleRad(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_angleRad.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_angleRad" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_angleRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_angleRad" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (float)((ofVec3f const *)arg1)->angleRad((ofVec3f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_dot(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_dot.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_dot" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_dot" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_dot" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (float)((ofVec3f const *)arg1)->dot((ofVec3f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_rescaled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_rescaled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rescaled" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rescaled" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec3f const *)arg1)->rescaled(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_rescale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec3f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_rescale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rescale" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rescale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec3f *) &(arg1)->rescale(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec3f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotated__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rotated" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_rotated" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_rotated" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  result = ((ofVec3f const *)arg1)->rotated(arg2,(ofVec3f const &)*arg3);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotated__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rotated" "', argument " "1"" of type '" "ofVec3f *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_rotated" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVec3f_rotated" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (arg1)->rotated(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_normalized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_normalized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_normalized" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = ((ofVec3f const *)arg1)->normalized();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_limited(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_limited.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_limited" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_limited" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec3f const *)arg1)->limited(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_crossed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_crossed.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_crossed" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_crossed" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_crossed" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ((ofVec3f const *)arg1)->crossed((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_perpendiculared(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_perpendiculared.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_perpendiculared" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_perpendiculared" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_perpendiculared" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ((ofVec3f const *)arg1)->perpendiculared((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_mapped(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  ofVec3f *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_mapped.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_mapped" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_mapped" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_mapped" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_mapped" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_mapped" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec3f_mapped" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_mapped" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofVec3f_mapped" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_mapped" "', argument " "5"" of type '" "ofVec3f const &""'"); 
  }
  arg5 = (ofVec3f *)(argp5);
  result = ((ofVec3f const *)arg1)->mapped((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,(ofVec3f const &)*arg5);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_distanceSquared(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_distanceSquared.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_distanceSquared" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_distanceSquared" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_distanceSquared" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = (float)((ofVec3f const *)arg1)->distanceSquared((ofVec3f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_interpolated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_interpolated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_interpolated" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_interpolated" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_interpolated" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec3f_interpolated" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ((ofVec3f const *)arg1)->interpolated((ofVec3f const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_middled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec3f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_middled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_middled" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec3f_middled" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_middled" "', argument " "2"" of type '" "ofVec3f const &""'"); 
  }
  arg2 = (ofVec3f *)(argp2);
  result = ((ofVec3f const *)arg1)->middled((ofVec3f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotated__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec3f *arg1 = (ofVec3f *) 0 ;
  float arg2 ;
  ofVec3f *arg3 = 0 ;
  ofVec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ofVec3f result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec3f_rotated" "', argument " "1"" of type '" "ofVec3f const *""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec3f_rotated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ofVec3f_rotated" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_rotated" "', argument " "3"" of type '" "ofVec3f const &""'"); 
  }
  arg3 = (ofVec3f *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofVec3f_rotated" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec3f_rotated" "', argument " "4"" of type '" "ofVec3f const &""'"); 
  }
  arg4 = (ofVec3f *)(argp4);
  result = ((ofVec3f const *)arg1)->rotated(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec3f_rotated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_rotated__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_rotated__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec3f_rotated__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rotated.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_zero(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_zero.");  
  
  result = ofVec3f::zero();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec3f_one(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec3f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec3f_one.");  
  
  result = ofVec3f::one();
  jsresult = SWIG_NewPointerObj((new ofVec3f((const ofVec3f&)(result))), SWIGTYPE_p_ofVec3f, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofVec3f(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofVec3f(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofVec3f *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


void _wrap_ofVec4f_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_x_set" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_x_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->x = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVec4f_x_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_x_get" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (float) ((arg1)->x);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVec4f_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_y_set" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_y_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->y = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVec4f_y_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_y_get" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (float) ((arg1)->y);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVec4f_z_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_z_set" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_z_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->z = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVec4f_z_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_z_get" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (float) ((arg1)->z);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVec4f_w_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_w_set" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_w_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  if (arg1) (arg1)->w = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVec4f_w_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_w_get" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (float) ((arg1)->w);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_DIM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(ofVec4f::DIM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec4f__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec4f *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec4f__SWIG_0.");  
  result = (ofVec4f *)new ofVec4f();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec4f__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  ofVec4f *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec4f__SWIG_1.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofVec4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (ofVec4f *)new ofVec4f(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec4f__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  ofVec4f *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec4f__SWIG_2.");  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofVec4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofVec4f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ofVec4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ofVec4f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (ofVec4f *)new ofVec4f(arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec4f__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec2f *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofVec4f *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec4f__SWIG_3.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec2f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofVec4f" "', argument " "1"" of type '" "ofVec2f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofVec4f" "', argument " "1"" of type '" "ofVec2f const &""'"); 
  }
  arg1 = (ofVec2f *)(argp1);
  result = (ofVec4f *)new ofVec4f((ofVec2f const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec4f__SWIG_4(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVec3f *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  ofVec4f *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVec4f__SWIG_4.");  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofVec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ofVec4f" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ofVec4f" "', argument " "1"" of type '" "ofVec3f const &""'"); 
  }
  arg1 = (ofVec3f *)(argp1);
  result = (ofVec4f *)new ofVec4f((ofVec3f const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVec4f(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec4f__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec4f__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec4f__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec4f__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofVec4f__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofVec4f");
  
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_set__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_set" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec4f_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVec4f_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofVec4f_set" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec4f_set__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_set" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_set" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_set" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  (arg1)->set((ofVec4f const &)*arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec4f_set(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec4f_set__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec4f_set__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_getPtr__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_getPtr" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (float *)(arg1)->getPtr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec4f_getPtr__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_getPtr" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (float *)((ofVec4f const *)arg1)->getPtr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec4f_getPtr(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec4f_getPtr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec4f_getPtr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getPtr.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_match__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_match" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_match" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_match" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec4f_match" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (bool)((ofVec4f const *)arg1)->match((ofVec4f const &)*arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec4f_match__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_match" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_match" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_match" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = (bool)((ofVec4f const *)arg1)->match((ofVec4f const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVec4f_match(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec4f_match__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVec4f_match__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function match.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_getScaled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_getScaled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_getScaled" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_getScaled" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec4f const *)arg1)->getScaled(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_scale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec4f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_scale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_scale" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec4f *) &(arg1)->scale(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec4f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_distance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_distance.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_distance" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_distance" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_distance" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = (float)((ofVec4f const *)arg1)->distance((ofVec4f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_squareDistance(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_squareDistance.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_squareDistance" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_squareDistance" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_squareDistance" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = (float)((ofVec4f const *)arg1)->squareDistance((ofVec4f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_getInterpolated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_getInterpolated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_getInterpolated" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_getInterpolated" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_getInterpolated" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec4f_getInterpolated" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ((ofVec4f const *)arg1)->getInterpolated((ofVec4f const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_interpolate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec4f *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_interpolate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_interpolate" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_interpolate" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_interpolate" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec4f_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = (ofVec4f *) &(arg1)->interpolate((ofVec4f const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec4f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_getMiddle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_getMiddle.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_getMiddle" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_getMiddle" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_getMiddle" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = ((ofVec4f const *)arg1)->getMiddle((ofVec4f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_middle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec4f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_middle.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_middle" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_middle" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_middle" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = (ofVec4f *) &(arg1)->middle((ofVec4f const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec4f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_average(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = (ofVec4f *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ofVec4f *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_average.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_average" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_average" "', argument " "2"" of type '" "ofVec4f const *""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec4f_average" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (ofVec4f *) &(arg1)->average((ofVec4f const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec4f, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_getNormalized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_getNormalized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_getNormalized" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = ((ofVec4f const *)arg1)->getNormalized();
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_normalize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec4f *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_normalize.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_normalize" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (ofVec4f *) &(arg1)->normalize();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec4f, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_getLimited(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_getLimited.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_getLimited" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_getLimited" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec4f const *)arg1)->getLimited(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_limit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec4f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_limit.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_limit" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_limit" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec4f *) &(arg1)->limit(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec4f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_length(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_length.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_length" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (float)((ofVec4f const *)arg1)->length();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_lengthSquared(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_lengthSquared.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_lengthSquared" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (float)((ofVec4f const *)arg1)->lengthSquared();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_squareLength(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_squareLength.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_squareLength" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = (float)((ofVec4f const *)arg1)->squareLength();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_dot(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_dot.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_dot" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_dot" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_dot" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = (float)((ofVec4f const *)arg1)->dot((ofVec4f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_rescaled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_rescaled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_rescaled" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_rescaled" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec4f const *)arg1)->rescaled(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_rescale(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec4f *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_rescale.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_rescale" "', argument " "1"" of type '" "ofVec4f *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_rescale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (ofVec4f *) &(arg1)->rescale(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofVec4f, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_normalized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_normalized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_normalized" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  result = ((ofVec4f const *)arg1)->normalized();
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_limited(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_limited.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_limited" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVec4f_limited" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((ofVec4f const *)arg1)->limited(arg2);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_distanceSquared(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_distanceSquared.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_distanceSquared" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_distanceSquared" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_distanceSquared" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = (float)((ofVec4f const *)arg1)->distanceSquared((ofVec4f const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_interpolated(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_interpolated.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_interpolated" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_interpolated" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_interpolated" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVec4f_interpolated" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  result = ((ofVec4f const *)arg1)->interpolated((ofVec4f const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_middled(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ofVec4f result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_middled.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVec4f_middled" "', argument " "1"" of type '" "ofVec4f const *""'"); 
  }
  arg1 = (ofVec4f *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofVec4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVec4f_middled" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVec4f_middled" "', argument " "2"" of type '" "ofVec4f const &""'"); 
  }
  arg2 = (ofVec4f *)(argp2);
  result = ((ofVec4f const *)arg1)->middled((ofVec4f const &)*arg2);
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_zero(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_zero.");  
  
  result = ofVec4f::zero();
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVec4f_one(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVec4f result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVec4f_one.");  
  
  result = ofVec4f::one();
  jsresult = SWIG_NewPointerObj((new ofVec4f((const ofVec4f&)(result))), SWIGTYPE_p_ofVec4f, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofVec4f(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofVec4f(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofVec4f *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofSoundStopAll(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundStopAll.");  
  
  ofSoundStopAll();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundSetVolume(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundSetVolume.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSoundSetVolume" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ofSoundSetVolume(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundUpdate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundUpdate.");  
  
  ofSoundUpdate();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundGetSpectrum(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  float *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundGetSpectrum.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSoundGetSpectrum" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (float *)ofSoundGetSpectrum(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundShutdown(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundShutdown.");  
  
  ofSoundShutdown();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofSoundPlayer(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofSoundPlayer *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofSoundPlayer.");  
  result = (ofSoundPlayer *)new ofSoundPlayer();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofSoundPlayer, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_setPlayer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SwigValueWrapper< ofPtr< ofBaseSoundPlayer > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_setPlayer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_setPlayer" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofSoundPlayer_setPlayer" "', argument " "2"" of type '" "ofPtr< ofBaseSoundPlayer >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSoundPlayer_setPlayer" "', argument " "2"" of type '" "ofPtr< ofBaseSoundPlayer >""'");
    } else {
      arg2 = *((ofPtr< ofBaseSoundPlayer > *)(argp2));
    }
  }
  (arg1)->setPlayer(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_getPlayer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ofPtr< ofBaseSoundPlayer > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_getPlayer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_getPlayer" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  result = (arg1)->getPlayer();
  jsresult = SWIG_NewPointerObj((new ofPtr< ofBaseSoundPlayer >((const ofPtr< ofBaseSoundPlayer >&)(result))), SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_loadSound__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_loadSound" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSoundPlayer_loadSound" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = (bool)(arg1)->loadSound(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_loadSound__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_loadSound" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->loadSound(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_loadSound(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSoundPlayer_loadSound__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSoundPlayer_loadSound__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function loadSound.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_unloadSound(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_unloadSound.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_unloadSound" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  (arg1)->unloadSound();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_play(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_play.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_play" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  (arg1)->play();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_stop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_stop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_stop" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  (arg1)->stop();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_setVolume(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_setVolume.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_setVolume" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSoundPlayer_setVolume" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setVolume(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_setPan(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_setPan.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_setPan" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSoundPlayer_setPan" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setPan(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_setSpeed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_setSpeed.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_setSpeed" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSoundPlayer_setSpeed" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setSpeed(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_setPaused(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_setPaused.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_setPaused" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSoundPlayer_setPaused" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setPaused(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_setLoop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_setLoop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_setLoop" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSoundPlayer_setLoop" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setLoop(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_setMultiPlay(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_setMultiPlay.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_setMultiPlay" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSoundPlayer_setMultiPlay" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setMultiPlay(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_setPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_setPosition.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_setPosition" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSoundPlayer_setPosition" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setPosition(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_setPositionMS(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_setPositionMS.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_setPositionMS" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSoundPlayer_setPositionMS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setPositionMS(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_getPositionMS(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_getPositionMS.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_getPositionMS" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  result = (int)(arg1)->getPositionMS();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_getPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_getPosition.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_getPosition" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  result = (float)(arg1)->getPosition();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_getIsPlaying(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_getIsPlaying.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_getIsPlaying" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  result = (bool)(arg1)->getIsPlaying();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_getSpeed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_getSpeed.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_getSpeed" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  result = (float)(arg1)->getSpeed();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_getPan(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_getPan.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_getPan" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  result = (float)(arg1)->getPan();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_getVolume(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_getVolume.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_getVolume" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  result = (float)(arg1)->getVolume();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSoundPlayer_isLoaded(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSoundPlayer_isLoaded.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofSoundPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSoundPlayer_isLoaded" "', argument " "1"" of type '" "ofSoundPlayer *""'"); 
  }
  arg1 = (ofSoundPlayer *)(argp1);
  result = (bool)(arg1)->isLoaded();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofSoundPlayer(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofSoundPlayer(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofSoundPlayer *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_OF_VERSION_MAJOR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_VERSION_MINOR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(7));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_VERSION_PATCH(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LOOP_NONE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LOOP_NONE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LOOP_PALINDROME(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LOOP_PALINDROME));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LOOP_NORMAL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LOOP_NORMAL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TARGET_OSX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_TARGET_OSX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TARGET_WINGCC(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_TARGET_WINGCC));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TARGET_WINVS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_TARGET_WINVS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TARGET_IPHONE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_TARGET_IPHONE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TARGET_ANDROID(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_TARGET_ANDROID));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TARGET_LINUX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_TARGET_LINUX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_TARGET_LINUX64(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_TARGET_LINUX64));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_B14400(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(14400));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_B28800(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(28800));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_SERIAL_NO_DATA(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(-2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_SERIAL_ERROR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(-1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_PI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)(3.14159265358979323846));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_TWO_PI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)(6.28318530717958647693));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_M_TWO_PI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)(6.28318530717958647693));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_FOUR_PI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)(12.56637061435917295385));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_HALF_PI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)(1.57079632679489661923));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_DEG_TO_RAD(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)((3.14159265358979323846/180.0)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_RAD_TO_DEG(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)((180.0/3.14159265358979323846)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_OUTLINE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_OUTLINE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_FILLED(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_FILLED));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_WINDOW(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_WINDOW));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_FULLSCREEN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_FULLSCREEN));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_GAME_MODE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_GAME_MODE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ASPECT_RATIO_IGNORE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ASPECT_RATIO_IGNORE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ASPECT_RATIO_KEEP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ASPECT_RATIO_KEEP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ASPECT_RATIO_KEEP_BY_EXPANDING(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ASPECT_RATIO_KEEP_BY_EXPANDING));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ALIGN_VERT_IGNORE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ALIGN_VERT_IGNORE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ALIGN_VERT_TOP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ALIGN_VERT_TOP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ALIGN_VERT_BOTTOM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ALIGN_VERT_BOTTOM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ALIGN_VERT_CENTER(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ALIGN_VERT_CENTER));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ALIGN_HORZ_IGNORE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ALIGN_HORZ_IGNORE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ALIGN_HORZ_LEFT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ALIGN_HORZ_LEFT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ALIGN_HORZ_RIGHT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ALIGN_HORZ_RIGHT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ALIGN_HORZ_CENTER(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ALIGN_HORZ_CENTER));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_RECTMODE_CORNER(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_RECTMODE_CORNER));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_RECTMODE_CENTER(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_RECTMODE_CENTER));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_SCALEMODE_FIT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_SCALEMODE_FIT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_SCALEMODE_FILL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_SCALEMODE_FILL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_SCALEMODE_CENTER(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_SCALEMODE_CENTER));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_SCALEMODE_STRETCH_TO_FILL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_SCALEMODE_STRETCH_TO_FILL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_GRAYSCALE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_GRAYSCALE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_COLOR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_COLOR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_COLOR_ALPHA(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_COLOR_ALPHA));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_IMAGE_UNDEFINED(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_IMAGE_UNDEFINED));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PIXELS_MONO(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PIXELS_MONO));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PIXELS_RGB(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PIXELS_RGB));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PIXELS_RGBA(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PIXELS_RGBA));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PIXELS_BGRA(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PIXELS_BGRA));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_PIXELS_RGB565(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_PIXELS_RGB565));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MAX_STYLE_HISTORY(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(32));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MAX_VIEWPORT_HISTORY(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(32));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MAX_CIRCLE_PTS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1024));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BLENDMODE_DISABLED(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BLENDMODE_DISABLED));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BLENDMODE_ALPHA(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BLENDMODE_ALPHA));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BLENDMODE_ADD(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BLENDMODE_ADD));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BLENDMODE_SUBTRACT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BLENDMODE_SUBTRACT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BLENDMODE_MULTIPLY(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BLENDMODE_MULTIPLY));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BLENDMODE_SCREEN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BLENDMODE_SCREEN));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ORIENTATION_DEFAULT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ORIENTATION_DEFAULT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ORIENTATION_180(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ORIENTATION_180));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ORIENTATION_90_LEFT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ORIENTATION_90_LEFT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ORIENTATION_90_RIGHT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ORIENTATION_90_RIGHT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_ORIENTATION_UNKNOWN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_ORIENTATION_UNKNOWN));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_GRADIENT_LINEAR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_GRADIENT_LINEAR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_GRADIENT_CIRCULAR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_GRADIENT_CIRCULAR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_GRADIENT_BAR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_GRADIENT_BAR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_POLY_WINDING_ODD(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_POLY_WINDING_ODD));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_POLY_WINDING_NONZERO(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_POLY_WINDING_NONZERO));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_POLY_WINDING_POSITIVE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_POLY_WINDING_POSITIVE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_POLY_WINDING_NEGATIVE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_POLY_WINDING_NEGATIVE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_POLY_WINDING_ABS_GEQ_TWO(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_POLY_WINDING_ABS_GEQ_TWO));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CLOSE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_bool((bool)((true)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LEFT_HANDED(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LEFT_HANDED));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_RIGHT_HANDED(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_RIGHT_HANDED));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MATRIX_MODELVIEW(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_MATRIX_MODELVIEW));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MATRIX_PROJECTION(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_MATRIX_PROJECTION));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_MATRIX_TEXTURE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_MATRIX_TEXTURE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_MODIFIER(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0100));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_RETURN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(13));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_ESC(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(27));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_CTRL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0200));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_ALT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0300));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_SHIFT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0400));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_BACKSPACE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(8));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_DEL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(127));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((1|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((2|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F3(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((3|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F4(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((4|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F5(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((5|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F6(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((6|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F7(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((7|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F8(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((8|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F9(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((9|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F10(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((10|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F11(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((11|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_F12(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((12|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_LEFT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((100|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_UP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((101|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_RIGHT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((102|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_DOWN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((103|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_PAGE_UP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((104|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_PAGE_DOWN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((105|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_HOME(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((106|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_END(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((107|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_KEY_INSERT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((108|0x0100)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CONSOLE_COLOR_RESTORE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((0)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CONSOLE_COLOR_BLACK(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((30)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CONSOLE_COLOR_RED(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((31)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CONSOLE_COLOR_GREEN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((32)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CONSOLE_COLOR_YELLOW(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((33)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CONSOLE_COLOR_BLUE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((34)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CONSOLE_COLOR_PURPLE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((35)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CONSOLE_COLOR_CYAN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((36)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_CONSOLE_COLOR_WHITE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((37)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BITMAPMODE_SIMPLE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BITMAPMODE_SIMPLE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BITMAPMODE_SCREEN(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BITMAPMODE_SCREEN));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BITMAPMODE_VIEWPORT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BITMAPMODE_VIEWPORT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BITMAPMODE_MODEL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BITMAPMODE_MODEL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_BITMAPMODE_MODEL_BILLBOARD(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_BITMAPMODE_MODEL_BILLBOARD));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LOG_VERBOSE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LOG_VERBOSE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LOG_NOTICE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LOG_NOTICE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LOG_WARNING(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LOG_WARNING));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LOG_ERROR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LOG_ERROR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LOG_FATAL_ERROR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LOG_FATAL_ERROR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_OF_LOG_SILENT(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(OF_LOG_SILENT));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetLogLevel__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofLogLevel arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSetLogLevel" "', argument " "1"" of type '" "ofLogLevel""'");
  } 
  arg1 = (ofLogLevel)(val1);
  ofSetLogLevel(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSetLogLevel__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  ofLogLevel arg2 ;
  std::string *tmp1 ;
  int val2 ;
  int ecode2 = 0 ;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSetLogLevel" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  ofSetLogLevel(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSetLogLevel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetLogLevel__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSetLogLevel__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSetLogLevel.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetLogLevel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLogLevel result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetLogLevel.");  
  
  result = (ofLogLevel)ofGetLogLevel();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetLoggerChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< ofPtr< ofBaseLoggerChannel > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetLoggerChannel.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPtrT_ofBaseLoggerChannel_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofSetLoggerChannel" "', argument " "1"" of type '" "ofPtr< ofBaseLoggerChannel >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofSetLoggerChannel" "', argument " "1"" of type '" "ofPtr< ofBaseLoggerChannel >""'");
    } else {
      arg1 = *((ofPtr< ofBaseLoggerChannel > *)(argp1));
    }
  }
  ofSetLoggerChannel(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetLogLevelName(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofLogLevel arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetLogLevelName.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofGetLogLevelName" "', argument " "1"" of type '" "ofLogLevel""'");
  } 
  arg1 = (ofLogLevel)(val1);
  result = ofGetLogLevelName(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLogToFile__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofLogToFile" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ofLogToFile((std::string const &)*arg1,arg2);
  jsresult = v8::Undefined();
  
  if (arg1) delete arg1;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofLogToFile__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  ofLogToFile((std::string const &)*arg1);
  jsresult = v8::Undefined();
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofLogToFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLogToFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofLogToFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofLogToFile.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLogToConsole(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLogToConsole.");  
  
  ofLogToConsole();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLog__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLog *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLog__SWIG_0.");  
  result = (ofLog *)new ofLog();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLog, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLog__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLogLevel arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  ofLog *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLog__SWIG_1.");  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofLog" "', argument " "1"" of type '" "ofLogLevel""'");
  } 
  arg1 = (ofLogLevel)(val1);
  result = (ofLog *)new ofLog(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLog, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLog__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLogLevel arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  ofLog *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLog__SWIG_2.");  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofLog" "', argument " "1"" of type '" "ofLogLevel""'");
  } 
  arg1 = (ofLogLevel)(val1);
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLog *)new ofLog(arg1,(std::string const &)*arg2);
  
  
  
  if (arg2) delete arg2;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLog, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLog__SWIG_3(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  ofLog *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLog__SWIG_3.");  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ofLog" "', argument " "1"" of type '" "ofLogLevel""'");
  } 
  arg1 = (ofLogLevel)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ofLog" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (ofLog *)new ofLog(arg1,(char const *)arg2,arg3);
  
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLog, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLog(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLog__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLog__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLog__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLog__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofLog");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofLog(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofLog(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofLog *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofLog_setAutoSpace(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLog_setAutoSpace.");  
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofLog_setAutoSpace" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  ofLog::setAutoSpace(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLog_setChannel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< ofPtr< ofBaseLoggerChannel > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLog_setChannel.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_ofPtrT_ofBaseLoggerChannel_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofLog_setChannel" "', argument " "1"" of type '" "ofPtr< ofBaseLoggerChannel >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofLog_setChannel" "', argument " "1"" of type '" "ofPtr< ofBaseLoggerChannel >""'");
    } else {
      arg1 = *((ofPtr< ofBaseLoggerChannel > *)(argp1));
    }
  }
  ofLog::setChannel(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogVerbose__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  ofLogVerbose *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogVerbose__SWIG_0.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogVerbose *)new ofLogVerbose((std::string const &)*arg1);
  
  
  if (arg1) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogVerbose, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogVerbose__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLogVerbose *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogVerbose__SWIG_1.");  
  result = (ofLogVerbose *)new ofLogVerbose();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogVerbose, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogVerbose__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ofLogVerbose *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogVerbose__SWIG_2.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogVerbose *)new ofLogVerbose((std::string const &)*arg1,(std::string const &)*arg2);
  
  
  if (arg1) delete arg1;
  
  
  if (arg2) delete arg2;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogVerbose, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogVerbose(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogVerbose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogVerbose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogVerbose__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofLogVerbose");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofLogVerbose(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofLogVerbose(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofLogVerbose *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofLogNotice__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  ofLogNotice *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogNotice__SWIG_0.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogNotice *)new ofLogNotice((std::string const &)*arg1);
  
  
  if (arg1) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogNotice, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogNotice__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLogNotice *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogNotice__SWIG_1.");  
  result = (ofLogNotice *)new ofLogNotice();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogNotice, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogNotice__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ofLogNotice *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogNotice__SWIG_2.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogNotice *)new ofLogNotice((std::string const &)*arg1,(std::string const &)*arg2);
  
  
  if (arg1) delete arg1;
  
  
  if (arg2) delete arg2;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogNotice, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogNotice(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogNotice__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogNotice__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogNotice__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofLogNotice");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofLogNotice(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofLogNotice(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofLogNotice *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofLogWarning__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  ofLogWarning *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogWarning__SWIG_0.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogWarning *)new ofLogWarning((std::string const &)*arg1);
  
  
  if (arg1) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogWarning, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogWarning__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLogWarning *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogWarning__SWIG_1.");  
  result = (ofLogWarning *)new ofLogWarning();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogWarning, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogWarning__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ofLogWarning *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogWarning__SWIG_2.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogWarning *)new ofLogWarning((std::string const &)*arg1,(std::string const &)*arg2);
  
  
  if (arg1) delete arg1;
  
  
  if (arg2) delete arg2;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogWarning, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogWarning(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogWarning__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogWarning__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogWarning__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofLogWarning");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofLogWarning(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofLogWarning(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofLogWarning *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofLogError__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  ofLogError *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogError__SWIG_0.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogError *)new ofLogError((std::string const &)*arg1);
  
  
  if (arg1) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogError, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogError__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLogError *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogError__SWIG_1.");  
  result = (ofLogError *)new ofLogError();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogError, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogError__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ofLogError *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogError__SWIG_2.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogError *)new ofLogError((std::string const &)*arg1,(std::string const &)*arg2);
  
  
  if (arg1) delete arg1;
  
  
  if (arg2) delete arg2;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogError, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogError(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogError__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogError__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogError__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofLogError");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofLogError(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofLogError(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofLogError *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_ofLogFatalError__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  ofLogFatalError *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogFatalError__SWIG_0.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogFatalError *)new ofLogFatalError((std::string const &)*arg1);
  
  
  if (arg1) delete arg1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogFatalError, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogFatalError__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofLogFatalError *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogFatalError__SWIG_1.");  
  result = (ofLogFatalError *)new ofLogFatalError();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogFatalError, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogFatalError__SWIG_2(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ofLogFatalError *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofLogFatalError__SWIG_2.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (ofLogFatalError *)new ofLogFatalError((std::string const &)*arg1,(std::string const &)*arg2);
  
  
  if (arg1) delete arg1;
  
  
  if (arg2) delete arg2;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofLogFatalError, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofLogFatalError(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogFatalError__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogFatalError__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofLogFatalError__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofLogFatalError");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofLogFatalError(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofLogFatalError(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofLogFatalError *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofBaseLoggerChannel(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofBaseLoggerChannel(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofBaseLoggerChannel *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofBaseLoggerChannel_log__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBaseLoggerChannel *arg1 = (ofBaseLoggerChannel *) 0 ;
  ofLogLevel arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBaseLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBaseLoggerChannel_log" "', argument " "1"" of type '" "ofBaseLoggerChannel *""'"); 
  }
  arg1 = (ofBaseLoggerChannel *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBaseLoggerChannel_log" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  
  arg3 = SWIGV8_valueToStringPtr(args[1]);
  if (arg3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg4 = SWIGV8_valueToStringPtr(args[2]);
  if (arg4 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  (arg1)->log(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  if (arg3) delete arg3;
  
  
  if (arg4) delete arg4;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBaseLoggerChannel_log__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBaseLoggerChannel *arg1 = (ofBaseLoggerChannel *) 0 ;
  ofLogLevel arg2 ;
  std::string *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBaseLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBaseLoggerChannel_log" "', argument " "1"" of type '" "ofBaseLoggerChannel *""'"); 
  }
  arg1 = (ofBaseLoggerChannel *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBaseLoggerChannel_log" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  
  arg3 = SWIGV8_valueToStringPtr(args[1]);
  if (arg3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofBaseLoggerChannel_log" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  (arg1)->log(arg2,(std::string const &)*arg3,(char const *)arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  if (arg3) delete arg3;
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBaseLoggerChannel_log__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofBaseLoggerChannel *arg1 = (ofBaseLoggerChannel *) 0 ;
  ofLogLevel arg2 ;
  std::string *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  va_list arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofBaseLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofBaseLoggerChannel_log" "', argument " "1"" of type '" "ofBaseLoggerChannel *""'"); 
  }
  arg1 = (ofBaseLoggerChannel *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofBaseLoggerChannel_log" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  
  arg3 = SWIGV8_valueToStringPtr(args[1]);
  if (arg3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofBaseLoggerChannel_log" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  {
    res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_va_list,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofBaseLoggerChannel_log" "', argument " "5"" of type '" "va_list""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofBaseLoggerChannel_log" "', argument " "5"" of type '" "va_list""'");
    } else {
      arg5 = *((va_list *)(argp5));
    }
  }
  (arg1)->log(arg2,(std::string const &)*arg3,(char const *)arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  if (arg3) delete arg3;
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofBaseLoggerChannel_log(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBaseLoggerChannel_log__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBaseLoggerChannel_log__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofBaseLoggerChannel_log__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function log.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_veto_ofBaseLoggerChannel(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class ofBaseLoggerChannel can not be instantiated");
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofConsoleLoggerChannel(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofConsoleLoggerChannel(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofConsoleLoggerChannel *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofConsoleLoggerChannel_log__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofConsoleLoggerChannel *arg1 = (ofConsoleLoggerChannel *) 0 ;
  ofLogLevel arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofConsoleLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofConsoleLoggerChannel_log" "', argument " "1"" of type '" "ofConsoleLoggerChannel *""'"); 
  }
  arg1 = (ofConsoleLoggerChannel *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofConsoleLoggerChannel_log" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  
  arg3 = SWIGV8_valueToStringPtr(args[1]);
  if (arg3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg4 = SWIGV8_valueToStringPtr(args[2]);
  if (arg4 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  (arg1)->log(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  if (arg3) delete arg3;
  
  
  if (arg4) delete arg4;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofConsoleLoggerChannel_log__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofConsoleLoggerChannel *arg1 = (ofConsoleLoggerChannel *) 0 ;
  ofLogLevel arg2 ;
  std::string *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofConsoleLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofConsoleLoggerChannel_log" "', argument " "1"" of type '" "ofConsoleLoggerChannel *""'"); 
  }
  arg1 = (ofConsoleLoggerChannel *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofConsoleLoggerChannel_log" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  
  arg3 = SWIGV8_valueToStringPtr(args[1]);
  if (arg3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofConsoleLoggerChannel_log" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  (arg1)->log(arg2,(std::string const &)*arg3,(char const *)arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  if (arg3) delete arg3;
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofConsoleLoggerChannel_log__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofConsoleLoggerChannel *arg1 = (ofConsoleLoggerChannel *) 0 ;
  ofLogLevel arg2 ;
  std::string *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  va_list arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofConsoleLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofConsoleLoggerChannel_log" "', argument " "1"" of type '" "ofConsoleLoggerChannel *""'"); 
  }
  arg1 = (ofConsoleLoggerChannel *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofConsoleLoggerChannel_log" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  
  arg3 = SWIGV8_valueToStringPtr(args[1]);
  if (arg3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofConsoleLoggerChannel_log" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  {
    res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_va_list,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofConsoleLoggerChannel_log" "', argument " "5"" of type '" "va_list""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofConsoleLoggerChannel_log" "', argument " "5"" of type '" "va_list""'");
    } else {
      arg5 = *((va_list *)(argp5));
    }
  }
  (arg1)->log(arg2,(std::string const &)*arg3,(char const *)arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  if (arg3) delete arg3;
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofConsoleLoggerChannel_log(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofConsoleLoggerChannel_log__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofConsoleLoggerChannel_log__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofConsoleLoggerChannel_log__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function log.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofConsoleLoggerChannel(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofConsoleLoggerChannel *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofConsoleLoggerChannel.");  
  result = (ofConsoleLoggerChannel *)new ofConsoleLoggerChannel();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofConsoleLoggerChannel, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFileLoggerChannel__SWIG_0(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFileLoggerChannel *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFileLoggerChannel__SWIG_0.");  
  result = (ofFileLoggerChannel *)new ofFileLoggerChannel();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFileLoggerChannel, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFileLoggerChannel__SWIG_1(const v8::Arguments& args, V8ErrorHandler& SWIGV8_ErrorHandler) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  ofFileLoggerChannel *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFileLoggerChannel__SWIG_1.");  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ofFileLoggerChannel" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (ofFileLoggerChannel *)new ofFileLoggerChannel((std::string const &)*arg1,arg2);
  
  
  if (arg1) delete arg1;
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFileLoggerChannel, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFileLoggerChannel(const v8::Arguments& args) {
  v8::HandleScope scope;
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFileLoggerChannel__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    self = _wrap_new_ofFileLoggerChannel__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(self);
    }
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for contruction of _ofFileLoggerChannel");
  
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofFileLoggerChannel(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofFileLoggerChannel(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofFileLoggerChannel *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofFileLoggerChannel_setFile__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFileLoggerChannel *arg1 = (ofFileLoggerChannel *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFileLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileLoggerChannel_setFile" "', argument " "1"" of type '" "ofFileLoggerChannel *""'"); 
  }
  arg1 = (ofFileLoggerChannel *)(argp1);
  
  arg2 = SWIGV8_valueToStringPtr(args[0]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofFileLoggerChannel_setFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->setFile((std::string const &)*arg2,arg3);
  jsresult = v8::Undefined();
  
  
  if (arg2) delete arg2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFileLoggerChannel_setFile__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFileLoggerChannel *arg1 = (ofFileLoggerChannel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFileLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileLoggerChannel_setFile" "', argument " "1"" of type '" "ofFileLoggerChannel *""'"); 
  }
  arg1 = (ofFileLoggerChannel *)(argp1);
  
  arg2 = SWIGV8_valueToStringPtr(args[0]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  (arg1)->setFile((std::string const &)*arg2);
  jsresult = v8::Undefined();
  
  
  if (arg2) delete arg2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFileLoggerChannel_setFile(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFileLoggerChannel_setFile__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFileLoggerChannel_setFile__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setFile.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFileLoggerChannel_log__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFileLoggerChannel *arg1 = (ofFileLoggerChannel *) 0 ;
  ofLogLevel arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFileLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileLoggerChannel_log" "', argument " "1"" of type '" "ofFileLoggerChannel *""'"); 
  }
  arg1 = (ofFileLoggerChannel *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFileLoggerChannel_log" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  
  arg3 = SWIGV8_valueToStringPtr(args[1]);
  if (arg3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg4 = SWIGV8_valueToStringPtr(args[2]);
  if (arg4 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  (arg1)->log(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jsresult = v8::Undefined();
  
  
  
  if (arg3) delete arg3;
  
  
  if (arg4) delete arg4;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFileLoggerChannel_log__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFileLoggerChannel *arg1 = (ofFileLoggerChannel *) 0 ;
  ofLogLevel arg2 ;
  std::string *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFileLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileLoggerChannel_log" "', argument " "1"" of type '" "ofFileLoggerChannel *""'"); 
  }
  arg1 = (ofFileLoggerChannel *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFileLoggerChannel_log" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  
  arg3 = SWIGV8_valueToStringPtr(args[1]);
  if (arg3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofFileLoggerChannel_log" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  (arg1)->log(arg2,(std::string const &)*arg3,(char const *)arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  if (arg3) delete arg3;
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFileLoggerChannel_log__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFileLoggerChannel *arg1 = (ofFileLoggerChannel *) 0 ;
  ofLogLevel arg2 ;
  std::string *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  va_list arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFileLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileLoggerChannel_log" "', argument " "1"" of type '" "ofFileLoggerChannel *""'"); 
  }
  arg1 = (ofFileLoggerChannel *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFileLoggerChannel_log" "', argument " "2"" of type '" "ofLogLevel""'");
  } 
  arg2 = (ofLogLevel)(val2);
  
  arg3 = SWIGV8_valueToStringPtr(args[1]);
  if (arg3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  res4 = SWIG_AsCharPtrAndSize(args[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ofFileLoggerChannel_log" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  {
    res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_va_list,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ofFileLoggerChannel_log" "', argument " "5"" of type '" "va_list""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofFileLoggerChannel_log" "', argument " "5"" of type '" "va_list""'");
    } else {
      arg5 = *((va_list *)(argp5));
    }
  }
  (arg1)->log(arg2,(std::string const &)*arg3,(char const *)arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  if (arg3) delete arg3;
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofFileLoggerChannel_log(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFileLoggerChannel_log__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFileLoggerChannel_log__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofFileLoggerChannel_log__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function log.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFileLoggerChannel_close(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFileLoggerChannel *arg1 = (ofFileLoggerChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFileLoggerChannel_close.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFileLoggerChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileLoggerChannel_close" "', argument " "1"" of type '" "ofFileLoggerChannel *""'"); 
  }
  arg1 = (ofFileLoggerChannel *)(argp1);
  (arg1)->close();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofFileDialogResult(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofFileDialogResult *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofFileDialogResult.");  
  result = (ofFileDialogResult *)new ofFileDialogResult();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofFileDialogResult, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFileDialogResult_getName(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFileDialogResult_getName.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFileDialogResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileDialogResult_getName" "', argument " "1"" of type '" "ofFileDialogResult *""'"); 
  }
  arg1 = (ofFileDialogResult *)(argp1);
  result = (arg1)->getName();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofFileDialogResult_getPath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofFileDialogResult_getPath.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofFileDialogResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileDialogResult_getPath" "', argument " "1"" of type '" "ofFileDialogResult *""'"); 
  }
  arg1 = (ofFileDialogResult *)(argp1);
  result = (arg1)->getPath();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofFileDialogResult_filePath_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofFileDialogResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileDialogResult_filePath_set" "', argument " "1"" of type '" "ofFileDialogResult *""'"); 
  }
  arg1 = (ofFileDialogResult *)(argp1);
  
  arg2 = SWIGV8_valueToStringPtr(value);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  if (arg1) (arg1)->filePath = *arg2;
  
  
  if (arg2) delete arg2;
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofFileDialogResult_filePath_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofFileDialogResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileDialogResult_filePath_get" "', argument " "1"" of type '" "ofFileDialogResult *""'"); 
  }
  arg1 = (ofFileDialogResult *)(argp1);
  result = (std::string *) & ((arg1)->filePath);
  
  jsresult = SWIGV8_stringToValue(*result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofFileDialogResult_fileName_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofFileDialogResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileDialogResult_fileName_set" "', argument " "1"" of type '" "ofFileDialogResult *""'"); 
  }
  arg1 = (ofFileDialogResult *)(argp1);
  
  arg2 = SWIGV8_valueToStringPtr(value);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  if (arg1) (arg1)->fileName = *arg2;
  
  
  if (arg2) delete arg2;
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofFileDialogResult_fileName_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofFileDialogResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileDialogResult_fileName_get" "', argument " "1"" of type '" "ofFileDialogResult *""'"); 
  }
  arg1 = (ofFileDialogResult *)(argp1);
  result = (std::string *) & ((arg1)->fileName);
  
  jsresult = SWIGV8_stringToValue(*result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofFileDialogResult_bSuccess_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofFileDialogResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileDialogResult_bSuccess_set" "', argument " "1"" of type '" "ofFileDialogResult *""'"); 
  }
  arg1 = (ofFileDialogResult *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofFileDialogResult_bSuccess_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->bSuccess = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofFileDialogResult_bSuccess_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofFileDialogResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofFileDialogResult_bSuccess_get" "', argument " "1"" of type '" "ofFileDialogResult *""'"); 
  }
  arg1 = (ofFileDialogResult *)(argp1);
  result = (bool) ((arg1)->bSuccess);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofFileDialogResult(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofFileDialogResult(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofFileDialogResult *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofSystemAlertDialog(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSystemAlertDialog.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ofSystemAlertDialog(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSystemLoadDialog__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string arg3 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string *tmp3 ;
  ofFileDialogResult result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSystemLoadDialog" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  
  tmp3 = SWIGV8_valueToStringPtr(args[2]);
  arg3 = *tmp3;
  if (tmp3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp3) delete tmp3;
  
  result = ofSystemLoadDialog(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new ofFileDialogResult((const ofFileDialogResult&)(result))), SWIGTYPE_p_ofFileDialogResult, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSystemLoadDialog__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  ofFileDialogResult result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofSystemLoadDialog" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = ofSystemLoadDialog(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new ofFileDialogResult((const ofFileDialogResult&)(result))), SWIGTYPE_p_ofFileDialogResult, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSystemLoadDialog__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  ofFileDialogResult result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofSystemLoadDialog(arg1);
  jsresult = SWIG_NewPointerObj((new ofFileDialogResult((const ofFileDialogResult&)(result))), SWIGTYPE_p_ofFileDialogResult, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSystemLoadDialog__SWIG_3(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofFileDialogResult result;
  
  result = ofSystemLoadDialog();
  jsresult = SWIG_NewPointerObj((new ofFileDialogResult((const ofFileDialogResult&)(result))), SWIGTYPE_p_ofFileDialogResult, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSystemLoadDialog(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSystemLoadDialog__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSystemLoadDialog__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSystemLoadDialog__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSystemLoadDialog__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSystemLoadDialog.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSystemSaveDialog(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  ofFileDialogResult result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSystemSaveDialog.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = ofSystemSaveDialog(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new ofFileDialogResult((const ofFileDialogResult&)(result))), SWIGTYPE_p_ofFileDialogResult, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSystemTextBoxDialog__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = ofSystemTextBoxDialog(arg1,arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSystemTextBoxDialog__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofSystemTextBoxDialog(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSystemTextBoxDialog(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSystemTextBoxDialog__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSystemTextBoxDialog__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSystemTextBoxDialog.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofResetElapsedTimeCounter(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofResetElapsedTimeCounter.");  
  
  ofResetElapsedTimeCounter();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetElapsedTimef(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetElapsedTimef.");  
  
  result = (float)ofGetElapsedTimef();
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetFrameNum(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetFrameNum.");  
  
  result = (int)ofGetFrameNum();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetSeconds(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetSeconds.");  
  
  result = (int)ofGetSeconds();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetMinutes(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetMinutes.");  
  
  result = (int)ofGetMinutes();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetHours(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetHours.");  
  
  result = (int)ofGetHours();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetUnixTime(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetUnixTime.");  
  
  result = (unsigned int)ofGetUnixTime();
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetTimestampString__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string result;
  
  result = ofGetTimestampString();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofGetTimestampString__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofGetTimestampString(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofGetTimestampString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofGetTimestampString__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofGetTimestampString__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofGetTimestampString.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetYear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetYear.");  
  
  result = (int)ofGetYear();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetMonth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetMonth.");  
  
  result = (int)ofGetMonth();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetDay(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetDay.");  
  
  result = (int)ofGetDay();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetWeekday(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetWeekday.");  
  
  result = (int)ofGetWeekday();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofLaunchBrowser(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofLaunchBrowser.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ofLaunchBrowser(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofEnableDataPath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofEnableDataPath.");  
  
  ofEnableDataPath();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofDisableDataPath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofDisableDataPath.");  
  
  ofDisableDataPath();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToDataPath__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  bool arg2 ;
  std::string *tmp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofToDataPath" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = ofToDataPath(arg1,arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofToDataPath__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofToDataPath(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofToDataPath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofToDataPath__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofToDataPath__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofToDataPath.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSetDataPathRoot(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSetDataPathRoot.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ofSetDataPathRoot(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToHex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofToHex.");  
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofToHex" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = ofToHex((char const *)arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofHexToInt(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofHexToInt.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (int)ofHexToInt((std::string const &)*arg1);
  jsresult = SWIG_From_int((int)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofHexToChar(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  char result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofHexToChar.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (char)ofHexToChar((std::string const &)*arg1);
  jsresult = SWIG_From_char((char)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofHexToFloat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofHexToFloat.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (float)ofHexToFloat((std::string const &)*arg1);
  jsresult = SWIG_From_float((float)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofHexToString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofHexToString.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = ofHexToString((std::string const &)*arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToInt(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofToInt.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (int)ofToInt((std::string const &)*arg1);
  jsresult = SWIG_From_int((int)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToChar(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  char result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofToChar.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (char)ofToChar((std::string const &)*arg1);
  jsresult = SWIG_From_char((char)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToFloat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofToFloat.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (float)ofToFloat((std::string const &)*arg1);
  jsresult = SWIG_From_float((float)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToDouble(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofToDouble.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (double)ofToDouble((std::string const &)*arg1);
  jsresult = SWIG_From_double((double)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToBool(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofToBool.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (bool)ofToBool((std::string const &)*arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToBinary(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofToBinary.");  
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofToBinary" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = ofToBinary((char const *)arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBinaryToInt(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBinaryToInt.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (int)ofBinaryToInt((std::string const &)*arg1);
  jsresult = SWIG_From_int((int)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBinaryToChar(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  char result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBinaryToChar.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (char)ofBinaryToChar((std::string const &)*arg1);
  jsresult = SWIG_From_char((char)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBinaryToFloat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBinaryToFloat.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = (float)ofBinaryToFloat((std::string const &)*arg1);
  jsresult = SWIG_From_float((float)(result));
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofBinaryToString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofBinaryToString.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = ofBinaryToString((std::string const &)*arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetVersionInfo(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetVersionInfo.");  
  
  result = ofGetVersionInfo();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSaveScreen(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSaveScreen.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ofSaveScreen(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSaveFrame__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ofSaveFrame" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  ofSaveFrame(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSaveFrame__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  
  ofSaveFrame();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSaveFrame(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveFrame__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSaveFrame__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSaveFrame.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSaveViewport(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSaveViewport.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  ofSaveViewport(arg1);
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSplitString__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSplitString" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofSplitString" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = ofSplitString((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >((const std::vector< std::string >&)(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  if (arg1) delete arg1;
  
  
  if (arg2) delete arg2;
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSplitString__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofSplitString" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  result = ofSplitString((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >((const std::vector< std::string >&)(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  if (arg1) delete arg1;
  
  
  if (arg2) delete arg2;
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofSplitString__SWIG_2(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = ofSplitString((std::string const &)*arg1,(std::string const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >((const std::vector< std::string >&)(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  if (arg1) delete arg1;
  
  
  if (arg2) delete arg2;
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofSplitString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSplitString__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSplitString__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofSplitString__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofSplitString.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofJoinString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< std::vector< std::string > > arg1 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofJoinString.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofJoinString" "', argument " "1"" of type '" "std::vector< std::string >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofJoinString" "', argument " "1"" of type '" "std::vector< std::string >""'");
    } else {
      arg1 = *((std::vector< std::string > *)(argp1));
    }
  }
  
  arg2 = SWIGV8_valueToStringPtr(args[1]);
  if (arg2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = ofJoinString(arg1,(std::string const &)*arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  if (arg2) delete arg2;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofStringReplace(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  std::string *tmp3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofStringReplace.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofStringReplace" "', argument " "1"" of type '" "std::string &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofStringReplace" "', argument " "1"" of type '" "std::string &""'"); 
  }
  arg1 = (std::string *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  
  tmp3 = SWIGV8_valueToStringPtr(args[2]);
  arg3 = *tmp3;
  if (tmp3 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp3) delete tmp3;
  
  ofStringReplace(*arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofIsStringInString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string arg2 ;
  std::string *tmp1 ;
  std::string *tmp2 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofIsStringInString.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  
  tmp2 = SWIGV8_valueToStringPtr(args[1]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)ofIsStringInString(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToLower(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofToLower.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = ofToLower((std::string const &)*arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofToUpper(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofToUpper.");  
  
  
  arg1 = SWIGV8_valueToStringPtr(args[0]);
  if (arg1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  
  result = ofToUpper((std::string const &)*arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  if (arg1) delete arg1;
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVAArgsToString__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  std::string result;
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVAArgsToString" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = ofVAArgsToString((char const *)arg1,arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVAArgsToString__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::string result;
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVAArgsToString" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_va_list,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVAArgsToString" "', argument " "2"" of type '" "va_list""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVAArgsToString" "', argument " "2"" of type '" "va_list""'");
    } else {
      arg2 = *((va_list *)(argp2));
    }
  }
  result = ofVAArgsToString((char const *)arg1,arg2);
  
  jsresult = SWIGV8_stringToValue(result);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap__ofVAArgsToString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVAArgsToString__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVAArgsToString__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ofVAArgsToString.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofSystem(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  std::string arg1 ;
  std::string *tmp1 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofSystem.");  
  
  
  tmp1 = SWIGV8_valueToStringPtr(args[0]);
  arg1 = *tmp1;
  if (tmp1 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp1) delete tmp1;
  
  result = ofSystem(arg1);
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofGetTargetPlatform(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofTargetPlatform result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofGetTargetPlatform.");  
  
  result = (ofTargetPlatform)ofGetTargetPlatform();
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVideoGrabber(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVideoGrabber *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVideoGrabber.");  
  result = (ofVideoGrabber *)new ofVideoGrabber();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVideoGrabber, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofVideoGrabber(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofVideoGrabber(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofVideoGrabber *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_setGrabber(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  SwigValueWrapper< ofPtr< ofBaseVideoGrabber > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_setGrabber.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_setGrabber" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVideoGrabber_setGrabber" "', argument " "2"" of type '" "ofPtr< ofBaseVideoGrabber >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVideoGrabber_setGrabber" "', argument " "2"" of type '" "ofPtr< ofBaseVideoGrabber >""'");
    } else {
      arg2 = *((ofPtr< ofBaseVideoGrabber > *)(argp2));
    }
  }
  (arg1)->setGrabber(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_getGrabber(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ofPtr< ofBaseVideoGrabber > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_getGrabber.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_getGrabber" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (arg1)->getGrabber();
  jsresult = SWIG_NewPointerObj((new ofPtr< ofBaseVideoGrabber >((const ofPtr< ofBaseVideoGrabber >&)(result))), SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_listDevices(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_listDevices.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_listDevices" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  (arg1)->listDevices();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_isFrameNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_isFrameNew.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_isFrameNew" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (bool)(arg1)->isFrameNew();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_update(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_update.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_update" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  (arg1)->update();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_grabFrame(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_grabFrame.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_grabFrame" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  (arg1)->grabFrame();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_close(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_close.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_close" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  (arg1)->close();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_initGrabber__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_initGrabber" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_initGrabber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoGrabber_initGrabber" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)(arg1)->initGrabber(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_initGrabber__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_initGrabber" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_initGrabber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoGrabber_initGrabber" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVideoGrabber_initGrabber" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  result = (bool)(arg1)->initGrabber(arg2,arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_initGrabber(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVideoGrabber_initGrabber__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
    jsresult = _wrap_ofVideoGrabber_initGrabber__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return scope.Close(jsresult);
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function initGrabber.");
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_setPixelFormat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  ofPixelFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_setPixelFormat.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_setPixelFormat" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_setPixelFormat" "', argument " "2"" of type '" "ofPixelFormat""'");
  } 
  arg2 = (ofPixelFormat)(val2);
  result = (bool)(arg1)->setPixelFormat(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_getPixelFormat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPixelFormat result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_getPixelFormat.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_getPixelFormat" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (ofPixelFormat)(arg1)->getPixelFormat();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_videoSettings(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_videoSettings.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_videoSettings" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  (arg1)->videoSettings();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_getPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_getPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_getPixels" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (unsigned char *)(arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_getPixelsRef(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPixels *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_getPixelsRef.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_getPixelsRef" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (ofPixels *) &(arg1)->getPixelsRef();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_getTextureReference(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTexture *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_getTextureReference.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_getTextureReference" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (ofTexture *) &(arg1)->getTextureReference();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTexture, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_setVerbose(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_setVerbose.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_setVerbose" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_setVerbose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setVerbose(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_setDeviceID(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_setDeviceID.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_setDeviceID" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_setDeviceID" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setDeviceID(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_setDesiredFrameRate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_setDesiredFrameRate.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_setDesiredFrameRate" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_setDesiredFrameRate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setDesiredFrameRate(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_setUseTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_setUseTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_setUseTexture" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_setUseTexture" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setUseTexture(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_draw__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_draw" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoGrabber_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVideoGrabber_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofVideoGrabber_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->draw(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_draw__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_draw" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoGrabber_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->draw(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_setAnchorPercent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_setAnchorPercent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_setAnchorPercent" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_setAnchorPercent" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoGrabber_setAnchorPercent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPercent(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_setAnchorPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_setAnchorPoint.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_setAnchorPoint" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_setAnchorPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoGrabber_setAnchorPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPoint(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_resetAnchor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_resetAnchor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_resetAnchor" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  (arg1)->resetAnchor();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_getHeight" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (float)(arg1)->getHeight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_getWidth" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (float)(arg1)->getWidth();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_isInitialized(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoGrabber_isInitialized.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_isInitialized" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (bool)(arg1)->isInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVideoGrabber_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_height_set" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_height_get" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (int) ((arg1)->height);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVideoGrabber_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_width_set" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoGrabber_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVideoGrabber_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVideoGrabber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoGrabber_width_get" "', argument " "1"" of type '" "ofVideoGrabber *""'"); 
  }
  arg1 = (ofVideoGrabber *)(argp1);
  result = (int) ((arg1)->width);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ofVideoPlayer(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ofVideoPlayer *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ofVideoPlayer.");  
  result = (ofVideoPlayer *)new ofVideoPlayer();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ofVideoPlayer, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setPlayer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SwigValueWrapper< ofPtr< ofBaseVideoPlayer > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setPlayer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setPlayer" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ofVideoPlayer_setPlayer" "', argument " "2"" of type '" "ofPtr< ofBaseVideoPlayer >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ofVideoPlayer_setPlayer" "', argument " "2"" of type '" "ofPtr< ofBaseVideoPlayer >""'");
    } else {
      arg2 = *((ofPtr< ofBaseVideoPlayer > *)(argp2));
    }
  }
  (arg1)->setPlayer(arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getPlayer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ofPtr< ofBaseVideoPlayer > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getPlayer.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getPlayer" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (arg1)->getPlayer();
  jsresult = SWIG_NewPointerObj((new ofPtr< ofBaseVideoPlayer >((const ofPtr< ofBaseVideoPlayer >&)(result))), SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_loadMovie(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *tmp2 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_loadMovie.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_loadMovie" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  
  tmp2 = SWIGV8_valueToStringPtr(args[0]);
  arg2 = *tmp2;
  if (tmp2 == 0) {
    v8::ThrowException(v8::Exception::TypeError(v8::String::New("Null pointer."))); goto fail; 
  }
  if (tmp2) delete tmp2;
  
  result = (bool)(arg1)->loadMovie(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getMoviePath(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getMoviePath.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getMoviePath" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (arg1)->getMoviePath();
  
  jsresult = SWIGV8_stringToValue(result);
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setPixelFormat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofPixelFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setPixelFormat.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setPixelFormat" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setPixelFormat" "', argument " "2"" of type '" "ofPixelFormat""'");
  } 
  arg2 = (ofPixelFormat)(val2);
  result = (bool)(arg1)->setPixelFormat(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getPixelFormat(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPixelFormat result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getPixelFormat.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getPixelFormat" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (ofPixelFormat)(arg1)->getPixelFormat();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_closeMovie(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_closeMovie.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_closeMovie" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->closeMovie();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_close(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_close.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_close" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->close();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_update(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_update.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_update" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->update();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_idleMovie(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_idleMovie.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_idleMovie" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->idleMovie();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_play(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_play.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_play" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->play();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_stop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_stop.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_stop" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->stop();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_isFrameNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_isFrameNew.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_isFrameNew" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (bool)(arg1)->isFrameNew();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getPixels(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getPixels.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getPixels" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (unsigned char *)(arg1)->getPixels();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getPixelsRef(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofPixels *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getPixelsRef.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getPixelsRef" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (ofPixels *) &(arg1)->getPixelsRef();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getPosition.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getPosition" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (float)(arg1)->getPosition();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getSpeed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getSpeed.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getSpeed" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (float)(arg1)->getSpeed();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getDuration(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getDuration.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getDuration" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (float)(arg1)->getDuration();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getIsMovieDone(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getIsMovieDone.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getIsMovieDone" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (bool)(arg1)->getIsMovieDone();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setPosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setPosition.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setPosition" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setPosition" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setPosition(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setVolume(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setVolume.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setVolume" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setVolume" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setVolume(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setLoopState(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofLoopType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setLoopState.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setLoopState" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setLoopState" "', argument " "2"" of type '" "ofLoopType""'");
  } 
  arg2 = (ofLoopType)(val2);
  (arg1)->setLoopState(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getLoopState(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofLoopType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getLoopState.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getLoopState" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (ofLoopType)(arg1)->getLoopState();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setSpeed(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setSpeed.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setSpeed" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setSpeed" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setSpeed(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setFrame(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setFrame.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setFrame" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->setFrame(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setUseTexture(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setUseTexture.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setUseTexture" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setUseTexture" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setUseTexture(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getTextureReference(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ofTexture *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getTextureReference.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getTextureReference" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (ofTexture *) &(arg1)->getTextureReference();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ofTexture, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_draw__SWIG_0(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_draw" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoPlayer_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ofVideoPlayer_draw" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ofVideoPlayer_draw" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  (arg1)->draw(arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_draw__SWIG_1(const v8::Arguments &args, V8ErrorHandler& SWIGV8_ErrorHandler)
{
  v8::HandleScope scope;  
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_draw" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_draw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoPlayer_draw" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->draw(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);  
  goto fail;
fail:
  return scope.Close(jsresult);
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setAnchorPercent(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setAnchorPercent.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setAnchorPercent" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setAnchorPercent" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoPlayer_setAnchorPercent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPercent(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setAnchorPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setAnchorPoint.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setAnchorPoint" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setAnchorPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ofVideoPlayer_setAnchorPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAnchorPoint(arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_resetAnchor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_resetAnchor.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_resetAnchor" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->resetAnchor();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_setPaused(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_setPaused.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_setPaused" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_setPaused" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->setPaused(arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getCurrentFrame(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getCurrentFrame.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getCurrentFrame" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (int)(arg1)->getCurrentFrame();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getTotalNumFrames(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getTotalNumFrames.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getTotalNumFrames" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (int)(arg1)->getTotalNumFrames();
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_firstFrame(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_firstFrame.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_firstFrame" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->firstFrame();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_nextFrame(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_nextFrame.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_nextFrame" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->nextFrame();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_previousFrame(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_previousFrame.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_previousFrame" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  (arg1)->previousFrame();
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getHeight(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getHeight.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getHeight" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (float)(arg1)->getHeight();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_getWidth(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_getWidth.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_getWidth" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (float)(arg1)->getWidth();
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_isPaused(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_isPaused.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_isPaused" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (bool)(arg1)->isPaused();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_isLoaded(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_isLoaded.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_isLoaded" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (bool)(arg1)->isLoaded();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_isPlaying(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ofVideoPlayer_isPlaying.");  
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_isPlaying" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (bool)(arg1)->isPlaying();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVideoPlayer_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_height_set" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->height = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_height_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_height_get" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (int) ((arg1)->height);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ofVideoPlayer_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_width_set" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ofVideoPlayer_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->width = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ofVideoPlayer_width_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ofVideoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ofVideoPlayer_width_get" "', argument " "1"" of type '" "ofVideoPlayer *""'"); 
  }
  arg1 = (ofVideoPlayer *)(argp1);
  result = (int) ((arg1)->width);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#ifdef BUILDING_NODE_EXTENSION
void _wrap_delete_ofVideoPlayer(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_ofVideoPlayer(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofVideoPlayer *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ofEasyCamTo_p_ofCamera(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofCamera *)  ((ofEasyCam *) x));
}
static void *_p_ofEasyCamTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *) (ofCamera *) ((ofEasyCam *) x));
}
static void *_p_ofLightTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *)  ((ofLight *) x));
}
static void *_p_ofCameraTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *)  ((ofCamera *) x));
}
static void *_p_ofConsoleLoggerChannelTo_p_ofBaseLoggerChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseLoggerChannel *)  ((ofConsoleLoggerChannel *) x));
}
static void *_p_ofFileLoggerChannelTo_p_ofBaseLoggerChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseLoggerChannel *)  ((ofFileLoggerChannel *) x));
}
static void *_p_ofVboMeshTo_p_ofMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofMesh *)  ((ofVboMesh *) x));
}
static void *_p_ofFboTo_p_ofBaseHasTexture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexture *)  ((ofFbo *) x));
}
static void *_p_ofEntryEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofEntryEventArgs *) x));
}
static void *_p_ofKeyEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofKeyEventArgs *) x));
}
static void *_p_ofMouseEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofMouseEventArgs *) x));
}
static void *_p_ofTouchEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofTouchEventArgs *) x));
}
static void *_p_ofAudioEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofAudioEventArgs *) x));
}
static void *_p_ofResizeEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofResizeEventArgs *) x));
}
static void *_p_ofMessageTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofMessage *) x));
}
static void *_p_ofLogErrorTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogError *) x));
}
static void *_p_ofLogNoticeTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogNotice *) x));
}
static void *_p_ofLogFatalErrorTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogFatalError *) x));
}
static void *_p_ofLogVerboseTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogVerbose *) x));
}
static void *_p_ofLogWarningTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogWarning *) x));
}
static swig_type_info _swigt__p_GLenum = {"_p_GLenum", "GLenum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLfloat = {"_p_GLfloat", "GLfloat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLint = {"_p_GLint", "GLint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLuint = {"_p_GLuint", "GLuint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Poco__FastMutex = {"_p_Poco__FastMutex", "Poco::FastMutex *|ofMutex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Poco__File = {"_p_Poco__File", "Poco::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TESSindex = {"_p_TESSindex", "ofIndexType *|TESSindex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_charProps = {"_p_charProps", "p_charProps|charProps *", 0, 0, (void*)&_charProps_clientData, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_filebuf = {"_p_filebuf", "filebuf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_istream = {"_p_istream", "istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofAudioEventArgs = {"_p_ofAudioEventArgs", "ofAudioEventArgs *|p_ofAudioEventArgs", 0, 0, (void*)&_ofAudioEventArgs_clientData, 0};
static swig_type_info _swigt__p_ofBaseApp = {"_p_ofBaseApp", "ofSimpleApp *|ofBaseApp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseHasTexture = {"_p_ofBaseHasTexture", "ofBaseHasTexture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseLoggerChannel = {"_p_ofBaseLoggerChannel", "p_ofBaseLoggerChannel|ofBaseLoggerChannel *", 0, 0, (void*)&_ofBaseLoggerChannel_clientData, 0};
static swig_type_info _swigt__p_ofBuffer = {"_p_ofBuffer", "p_ofBuffer|ofBuffer *", 0, 0, (void*)&_ofBuffer_clientData, 0};
static swig_type_info _swigt__p_ofCamera = {"_p_ofCamera", "ofCamera *|p_ofCamera", 0, 0, (void*)&_ofCamera_clientData, 0};
static swig_type_info _swigt__p_ofColor_T_float_t = {"_p_ofColor_T_float_t", "ofColor_< float > *|ofFloatColor *|p_ofColor_T_float_t", 0, 0, (void*)&_ofColor_T_float_t_clientData, 0};
static swig_type_info _swigt__p_ofColor_T_unsigned_char_t = {"_p_ofColor_T_unsigned_char_t", "ofColor_< unsigned char > *|p_ofColor_T_unsigned_char_t|ofColor *", 0, 0, (void*)&_ofColor_T_unsigned_char_t_clientData, 0};
static swig_type_info _swigt__p_ofColor_T_unsigned_short_t = {"_p_ofColor_T_unsigned_short_t", "p_ofColor_T_unsigned_short_t|ofColor_< unsigned short > *|ofShortColor *", 0, 0, (void*)&_ofColor_T_unsigned_short_t_clientData, 0};
static swig_type_info _swigt__p_ofConsoleLoggerChannel = {"_p_ofConsoleLoggerChannel", "p_ofConsoleLoggerChannel|ofConsoleLoggerChannel *", 0, 0, (void*)&_ofConsoleLoggerChannel_clientData, 0};
static swig_type_info _swigt__p_ofCoreEvents = {"_p_ofCoreEvents", "ofCoreEvents *|p_ofCoreEvents", 0, 0, (void*)&_ofCoreEvents_clientData, 0};
static swig_type_info _swigt__p_ofDirectory = {"_p_ofDirectory", "ofDirectory *|p_ofDirectory", 0, 0, (void*)&_ofDirectory_clientData, 0};
static swig_type_info _swigt__p_ofDragInfo = {"_p_ofDragInfo", "ofDragInfo *|p_ofDragInfo", 0, 0, (void*)&_ofDragInfo_clientData, 0};
static swig_type_info _swigt__p_ofEasyCam = {"_p_ofEasyCam", "p_ofEasyCam|ofEasyCam *", 0, 0, (void*)&_ofEasyCam_clientData, 0};
static swig_type_info _swigt__p_ofEntryEventArgs = {"_p_ofEntryEventArgs", "ofEntryEventArgs *|p_ofEntryEventArgs", 0, 0, (void*)&_ofEntryEventArgs_clientData, 0};
static swig_type_info _swigt__p_ofEventArgs = {"_p_ofEventArgs", "ofEventArgs *|p_ofEventArgs", 0, 0, (void*)&_ofEventArgs_clientData, 0};
static swig_type_info _swigt__p_ofEventT_ofAudioEventArgs_t = {"_p_ofEventT_ofAudioEventArgs_t", "ofEvent< ofAudioEventArgs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventT_ofDragInfo_t = {"_p_ofEventT_ofDragInfo_t", "ofEvent< ofDragInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventT_ofEntryEventArgs_t = {"_p_ofEventT_ofEntryEventArgs_t", "ofEvent< ofEntryEventArgs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventT_ofEventArgs_t = {"_p_ofEventT_ofEventArgs_t", "ofEvent< ofEventArgs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventT_ofKeyEventArgs_t = {"_p_ofEventT_ofKeyEventArgs_t", "ofEvent< ofKeyEventArgs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventT_ofMessage_t = {"_p_ofEventT_ofMessage_t", "ofEvent< ofMessage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventT_ofMouseEventArgs_t = {"_p_ofEventT_ofMouseEventArgs_t", "ofEvent< ofMouseEventArgs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventT_ofResizeEventArgs_t = {"_p_ofEventT_ofResizeEventArgs_t", "ofEvent< ofResizeEventArgs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventT_ofTouchEventArgs_t = {"_p_ofEventT_ofTouchEventArgs_t", "ofEvent< ofTouchEventArgs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofFbo = {"_p_ofFbo", "ofFbo *|p_ofFbo", 0, 0, (void*)&_ofFbo_clientData, 0};
static swig_type_info _swigt__p_ofFbo__Settings = {"_p_ofFbo__Settings", "ofFbo::Settings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofFile = {"_p_ofFile", "ofFile *|p_ofFile", 0, 0, (void*)&_ofFile_clientData, 0};
static swig_type_info _swigt__p_ofFileDialogResult = {"_p_ofFileDialogResult", "ofFileDialogResult *|p_ofFileDialogResult", 0, 0, (void*)&_ofFileDialogResult_clientData, 0};
static swig_type_info _swigt__p_ofFileLoggerChannel = {"_p_ofFileLoggerChannel", "p_ofFileLoggerChannel|ofFileLoggerChannel *", 0, 0, (void*)&_ofFileLoggerChannel_clientData, 0};
static swig_type_info _swigt__p_ofFilePath = {"_p_ofFilePath", "p_ofFilePath", 0, 0, (void*)&_ofFilePath_clientData, 0};
static swig_type_info _swigt__p_ofImage_T_float_t = {"_p_ofImage_T_float_t", "ofFloatImage *|ofImage_< float > *|p_ofImage_T_float_t", 0, 0, (void*)&_ofImage_T_float_t_clientData, 0};
static swig_type_info _swigt__p_ofImage_T_unsigned_char_t = {"_p_ofImage_T_unsigned_char_t", "ofImage *|ofImage_< unsigned char > *|p_ofImage_T_unsigned_char_t", 0, 0, (void*)&_ofImage_T_unsigned_char_t_clientData, 0};
static swig_type_info _swigt__p_ofImage_T_unsigned_short_t = {"_p_ofImage_T_unsigned_short_t", "p_ofImage_T_unsigned_short_t|ofImage_< unsigned short > *|ofShortImage *", 0, 0, (void*)&_ofImage_T_unsigned_short_t_clientData, 0};
static swig_type_info _swigt__p_ofKeyEventArgs = {"_p_ofKeyEventArgs", "ofKeyEventArgs *|p_ofKeyEventArgs", 0, 0, (void*)&_ofKeyEventArgs_clientData, 0};
static swig_type_info _swigt__p_ofLight = {"_p_ofLight", "p_ofLight|ofLight *", 0, 0, (void*)&_ofLight_clientData, 0};
static swig_type_info _swigt__p_ofLog = {"_p_ofLog", "ofLog *|p_ofLog", 0, 0, (void*)&_ofLog_clientData, 0};
static swig_type_info _swigt__p_ofLogError = {"_p_ofLogError", "p_ofLogError", 0, 0, (void*)&_ofLogError_clientData, 0};
static swig_type_info _swigt__p_ofLogFatalError = {"_p_ofLogFatalError", "p_ofLogFatalError", 0, 0, (void*)&_ofLogFatalError_clientData, 0};
static swig_type_info _swigt__p_ofLogNotice = {"_p_ofLogNotice", "p_ofLogNotice", 0, 0, (void*)&_ofLogNotice_clientData, 0};
static swig_type_info _swigt__p_ofLogVerbose = {"_p_ofLogVerbose", "p_ofLogVerbose", 0, 0, (void*)&_ofLogVerbose_clientData, 0};
static swig_type_info _swigt__p_ofLogWarning = {"_p_ofLogWarning", "p_ofLogWarning", 0, 0, (void*)&_ofLogWarning_clientData, 0};
static swig_type_info _swigt__p_ofMaterial = {"_p_ofMaterial", "ofMaterial *|p_ofMaterial", 0, 0, (void*)&_ofMaterial_clientData, 0};
static swig_type_info _swigt__p_ofMatrix3x3 = {"_p_ofMatrix3x3", "ofMatrix3x3 *|p_ofMatrix3x3", 0, 0, (void*)&_ofMatrix3x3_clientData, 0};
static swig_type_info _swigt__p_ofMatrix4x4 = {"_p_ofMatrix4x4", "p_ofMatrix4x4|ofMatrix4x4 *", 0, 0, (void*)&_ofMatrix4x4_clientData, 0};
static swig_type_info _swigt__p_ofMesh = {"_p_ofMesh", "p_ofMesh|ofMesh *", 0, 0, (void*)&_ofMesh_clientData, 0};
static swig_type_info _swigt__p_ofMessage = {"_p_ofMessage", "p_ofMessage|ofMessage *", 0, 0, (void*)&_ofMessage_clientData, 0};
static swig_type_info _swigt__p_ofMouseEventArgs = {"_p_ofMouseEventArgs", "ofMouseEventArgs *|p_ofMouseEventArgs", 0, 0, (void*)&_ofMouseEventArgs_clientData, 0};
static swig_type_info _swigt__p_ofNode = {"_p_ofNode", "p_ofNode|ofNode *", 0, 0, (void*)&_ofNode_clientData, 0};
static swig_type_info _swigt__p_ofPath = {"_p_ofPath", "ofTTFCharacter *|ofPath *|p_ofPath", 0, 0, (void*)&_ofPath_clientData, 0};
static swig_type_info _swigt__p_ofPixels_T_float_t = {"_p_ofPixels_T_float_t", "ofPixels_< float > *|ofFloatPixels *|p_ofPixels_T_float_t", 0, 0, (void*)&_ofPixels_T_float_t_clientData, 0};
static swig_type_info _swigt__p_ofPixels_T_unsigned_char_t = {"_p_ofPixels_T_unsigned_char_t", "ofPixels_< unsigned char > *|ofPixels *|p_ofPixels_T_unsigned_char_t", 0, 0, (void*)&_ofPixels_T_unsigned_char_t_clientData, 0};
static swig_type_info _swigt__p_ofPixels_T_unsigned_short_t = {"_p_ofPixels_T_unsigned_short_t", "p_ofPixels_T_unsigned_short_t|ofPixels_< unsigned short > *|ofShortPixels *", 0, 0, (void*)&_ofPixels_T_unsigned_short_t_clientData, 0};
static swig_type_info _swigt__p_ofPolyline = {"_p_ofPolyline", "ofPolyline *|p_ofPolyline", 0, 0, (void*)&_ofPolyline_clientData, 0};
static swig_type_info _swigt__p_ofPtrT_ofBaseLoggerChannel_t = {"_p_ofPtrT_ofBaseLoggerChannel_t", "ofPtr< ofBaseLoggerChannel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofBaseRenderer_t = {"_p_ofPtrT_ofBaseRenderer_t", "ofPtr< ofBaseRenderer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofBaseSoundPlayer_t = {"_p_ofPtrT_ofBaseSoundPlayer_t", "ofPtr< ofBaseSoundPlayer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofBaseVideoGrabber_t = {"_p_ofPtrT_ofBaseVideoGrabber_t", "ofPtr< ofBaseVideoGrabber > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofBaseVideoPlayer_t = {"_p_ofPtrT_ofBaseVideoPlayer_t", "ofPtr< ofBaseVideoPlayer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofGLRenderer_t = {"_p_ofPtrT_ofGLRenderer_t", "ofPtr< ofGLRenderer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofQuaternion = {"_p_ofQuaternion", "p_ofQuaternion|ofQuaternion *", 0, 0, (void*)&_ofQuaternion_clientData, 0};
static swig_type_info _swigt__p_ofRectangle = {"_p_ofRectangle", "ofRectangle *|p_ofRectangle", 0, 0, (void*)&_ofRectangle_clientData, 0};
static swig_type_info _swigt__p_ofResizeEventArgs = {"_p_ofResizeEventArgs", "ofResizeEventArgs *|p_ofResizeEventArgs", 0, 0, (void*)&_ofResizeEventArgs_clientData, 0};
static swig_type_info _swigt__p_ofSerialDeviceInfo = {"_p_ofSerialDeviceInfo", "ofSerialDeviceInfo *|p_ofSerialDeviceInfo", 0, 0, (void*)&_ofSerialDeviceInfo_clientData, 0};
static swig_type_info _swigt__p_ofShader = {"_p_ofShader", "p_ofShader|ofShader *", 0, 0, (void*)&_ofShader_clientData, 0};
static swig_type_info _swigt__p_ofSoundPlayer = {"_p_ofSoundPlayer", "p_ofSoundPlayer|ofSoundPlayer *", 0, 0, (void*)&_ofSoundPlayer_clientData, 0};
static swig_type_info _swigt__p_ofStyle = {"_p_ofStyle", "ofStyle *|p_ofStyle", 0, 0, (void*)&_ofStyle_clientData, 0};
static swig_type_info _swigt__p_ofSubPath = {"_p_ofSubPath", "p_ofSubPath|ofSubPath *", 0, 0, (void*)&_ofSubPath_clientData, 0};
static swig_type_info _swigt__p_ofSubPath__Command = {"_p_ofSubPath__Command", "ofSubPath::Command *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofTessellator = {"_p_ofTessellator", "ofTessellator *|p_ofTessellator", 0, 0, (void*)&_ofTessellator_clientData, 0};
static swig_type_info _swigt__p_ofTexture = {"_p_ofTexture", "ofTexture *|p_ofTexture", 0, 0, (void*)&_ofTexture_clientData, 0};
static swig_type_info _swigt__p_ofTextureData = {"_p_ofTextureData", "ofTextureData *|p_ofTextureData", 0, 0, (void*)&_ofTextureData_clientData, 0};
static swig_type_info _swigt__p_ofTouchEventArgs = {"_p_ofTouchEventArgs", "ofTouchEventArgs *|p_ofTouchEventArgs", 0, 0, (void*)&_ofTouchEventArgs_clientData, 0};
static swig_type_info _swigt__p_ofTrueTypeFont = {"_p_ofTrueTypeFont", "ofTrueTypeFont *|p_ofTrueTypeFont", 0, 0, (void*)&_ofTrueTypeFont_clientData, 0};
static swig_type_info _swigt__p_ofVbo = {"_p_ofVbo", "p_ofVbo|ofVbo *", 0, 0, (void*)&_ofVbo_clientData, 0};
static swig_type_info _swigt__p_ofVboMesh = {"_p_ofVboMesh", "ofVboMesh *|p_ofVboMesh", 0, 0, (void*)&_ofVboMesh_clientData, 0};
static swig_type_info _swigt__p_ofVec2f = {"_p_ofVec2f", "ofVec2f *|p_ofVec2f", 0, 0, (void*)&_ofVec2f_clientData, 0};
static swig_type_info _swigt__p_ofVec3f = {"_p_ofVec3f", "p_ofVec3f|ofPoint *|ofVec3f *", 0, 0, (void*)&_ofVec3f_clientData, 0};
static swig_type_info _swigt__p_ofVec4f = {"_p_ofVec4f", "ofVec4f *|p_ofVec4f", 0, 0, (void*)&_ofVec4f_clientData, 0};
static swig_type_info _swigt__p_ofVideoGrabber = {"_p_ofVideoGrabber", "p_ofVideoGrabber|ofVideoGrabber *", 0, 0, (void*)&_ofVideoGrabber_clientData, 0};
static swig_type_info _swigt__p_ofVideoPlayer = {"_p_ofVideoPlayer", "ofVideoPlayer *|p_ofVideoPlayer", 0, 0, (void*)&_ofVideoPlayer_clientData, 0};
static swig_type_info _swigt__p_ostream = {"_p_ostream", "ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TESSindex_t = {"_p_std__vectorT_TESSindex_t", "std::vector< TESSindex > *|std::vector< ofIndexType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofColor_T_float_t_t = {"_p_std__vectorT_ofColor_T_float_t_t", "std::vector< ofColor_< float > > *|std::vector< ofFloatColor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofFile_t = {"_p_std__vectorT_ofFile_t", "std::vector< ofFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofPath_t = {"_p_std__vectorT_ofPath_t", "std::vector< ofTTFCharacter > *|std::vector< ofPath > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofPolyline_t = {"_p_std__vectorT_ofPolyline_t", "std::vector< ofPolyline > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofSubPath__Command_t = {"_p_std__vectorT_ofSubPath__Command_t", "std::vector< ofSubPath::Command > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofSubPath_t = {"_p_std__vectorT_ofSubPath_t", "std::vector< ofSubPath > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec2f_t = {"_p_std__vectorT_ofVec2f_t", "std::vector< ofVec2f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec3f_t = {"_p_std__vectorT_ofVec3f_t", "std::vector< ofVec3f > *|std::vector< ofPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_va_list = {"_p_va_list", "va_list *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GLenum,
  &_swigt__p_GLfloat,
  &_swigt__p_GLint,
  &_swigt__p_GLuint,
  &_swigt__p_Poco__FastMutex,
  &_swigt__p_Poco__File,
  &_swigt__p_TESSindex,
  &_swigt__p_char,
  &_swigt__p_charProps,
  &_swigt__p_double,
  &_swigt__p_filebuf,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_istream,
  &_swigt__p_ofAudioEventArgs,
  &_swigt__p_ofBaseApp,
  &_swigt__p_ofBaseHasTexture,
  &_swigt__p_ofBaseLoggerChannel,
  &_swigt__p_ofBuffer,
  &_swigt__p_ofCamera,
  &_swigt__p_ofColor_T_float_t,
  &_swigt__p_ofColor_T_unsigned_char_t,
  &_swigt__p_ofColor_T_unsigned_short_t,
  &_swigt__p_ofConsoleLoggerChannel,
  &_swigt__p_ofCoreEvents,
  &_swigt__p_ofDirectory,
  &_swigt__p_ofDragInfo,
  &_swigt__p_ofEasyCam,
  &_swigt__p_ofEntryEventArgs,
  &_swigt__p_ofEventArgs,
  &_swigt__p_ofEventT_ofAudioEventArgs_t,
  &_swigt__p_ofEventT_ofDragInfo_t,
  &_swigt__p_ofEventT_ofEntryEventArgs_t,
  &_swigt__p_ofEventT_ofEventArgs_t,
  &_swigt__p_ofEventT_ofKeyEventArgs_t,
  &_swigt__p_ofEventT_ofMessage_t,
  &_swigt__p_ofEventT_ofMouseEventArgs_t,
  &_swigt__p_ofEventT_ofResizeEventArgs_t,
  &_swigt__p_ofEventT_ofTouchEventArgs_t,
  &_swigt__p_ofFbo,
  &_swigt__p_ofFbo__Settings,
  &_swigt__p_ofFile,
  &_swigt__p_ofFileDialogResult,
  &_swigt__p_ofFileLoggerChannel,
  &_swigt__p_ofFilePath,
  &_swigt__p_ofImage_T_float_t,
  &_swigt__p_ofImage_T_unsigned_char_t,
  &_swigt__p_ofImage_T_unsigned_short_t,
  &_swigt__p_ofKeyEventArgs,
  &_swigt__p_ofLight,
  &_swigt__p_ofLog,
  &_swigt__p_ofLogError,
  &_swigt__p_ofLogFatalError,
  &_swigt__p_ofLogNotice,
  &_swigt__p_ofLogVerbose,
  &_swigt__p_ofLogWarning,
  &_swigt__p_ofMaterial,
  &_swigt__p_ofMatrix3x3,
  &_swigt__p_ofMatrix4x4,
  &_swigt__p_ofMesh,
  &_swigt__p_ofMessage,
  &_swigt__p_ofMouseEventArgs,
  &_swigt__p_ofNode,
  &_swigt__p_ofPath,
  &_swigt__p_ofPixels_T_float_t,
  &_swigt__p_ofPixels_T_unsigned_char_t,
  &_swigt__p_ofPixels_T_unsigned_short_t,
  &_swigt__p_ofPolyline,
  &_swigt__p_ofPtrT_ofBaseLoggerChannel_t,
  &_swigt__p_ofPtrT_ofBaseRenderer_t,
  &_swigt__p_ofPtrT_ofBaseSoundPlayer_t,
  &_swigt__p_ofPtrT_ofBaseVideoGrabber_t,
  &_swigt__p_ofPtrT_ofBaseVideoPlayer_t,
  &_swigt__p_ofPtrT_ofGLRenderer_t,
  &_swigt__p_ofQuaternion,
  &_swigt__p_ofRectangle,
  &_swigt__p_ofResizeEventArgs,
  &_swigt__p_ofSerialDeviceInfo,
  &_swigt__p_ofShader,
  &_swigt__p_ofSoundPlayer,
  &_swigt__p_ofStyle,
  &_swigt__p_ofSubPath,
  &_swigt__p_ofSubPath__Command,
  &_swigt__p_ofTessellator,
  &_swigt__p_ofTexture,
  &_swigt__p_ofTextureData,
  &_swigt__p_ofTouchEventArgs,
  &_swigt__p_ofTrueTypeFont,
  &_swigt__p_ofVbo,
  &_swigt__p_ofVboMesh,
  &_swigt__p_ofVec2f,
  &_swigt__p_ofVec3f,
  &_swigt__p_ofVec4f,
  &_swigt__p_ofVideoGrabber,
  &_swigt__p_ofVideoPlayer,
  &_swigt__p_ostream,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_TESSindex_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_ofColor_T_float_t_t,
  &_swigt__p_std__vectorT_ofFile_t,
  &_swigt__p_std__vectorT_ofPath_t,
  &_swigt__p_std__vectorT_ofPolyline_t,
  &_swigt__p_std__vectorT_ofSubPath__Command_t,
  &_swigt__p_std__vectorT_ofSubPath_t,
  &_swigt__p_std__vectorT_ofVec2f_t,
  &_swigt__p_std__vectorT_ofVec3f_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_uint64_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_va_list,
};

static swig_cast_info _swigc__p_GLenum[] = {  {&_swigt__p_GLenum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLfloat[] = {  {&_swigt__p_GLfloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLint[] = {  {&_swigt__p_GLint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLuint[] = {  {&_swigt__p_GLuint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Poco__FastMutex[] = {  {&_swigt__p_Poco__FastMutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Poco__File[] = {  {&_swigt__p_Poco__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TESSindex[] = {  {&_swigt__p_TESSindex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_charProps[] = {  {&_swigt__p_charProps, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_filebuf[] = {  {&_swigt__p_filebuf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_istream[] = {  {&_swigt__p_istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofAudioEventArgs[] = {  {&_swigt__p_ofAudioEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseApp[] = {  {&_swigt__p_ofBaseApp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseHasTexture[] = {  {&_swigt__p_ofBaseHasTexture, 0, 0, 0},  {&_swigt__p_ofFbo, _p_ofFboTo_p_ofBaseHasTexture, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseLoggerChannel[] = {  {&_swigt__p_ofBaseLoggerChannel, 0, 0, 0},  {&_swigt__p_ofConsoleLoggerChannel, _p_ofConsoleLoggerChannelTo_p_ofBaseLoggerChannel, 0, 0},  {&_swigt__p_ofFileLoggerChannel, _p_ofFileLoggerChannelTo_p_ofBaseLoggerChannel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBuffer[] = {  {&_swigt__p_ofBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofCamera[] = {  {&_swigt__p_ofEasyCam, _p_ofEasyCamTo_p_ofCamera, 0, 0},  {&_swigt__p_ofCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_float_t[] = {  {&_swigt__p_ofColor_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_unsigned_char_t[] = {  {&_swigt__p_ofColor_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_unsigned_short_t[] = {  {&_swigt__p_ofColor_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofConsoleLoggerChannel[] = {  {&_swigt__p_ofConsoleLoggerChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofCoreEvents[] = {  {&_swigt__p_ofCoreEvents, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofDirectory[] = {  {&_swigt__p_ofDirectory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofDragInfo[] = {  {&_swigt__p_ofDragInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEasyCam[] = {  {&_swigt__p_ofEasyCam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEntryEventArgs[] = {  {&_swigt__p_ofEntryEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventArgs[] = {  {&_swigt__p_ofEventArgs, 0, 0, 0},  {&_swigt__p_ofEntryEventArgs, _p_ofEntryEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofKeyEventArgs, _p_ofKeyEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofMouseEventArgs, _p_ofMouseEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofTouchEventArgs, _p_ofTouchEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofAudioEventArgs, _p_ofAudioEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofResizeEventArgs, _p_ofResizeEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofMessage, _p_ofMessageTo_p_ofEventArgs, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofAudioEventArgs_t[] = {  {&_swigt__p_ofEventT_ofAudioEventArgs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofDragInfo_t[] = {  {&_swigt__p_ofEventT_ofDragInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofEntryEventArgs_t[] = {  {&_swigt__p_ofEventT_ofEntryEventArgs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofEventArgs_t[] = {  {&_swigt__p_ofEventT_ofEventArgs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofKeyEventArgs_t[] = {  {&_swigt__p_ofEventT_ofKeyEventArgs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofMessage_t[] = {  {&_swigt__p_ofEventT_ofMessage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofMouseEventArgs_t[] = {  {&_swigt__p_ofEventT_ofMouseEventArgs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofResizeEventArgs_t[] = {  {&_swigt__p_ofEventT_ofResizeEventArgs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofTouchEventArgs_t[] = {  {&_swigt__p_ofEventT_ofTouchEventArgs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFbo[] = {  {&_swigt__p_ofFbo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFbo__Settings[] = {  {&_swigt__p_ofFbo__Settings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFile[] = {  {&_swigt__p_ofFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFileDialogResult[] = {  {&_swigt__p_ofFileDialogResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFileLoggerChannel[] = {  {&_swigt__p_ofFileLoggerChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFilePath[] = {  {&_swigt__p_ofFilePath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_float_t[] = {  {&_swigt__p_ofImage_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_unsigned_char_t[] = {  {&_swigt__p_ofImage_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_unsigned_short_t[] = {  {&_swigt__p_ofImage_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofKeyEventArgs[] = {  {&_swigt__p_ofKeyEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLight[] = {  {&_swigt__p_ofLight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLog[] = {  {&_swigt__p_ofLogError, _p_ofLogErrorTo_p_ofLog, 0, 0},  {&_swigt__p_ofLogNotice, _p_ofLogNoticeTo_p_ofLog, 0, 0},  {&_swigt__p_ofLogFatalError, _p_ofLogFatalErrorTo_p_ofLog, 0, 0},  {&_swigt__p_ofLogVerbose, _p_ofLogVerboseTo_p_ofLog, 0, 0},  {&_swigt__p_ofLog, 0, 0, 0},  {&_swigt__p_ofLogWarning, _p_ofLogWarningTo_p_ofLog, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogError[] = {  {&_swigt__p_ofLogError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogFatalError[] = {  {&_swigt__p_ofLogFatalError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogNotice[] = {  {&_swigt__p_ofLogNotice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogVerbose[] = {  {&_swigt__p_ofLogVerbose, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogWarning[] = {  {&_swigt__p_ofLogWarning, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMaterial[] = {  {&_swigt__p_ofMaterial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMatrix3x3[] = {  {&_swigt__p_ofMatrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMatrix4x4[] = {  {&_swigt__p_ofMatrix4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMesh[] = {  {&_swigt__p_ofMesh, 0, 0, 0},  {&_swigt__p_ofVboMesh, _p_ofVboMeshTo_p_ofMesh, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMessage[] = {  {&_swigt__p_ofMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMouseEventArgs[] = {  {&_swigt__p_ofMouseEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofNode[] = {  {&_swigt__p_ofNode, 0, 0, 0},  {&_swigt__p_ofEasyCam, _p_ofEasyCamTo_p_ofNode, 0, 0},  {&_swigt__p_ofLight, _p_ofLightTo_p_ofNode, 0, 0},  {&_swigt__p_ofCamera, _p_ofCameraTo_p_ofNode, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPath[] = {  {&_swigt__p_ofPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_float_t[] = {  {&_swigt__p_ofPixels_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_unsigned_char_t[] = {  {&_swigt__p_ofPixels_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_unsigned_short_t[] = {  {&_swigt__p_ofPixels_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPolyline[] = {  {&_swigt__p_ofPolyline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofBaseLoggerChannel_t[] = {  {&_swigt__p_ofPtrT_ofBaseLoggerChannel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofBaseRenderer_t[] = {  {&_swigt__p_ofPtrT_ofBaseRenderer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofBaseSoundPlayer_t[] = {  {&_swigt__p_ofPtrT_ofBaseSoundPlayer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofBaseVideoGrabber_t[] = {  {&_swigt__p_ofPtrT_ofBaseVideoGrabber_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofBaseVideoPlayer_t[] = {  {&_swigt__p_ofPtrT_ofBaseVideoPlayer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofGLRenderer_t[] = {  {&_swigt__p_ofPtrT_ofGLRenderer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofQuaternion[] = {  {&_swigt__p_ofQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofRectangle[] = {  {&_swigt__p_ofRectangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofResizeEventArgs[] = {  {&_swigt__p_ofResizeEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSerialDeviceInfo[] = {  {&_swigt__p_ofSerialDeviceInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofShader[] = {  {&_swigt__p_ofShader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSoundPlayer[] = {  {&_swigt__p_ofSoundPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofStyle[] = {  {&_swigt__p_ofStyle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSubPath[] = {  {&_swigt__p_ofSubPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSubPath__Command[] = {  {&_swigt__p_ofSubPath__Command, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTessellator[] = {  {&_swigt__p_ofTessellator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTexture[] = {  {&_swigt__p_ofTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTextureData[] = {  {&_swigt__p_ofTextureData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTouchEventArgs[] = {  {&_swigt__p_ofTouchEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTrueTypeFont[] = {  {&_swigt__p_ofTrueTypeFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVbo[] = {  {&_swigt__p_ofVbo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVboMesh[] = {  {&_swigt__p_ofVboMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec2f[] = {  {&_swigt__p_ofVec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec3f[] = {  {&_swigt__p_ofVec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec4f[] = {  {&_swigt__p_ofVec4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVideoGrabber[] = {  {&_swigt__p_ofVideoGrabber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVideoPlayer[] = {  {&_swigt__p_ofVideoPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ostream[] = {  {&_swigt__p_ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TESSindex_t[] = {  {&_swigt__p_std__vectorT_TESSindex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofColor_T_float_t_t[] = {  {&_swigt__p_std__vectorT_ofColor_T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofFile_t[] = {  {&_swigt__p_std__vectorT_ofFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofPath_t[] = {  {&_swigt__p_std__vectorT_ofPath_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofPolyline_t[] = {  {&_swigt__p_std__vectorT_ofPolyline_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofSubPath__Command_t[] = {  {&_swigt__p_std__vectorT_ofSubPath__Command_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofSubPath_t[] = {  {&_swigt__p_std__vectorT_ofSubPath_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec2f_t[] = {  {&_swigt__p_std__vectorT_ofVec2f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec3f_t[] = {  {&_swigt__p_std__vectorT_ofVec3f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_va_list[] = {  {&_swigt__p_va_list, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GLenum,
  _swigc__p_GLfloat,
  _swigc__p_GLint,
  _swigc__p_GLuint,
  _swigc__p_Poco__FastMutex,
  _swigc__p_Poco__File,
  _swigc__p_TESSindex,
  _swigc__p_char,
  _swigc__p_charProps,
  _swigc__p_double,
  _swigc__p_filebuf,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_istream,
  _swigc__p_ofAudioEventArgs,
  _swigc__p_ofBaseApp,
  _swigc__p_ofBaseHasTexture,
  _swigc__p_ofBaseLoggerChannel,
  _swigc__p_ofBuffer,
  _swigc__p_ofCamera,
  _swigc__p_ofColor_T_float_t,
  _swigc__p_ofColor_T_unsigned_char_t,
  _swigc__p_ofColor_T_unsigned_short_t,
  _swigc__p_ofConsoleLoggerChannel,
  _swigc__p_ofCoreEvents,
  _swigc__p_ofDirectory,
  _swigc__p_ofDragInfo,
  _swigc__p_ofEasyCam,
  _swigc__p_ofEntryEventArgs,
  _swigc__p_ofEventArgs,
  _swigc__p_ofEventT_ofAudioEventArgs_t,
  _swigc__p_ofEventT_ofDragInfo_t,
  _swigc__p_ofEventT_ofEntryEventArgs_t,
  _swigc__p_ofEventT_ofEventArgs_t,
  _swigc__p_ofEventT_ofKeyEventArgs_t,
  _swigc__p_ofEventT_ofMessage_t,
  _swigc__p_ofEventT_ofMouseEventArgs_t,
  _swigc__p_ofEventT_ofResizeEventArgs_t,
  _swigc__p_ofEventT_ofTouchEventArgs_t,
  _swigc__p_ofFbo,
  _swigc__p_ofFbo__Settings,
  _swigc__p_ofFile,
  _swigc__p_ofFileDialogResult,
  _swigc__p_ofFileLoggerChannel,
  _swigc__p_ofFilePath,
  _swigc__p_ofImage_T_float_t,
  _swigc__p_ofImage_T_unsigned_char_t,
  _swigc__p_ofImage_T_unsigned_short_t,
  _swigc__p_ofKeyEventArgs,
  _swigc__p_ofLight,
  _swigc__p_ofLog,
  _swigc__p_ofLogError,
  _swigc__p_ofLogFatalError,
  _swigc__p_ofLogNotice,
  _swigc__p_ofLogVerbose,
  _swigc__p_ofLogWarning,
  _swigc__p_ofMaterial,
  _swigc__p_ofMatrix3x3,
  _swigc__p_ofMatrix4x4,
  _swigc__p_ofMesh,
  _swigc__p_ofMessage,
  _swigc__p_ofMouseEventArgs,
  _swigc__p_ofNode,
  _swigc__p_ofPath,
  _swigc__p_ofPixels_T_float_t,
  _swigc__p_ofPixels_T_unsigned_char_t,
  _swigc__p_ofPixels_T_unsigned_short_t,
  _swigc__p_ofPolyline,
  _swigc__p_ofPtrT_ofBaseLoggerChannel_t,
  _swigc__p_ofPtrT_ofBaseRenderer_t,
  _swigc__p_ofPtrT_ofBaseSoundPlayer_t,
  _swigc__p_ofPtrT_ofBaseVideoGrabber_t,
  _swigc__p_ofPtrT_ofBaseVideoPlayer_t,
  _swigc__p_ofPtrT_ofGLRenderer_t,
  _swigc__p_ofQuaternion,
  _swigc__p_ofRectangle,
  _swigc__p_ofResizeEventArgs,
  _swigc__p_ofSerialDeviceInfo,
  _swigc__p_ofShader,
  _swigc__p_ofSoundPlayer,
  _swigc__p_ofStyle,
  _swigc__p_ofSubPath,
  _swigc__p_ofSubPath__Command,
  _swigc__p_ofTessellator,
  _swigc__p_ofTexture,
  _swigc__p_ofTextureData,
  _swigc__p_ofTouchEventArgs,
  _swigc__p_ofTrueTypeFont,
  _swigc__p_ofVbo,
  _swigc__p_ofVboMesh,
  _swigc__p_ofVec2f,
  _swigc__p_ofVec3f,
  _swigc__p_ofVec4f,
  _swigc__p_ofVideoGrabber,
  _swigc__p_ofVideoPlayer,
  _swigc__p_ostream,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_TESSindex_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_ofColor_T_float_t_t,
  _swigc__p_std__vectorT_ofFile_t,
  _swigc__p_std__vectorT_ofPath_t,
  _swigc__p_std__vectorT_ofPolyline_t,
  _swigc__p_std__vectorT_ofSubPath__Command_t,
  _swigc__p_std__vectorT_ofSubPath_t,
  _swigc__p_std__vectorT_ofVec2f_t,
  _swigc__p_std__vectorT_ofVec3f_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_uint64_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_va_list,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_std__vectorT_ofPath_t(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_std__vectorT_ofPath_t(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (std::vector< ofPath > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_std__vectorT_std__string_t(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_std__vectorT_std__string_t(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (std::vector< std::string > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofPtr< ofBaseSoundPlayer > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofPtr< ofBaseVideoGrabber > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofPtr< ofBaseVideoPlayer > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_ofPtrT_ofGLRenderer_t(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_ofPtrT_ofGLRenderer_t(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (ofPtr< ofGLRenderer > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_uint64_t(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_uint64_t(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (uint64_t *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_TESSindex(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_TESSindex(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (TESSindex *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_GLuint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_GLuint(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (GLuint *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_GLint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_GLint(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (GLint *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}
#ifdef BUILDING_NODE_EXTENSION
void delete__SWIGTYPE_p_std__vectorT_ofFile_t(v8::Persistent< v8::Value > object, void *parameter) 
#else
void delete__SWIGTYPE_p_std__vectorT_ofFile_t(v8::Isolate *isolate, v8::Persistent< v8::Value > object, void *parameter) 
#endif
{
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (std::vector< ofFile > *) proxy->swigCObject;
  }
  delete proxy;
  
  object.Clear();
  
#ifdef BUILDING_NODE_EXTENSION
  object.Dispose();
#else
  object.Dispose(isolate);
#endif
}




SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = v8::Context::GetCurrent()->Global();
  v8::Local<v8::External> mod = v8::External::New(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(v8::String::New("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = v8::Context::GetCurrent()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(v8::String::New("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);
 
  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/************  BEGIN: "swiginit.swg" *******************/ 
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/************  END:   "swiginit.swg" *******************/ 

extern "C" {
  void of_initialize(v8::Handle<v8::Object> global_obj)
  {
    SWIG_InitializeModule(static_cast<void *>(&global_obj));
    
    v8::HandleScope scope;
    
    // a class template for creating proxies of undefined types
    SWIGV8_SWIGTYPE_Proxy_class_templ = SWIGV8_CreateClassTemplate("SwigProxy");
    
    /* create objects for namespaces */
    v8::Handle<v8::Object> of_obj = global_obj;
    
    
    /* create class templates */
    v8::Handle<v8::FunctionTemplate> _ofBuffer_class = SWIGV8_CreateClassTemplate("_ofBuffer");
    _ofBuffer_clientData.class_templ = _ofBuffer_class;
    _ofBuffer_clientData.dtor = _wrap_delete_ofBuffer;  
    SWIGTYPE_p_ofBuffer->clientdata = &_ofBuffer_clientData;
    v8::Handle<v8::FunctionTemplate> _ofFilePath_class = SWIGV8_CreateClassTemplate("_ofFilePath");
    _ofFilePath_clientData.class_templ = _ofFilePath_class;
    _ofFilePath_clientData.dtor = _wrap_delete_ofFilePath;  
    SWIGTYPE_p_ofFilePath->clientdata = &_ofFilePath_clientData;
    v8::Handle<v8::FunctionTemplate> _ofFile_class = SWIGV8_CreateClassTemplate("_ofFile");
    _ofFile_clientData.class_templ = _ofFile_class;
    _ofFile_clientData.dtor = _wrap_delete_ofFile;  
    SWIGTYPE_p_ofFile->clientdata = &_ofFile_clientData;
    v8::Handle<v8::FunctionTemplate> _ofDirectory_class = SWIGV8_CreateClassTemplate("_ofDirectory");
    _ofDirectory_clientData.class_templ = _ofDirectory_class;
    _ofDirectory_clientData.dtor = _wrap_delete_ofDirectory;  
    SWIGTYPE_p_ofDirectory->clientdata = &_ofDirectory_clientData;
    v8::Handle<v8::FunctionTemplate> _ofRectangle_class = SWIGV8_CreateClassTemplate("_ofRectangle");
    _ofRectangle_clientData.class_templ = _ofRectangle_class;
    _ofRectangle_clientData.dtor = _wrap_delete_ofRectangle;  
    SWIGTYPE_p_ofRectangle->clientdata = &_ofRectangle_clientData;
    v8::Handle<v8::FunctionTemplate> _ofSerialDeviceInfo_class = SWIGV8_CreateClassTemplate("_ofSerialDeviceInfo");
    _ofSerialDeviceInfo_clientData.class_templ = _ofSerialDeviceInfo_class;
    _ofSerialDeviceInfo_clientData.dtor = _wrap_delete_ofSerialDeviceInfo;  
    SWIGTYPE_p_ofSerialDeviceInfo->clientdata = &_ofSerialDeviceInfo_clientData;
    v8::Handle<v8::FunctionTemplate> _ofStyle_class = SWIGV8_CreateClassTemplate("_ofStyle");
    _ofStyle_clientData.class_templ = _ofStyle_class;
    _ofStyle_clientData.dtor = _wrap_delete_ofStyle;  
    SWIGTYPE_p_ofStyle->clientdata = &_ofStyle_clientData;
    v8::Handle<v8::FunctionTemplate> _ofColor_T_unsigned_char_t_class = SWIGV8_CreateClassTemplate("_ofColor_T_unsigned_char_t");
    _ofColor_T_unsigned_char_t_clientData.class_templ = _ofColor_T_unsigned_char_t_class;
    _ofColor_T_unsigned_char_t_clientData.dtor = _wrap_delete_ofColor;  
    SWIGTYPE_p_ofColor_T_unsigned_char_t->clientdata = &_ofColor_T_unsigned_char_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ofColor_T_float_t_class = SWIGV8_CreateClassTemplate("_ofColor_T_float_t");
    _ofColor_T_float_t_clientData.class_templ = _ofColor_T_float_t_class;
    _ofColor_T_float_t_clientData.dtor = _wrap_delete_ofFloatColor;  
    SWIGTYPE_p_ofColor_T_float_t->clientdata = &_ofColor_T_float_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ofColor_T_unsigned_short_t_class = SWIGV8_CreateClassTemplate("_ofColor_T_unsigned_short_t");
    _ofColor_T_unsigned_short_t_clientData.class_templ = _ofColor_T_unsigned_short_t_class;
    _ofColor_T_unsigned_short_t_clientData.dtor = _wrap_delete_ofShortColor;  
    SWIGTYPE_p_ofColor_T_unsigned_short_t->clientdata = &_ofColor_T_unsigned_short_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ofImage_T_unsigned_char_t_class = SWIGV8_CreateClassTemplate("_ofImage_T_unsigned_char_t");
    _ofImage_T_unsigned_char_t_clientData.class_templ = _ofImage_T_unsigned_char_t_class;
    _ofImage_T_unsigned_char_t_clientData.dtor = _wrap_delete_ofImage;  
    SWIGTYPE_p_ofImage_T_unsigned_char_t->clientdata = &_ofImage_T_unsigned_char_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ofImage_T_float_t_class = SWIGV8_CreateClassTemplate("_ofImage_T_float_t");
    _ofImage_T_float_t_clientData.class_templ = _ofImage_T_float_t_class;
    _ofImage_T_float_t_clientData.dtor = _wrap_delete_ofFloatImage;  
    SWIGTYPE_p_ofImage_T_float_t->clientdata = &_ofImage_T_float_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ofImage_T_unsigned_short_t_class = SWIGV8_CreateClassTemplate("_ofImage_T_unsigned_short_t");
    _ofImage_T_unsigned_short_t_clientData.class_templ = _ofImage_T_unsigned_short_t_class;
    _ofImage_T_unsigned_short_t_clientData.dtor = _wrap_delete_ofShortImage;  
    SWIGTYPE_p_ofImage_T_unsigned_short_t->clientdata = &_ofImage_T_unsigned_short_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ofPixels_T_unsigned_char_t_class = SWIGV8_CreateClassTemplate("_ofPixels_T_unsigned_char_t");
    _ofPixels_T_unsigned_char_t_clientData.class_templ = _ofPixels_T_unsigned_char_t_class;
    _ofPixels_T_unsigned_char_t_clientData.dtor = _wrap_delete_ofPixels;  
    SWIGTYPE_p_ofPixels_T_unsigned_char_t->clientdata = &_ofPixels_T_unsigned_char_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ofPixels_T_float_t_class = SWIGV8_CreateClassTemplate("_ofPixels_T_float_t");
    _ofPixels_T_float_t_clientData.class_templ = _ofPixels_T_float_t_class;
    _ofPixels_T_float_t_clientData.dtor = _wrap_delete_ofFloatPixels;  
    SWIGTYPE_p_ofPixels_T_float_t->clientdata = &_ofPixels_T_float_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ofPixels_T_unsigned_short_t_class = SWIGV8_CreateClassTemplate("_ofPixels_T_unsigned_short_t");
    _ofPixels_T_unsigned_short_t_clientData.class_templ = _ofPixels_T_unsigned_short_t_class;
    _ofPixels_T_unsigned_short_t_clientData.dtor = _wrap_delete_ofShortPixels;  
    SWIGTYPE_p_ofPixels_T_unsigned_short_t->clientdata = &_ofPixels_T_unsigned_short_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ofDragInfo_class = SWIGV8_CreateClassTemplate("_ofDragInfo");
    _ofDragInfo_clientData.class_templ = _ofDragInfo_class;
    _ofDragInfo_clientData.dtor = _wrap_delete_ofDragInfo;  
    SWIGTYPE_p_ofDragInfo->clientdata = &_ofDragInfo_clientData;
    v8::Handle<v8::FunctionTemplate> _ofEventArgs_class = SWIGV8_CreateClassTemplate("_ofEventArgs");
    _ofEventArgs_clientData.class_templ = _ofEventArgs_class;
    _ofEventArgs_clientData.dtor = _wrap_delete_ofEventArgs;  
    SWIGTYPE_p_ofEventArgs->clientdata = &_ofEventArgs_clientData;
    v8::Handle<v8::FunctionTemplate> _ofEntryEventArgs_class = SWIGV8_CreateClassTemplate("_ofEntryEventArgs");
    _ofEntryEventArgs_clientData.class_templ = _ofEntryEventArgs_class;
    _ofEntryEventArgs_clientData.dtor = _wrap_delete_ofEntryEventArgs;  
    SWIGTYPE_p_ofEntryEventArgs->clientdata = &_ofEntryEventArgs_clientData;
    v8::Handle<v8::FunctionTemplate> _ofKeyEventArgs_class = SWIGV8_CreateClassTemplate("_ofKeyEventArgs");
    _ofKeyEventArgs_clientData.class_templ = _ofKeyEventArgs_class;
    _ofKeyEventArgs_clientData.dtor = _wrap_delete_ofKeyEventArgs;  
    SWIGTYPE_p_ofKeyEventArgs->clientdata = &_ofKeyEventArgs_clientData;
    v8::Handle<v8::FunctionTemplate> _ofMouseEventArgs_class = SWIGV8_CreateClassTemplate("_ofMouseEventArgs");
    _ofMouseEventArgs_clientData.class_templ = _ofMouseEventArgs_class;
    _ofMouseEventArgs_clientData.dtor = _wrap_delete_ofMouseEventArgs;  
    SWIGTYPE_p_ofMouseEventArgs->clientdata = &_ofMouseEventArgs_clientData;
    v8::Handle<v8::FunctionTemplate> _ofTouchEventArgs_class = SWIGV8_CreateClassTemplate("_ofTouchEventArgs");
    _ofTouchEventArgs_clientData.class_templ = _ofTouchEventArgs_class;
    _ofTouchEventArgs_clientData.dtor = _wrap_delete_ofTouchEventArgs;  
    SWIGTYPE_p_ofTouchEventArgs->clientdata = &_ofTouchEventArgs_clientData;
    v8::Handle<v8::FunctionTemplate> _ofAudioEventArgs_class = SWIGV8_CreateClassTemplate("_ofAudioEventArgs");
    _ofAudioEventArgs_clientData.class_templ = _ofAudioEventArgs_class;
    _ofAudioEventArgs_clientData.dtor = _wrap_delete_ofAudioEventArgs;  
    SWIGTYPE_p_ofAudioEventArgs->clientdata = &_ofAudioEventArgs_clientData;
    v8::Handle<v8::FunctionTemplate> _ofResizeEventArgs_class = SWIGV8_CreateClassTemplate("_ofResizeEventArgs");
    _ofResizeEventArgs_clientData.class_templ = _ofResizeEventArgs_class;
    _ofResizeEventArgs_clientData.dtor = _wrap_delete_ofResizeEventArgs;  
    SWIGTYPE_p_ofResizeEventArgs->clientdata = &_ofResizeEventArgs_clientData;
    v8::Handle<v8::FunctionTemplate> _ofMessage_class = SWIGV8_CreateClassTemplate("_ofMessage");
    _ofMessage_clientData.class_templ = _ofMessage_class;
    _ofMessage_clientData.dtor = _wrap_delete_ofMessage;  
    SWIGTYPE_p_ofMessage->clientdata = &_ofMessage_clientData;
    v8::Handle<v8::FunctionTemplate> _ofCoreEvents_class = SWIGV8_CreateClassTemplate("_ofCoreEvents");
    _ofCoreEvents_clientData.class_templ = _ofCoreEvents_class;
    _ofCoreEvents_clientData.dtor = _wrap_delete_ofCoreEvents;  
    SWIGTYPE_p_ofCoreEvents->clientdata = &_ofCoreEvents_clientData;
    v8::Handle<v8::FunctionTemplate> _ofNode_class = SWIGV8_CreateClassTemplate("_ofNode");
    _ofNode_clientData.class_templ = _ofNode_class;
    _ofNode_clientData.dtor = _wrap_delete_ofNode;  
    SWIGTYPE_p_ofNode->clientdata = &_ofNode_clientData;
    v8::Handle<v8::FunctionTemplate> _ofCamera_class = SWIGV8_CreateClassTemplate("_ofCamera");
    _ofCamera_clientData.class_templ = _ofCamera_class;
    _ofCamera_clientData.dtor = _wrap_delete_ofCamera;  
    SWIGTYPE_p_ofCamera->clientdata = &_ofCamera_clientData;
    v8::Handle<v8::FunctionTemplate> _ofEasyCam_class = SWIGV8_CreateClassTemplate("_ofEasyCam");
    _ofEasyCam_clientData.class_templ = _ofEasyCam_class;
    _ofEasyCam_clientData.dtor = _wrap_delete_ofEasyCam;  
    SWIGTYPE_p_ofEasyCam->clientdata = &_ofEasyCam_clientData;
    v8::Handle<v8::FunctionTemplate> _ofMesh_class = SWIGV8_CreateClassTemplate("_ofMesh");
    _ofMesh_clientData.class_templ = _ofMesh_class;
    _ofMesh_clientData.dtor = _wrap_delete_ofMesh;  
    SWIGTYPE_p_ofMesh->clientdata = &_ofMesh_clientData;
    v8::Handle<v8::FunctionTemplate> _ofFbo_class = SWIGV8_CreateClassTemplate("_ofFbo");
    _ofFbo_clientData.class_templ = _ofFbo_class;
    _ofFbo_clientData.dtor = _wrap_delete_ofFbo;  
    SWIGTYPE_p_ofFbo->clientdata = &_ofFbo_clientData;
    v8::Handle<v8::FunctionTemplate> _ofLight_class = SWIGV8_CreateClassTemplate("_ofLight");
    _ofLight_clientData.class_templ = _ofLight_class;
    _ofLight_clientData.dtor = _wrap_delete_ofLight;  
    SWIGTYPE_p_ofLight->clientdata = &_ofLight_clientData;
    v8::Handle<v8::FunctionTemplate> _ofMaterial_class = SWIGV8_CreateClassTemplate("_ofMaterial");
    _ofMaterial_clientData.class_templ = _ofMaterial_class;
    _ofMaterial_clientData.dtor = _wrap_delete_ofMaterial;  
    SWIGTYPE_p_ofMaterial->clientdata = &_ofMaterial_clientData;
    v8::Handle<v8::FunctionTemplate> _ofShader_class = SWIGV8_CreateClassTemplate("_ofShader");
    _ofShader_clientData.class_templ = _ofShader_class;
    _ofShader_clientData.dtor = _wrap_delete_ofShader;  
    SWIGTYPE_p_ofShader->clientdata = &_ofShader_clientData;
    v8::Handle<v8::FunctionTemplate> _ofTextureData_class = SWIGV8_CreateClassTemplate("_ofTextureData");
    _ofTextureData_clientData.class_templ = _ofTextureData_class;
    _ofTextureData_clientData.dtor = _wrap_delete_ofTextureData;  
    SWIGTYPE_p_ofTextureData->clientdata = &_ofTextureData_clientData;
    v8::Handle<v8::FunctionTemplate> _ofTexture_class = SWIGV8_CreateClassTemplate("_ofTexture");
    _ofTexture_clientData.class_templ = _ofTexture_class;
    _ofTexture_clientData.dtor = _wrap_delete_ofTexture;  
    SWIGTYPE_p_ofTexture->clientdata = &_ofTexture_clientData;
    v8::Handle<v8::FunctionTemplate> _ofVbo_class = SWIGV8_CreateClassTemplate("_ofVbo");
    _ofVbo_clientData.class_templ = _ofVbo_class;
    _ofVbo_clientData.dtor = _wrap_delete_ofVbo;  
    SWIGTYPE_p_ofVbo->clientdata = &_ofVbo_clientData;
    v8::Handle<v8::FunctionTemplate> _ofVboMesh_class = SWIGV8_CreateClassTemplate("_ofVboMesh");
    _ofVboMesh_clientData.class_templ = _ofVboMesh_class;
    _ofVboMesh_clientData.dtor = _wrap_delete_ofVboMesh;  
    SWIGTYPE_p_ofVboMesh->clientdata = &_ofVboMesh_clientData;
    v8::Handle<v8::FunctionTemplate> _ofPath_class = SWIGV8_CreateClassTemplate("_ofPath");
    _ofPath_clientData.class_templ = _ofPath_class;
    _ofPath_clientData.dtor = _wrap_delete_ofPath;  
    SWIGTYPE_p_ofPath->clientdata = &_ofPath_clientData;
    v8::Handle<v8::FunctionTemplate> _ofSubPath_class = SWIGV8_CreateClassTemplate("_ofSubPath");
    _ofSubPath_clientData.class_templ = _ofSubPath_class;
    _ofSubPath_clientData.dtor = _wrap_delete_ofSubPath;  
    SWIGTYPE_p_ofSubPath->clientdata = &_ofSubPath_clientData;
    v8::Handle<v8::FunctionTemplate> _ofPolyline_class = SWIGV8_CreateClassTemplate("_ofPolyline");
    _ofPolyline_clientData.class_templ = _ofPolyline_class;
    _ofPolyline_clientData.dtor = _wrap_delete_ofPolyline;  
    SWIGTYPE_p_ofPolyline->clientdata = &_ofPolyline_clientData;
    v8::Handle<v8::FunctionTemplate> _ofTessellator_class = SWIGV8_CreateClassTemplate("_ofTessellator");
    _ofTessellator_clientData.class_templ = _ofTessellator_class;
    _ofTessellator_clientData.dtor = _wrap_delete_ofTessellator;  
    SWIGTYPE_p_ofTessellator->clientdata = &_ofTessellator_clientData;
    v8::Handle<v8::FunctionTemplate> _charProps_class = SWIGV8_CreateClassTemplate("_charProps");
    _charProps_clientData.class_templ = _charProps_class;
    _charProps_clientData.dtor = _wrap_delete_charProps;  
    SWIGTYPE_p_charProps->clientdata = &_charProps_clientData;
    v8::Handle<v8::FunctionTemplate> _ofTrueTypeFont_class = SWIGV8_CreateClassTemplate("_ofTrueTypeFont");
    _ofTrueTypeFont_clientData.class_templ = _ofTrueTypeFont_class;
    _ofTrueTypeFont_clientData.dtor = _wrap_delete_ofTrueTypeFont;  
    SWIGTYPE_p_ofTrueTypeFont->clientdata = &_ofTrueTypeFont_clientData;
    v8::Handle<v8::FunctionTemplate> _ofMatrix3x3_class = SWIGV8_CreateClassTemplate("_ofMatrix3x3");
    _ofMatrix3x3_clientData.class_templ = _ofMatrix3x3_class;
    _ofMatrix3x3_clientData.dtor = _wrap_delete_ofMatrix3x3;  
    SWIGTYPE_p_ofMatrix3x3->clientdata = &_ofMatrix3x3_clientData;
    v8::Handle<v8::FunctionTemplate> _ofMatrix4x4_class = SWIGV8_CreateClassTemplate("_ofMatrix4x4");
    _ofMatrix4x4_clientData.class_templ = _ofMatrix4x4_class;
    _ofMatrix4x4_clientData.dtor = _wrap_delete_ofMatrix4x4;  
    SWIGTYPE_p_ofMatrix4x4->clientdata = &_ofMatrix4x4_clientData;
    v8::Handle<v8::FunctionTemplate> _ofQuaternion_class = SWIGV8_CreateClassTemplate("_ofQuaternion");
    _ofQuaternion_clientData.class_templ = _ofQuaternion_class;
    _ofQuaternion_clientData.dtor = _wrap_delete_ofQuaternion;  
    SWIGTYPE_p_ofQuaternion->clientdata = &_ofQuaternion_clientData;
    v8::Handle<v8::FunctionTemplate> _ofVec2f_class = SWIGV8_CreateClassTemplate("_ofVec2f");
    _ofVec2f_clientData.class_templ = _ofVec2f_class;
    _ofVec2f_clientData.dtor = _wrap_delete_ofVec2f;  
    SWIGTYPE_p_ofVec2f->clientdata = &_ofVec2f_clientData;
    v8::Handle<v8::FunctionTemplate> _ofVec3f_class = SWIGV8_CreateClassTemplate("_ofVec3f");
    _ofVec3f_clientData.class_templ = _ofVec3f_class;
    _ofVec3f_clientData.dtor = _wrap_delete_ofVec3f;  
    SWIGTYPE_p_ofVec3f->clientdata = &_ofVec3f_clientData;
    v8::Handle<v8::FunctionTemplate> _ofVec4f_class = SWIGV8_CreateClassTemplate("_ofVec4f");
    _ofVec4f_clientData.class_templ = _ofVec4f_class;
    _ofVec4f_clientData.dtor = _wrap_delete_ofVec4f;  
    SWIGTYPE_p_ofVec4f->clientdata = &_ofVec4f_clientData;
    v8::Handle<v8::FunctionTemplate> _ofSoundPlayer_class = SWIGV8_CreateClassTemplate("_ofSoundPlayer");
    _ofSoundPlayer_clientData.class_templ = _ofSoundPlayer_class;
    _ofSoundPlayer_clientData.dtor = _wrap_delete_ofSoundPlayer;  
    SWIGTYPE_p_ofSoundPlayer->clientdata = &_ofSoundPlayer_clientData;
    v8::Handle<v8::FunctionTemplate> _ofLog_class = SWIGV8_CreateClassTemplate("_ofLog");
    _ofLog_clientData.class_templ = _ofLog_class;
    _ofLog_clientData.dtor = _wrap_delete_ofLog;  
    SWIGTYPE_p_ofLog->clientdata = &_ofLog_clientData;
    v8::Handle<v8::FunctionTemplate> _ofLogVerbose_class = SWIGV8_CreateClassTemplate("_ofLogVerbose");
    _ofLogVerbose_clientData.class_templ = _ofLogVerbose_class;
    _ofLogVerbose_clientData.dtor = _wrap_delete_ofLogVerbose;  
    SWIGTYPE_p_ofLogVerbose->clientdata = &_ofLogVerbose_clientData;
    v8::Handle<v8::FunctionTemplate> _ofLogNotice_class = SWIGV8_CreateClassTemplate("_ofLogNotice");
    _ofLogNotice_clientData.class_templ = _ofLogNotice_class;
    _ofLogNotice_clientData.dtor = _wrap_delete_ofLogNotice;  
    SWIGTYPE_p_ofLogNotice->clientdata = &_ofLogNotice_clientData;
    v8::Handle<v8::FunctionTemplate> _ofLogWarning_class = SWIGV8_CreateClassTemplate("_ofLogWarning");
    _ofLogWarning_clientData.class_templ = _ofLogWarning_class;
    _ofLogWarning_clientData.dtor = _wrap_delete_ofLogWarning;  
    SWIGTYPE_p_ofLogWarning->clientdata = &_ofLogWarning_clientData;
    v8::Handle<v8::FunctionTemplate> _ofLogError_class = SWIGV8_CreateClassTemplate("_ofLogError");
    _ofLogError_clientData.class_templ = _ofLogError_class;
    _ofLogError_clientData.dtor = _wrap_delete_ofLogError;  
    SWIGTYPE_p_ofLogError->clientdata = &_ofLogError_clientData;
    v8::Handle<v8::FunctionTemplate> _ofLogFatalError_class = SWIGV8_CreateClassTemplate("_ofLogFatalError");
    _ofLogFatalError_clientData.class_templ = _ofLogFatalError_class;
    _ofLogFatalError_clientData.dtor = _wrap_delete_ofLogFatalError;  
    SWIGTYPE_p_ofLogFatalError->clientdata = &_ofLogFatalError_clientData;
    v8::Handle<v8::FunctionTemplate> _ofBaseLoggerChannel_class = SWIGV8_CreateClassTemplate("_ofBaseLoggerChannel");
    _ofBaseLoggerChannel_clientData.class_templ = _ofBaseLoggerChannel_class;
    _ofBaseLoggerChannel_clientData.dtor = _wrap_delete_ofBaseLoggerChannel;  
    SWIGTYPE_p_ofBaseLoggerChannel->clientdata = &_ofBaseLoggerChannel_clientData;
    v8::Handle<v8::FunctionTemplate> _ofConsoleLoggerChannel_class = SWIGV8_CreateClassTemplate("_ofConsoleLoggerChannel");
    _ofConsoleLoggerChannel_clientData.class_templ = _ofConsoleLoggerChannel_class;
    _ofConsoleLoggerChannel_clientData.dtor = _wrap_delete_ofConsoleLoggerChannel;  
    SWIGTYPE_p_ofConsoleLoggerChannel->clientdata = &_ofConsoleLoggerChannel_clientData;
    v8::Handle<v8::FunctionTemplate> _ofFileLoggerChannel_class = SWIGV8_CreateClassTemplate("_ofFileLoggerChannel");
    _ofFileLoggerChannel_clientData.class_templ = _ofFileLoggerChannel_class;
    _ofFileLoggerChannel_clientData.dtor = _wrap_delete_ofFileLoggerChannel;  
    SWIGTYPE_p_ofFileLoggerChannel->clientdata = &_ofFileLoggerChannel_clientData;
    v8::Handle<v8::FunctionTemplate> _ofFileDialogResult_class = SWIGV8_CreateClassTemplate("_ofFileDialogResult");
    _ofFileDialogResult_clientData.class_templ = _ofFileDialogResult_class;
    _ofFileDialogResult_clientData.dtor = _wrap_delete_ofFileDialogResult;  
    SWIGTYPE_p_ofFileDialogResult->clientdata = &_ofFileDialogResult_clientData;
    v8::Handle<v8::FunctionTemplate> _ofVideoGrabber_class = SWIGV8_CreateClassTemplate("_ofVideoGrabber");
    _ofVideoGrabber_clientData.class_templ = _ofVideoGrabber_class;
    _ofVideoGrabber_clientData.dtor = _wrap_delete_ofVideoGrabber;  
    SWIGTYPE_p_ofVideoGrabber->clientdata = &_ofVideoGrabber_clientData;
    v8::Handle<v8::FunctionTemplate> _ofVideoPlayer_class = SWIGV8_CreateClassTemplate("_ofVideoPlayer");
    _ofVideoPlayer_clientData.class_templ = _ofVideoPlayer_class;
    _ofVideoPlayer_clientData.dtor = _wrap_delete_ofVideoPlayer;  
    SWIGTYPE_p_ofVideoPlayer->clientdata = &_ofVideoPlayer_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_std__vectorT_ofPath_t_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_std__vectorT_ofPath_t");
    SWIGTYPE_p_std__vectorT_ofPath_t_clientData.class_templ = SWIGTYPE_p_std__vectorT_ofPath_t_class;
    SWIGTYPE_p_std__vectorT_ofPath_t_clientData.dtor = delete__SWIGTYPE_p_std__vectorT_ofPath_t;  
    SWIGTYPE_p_std__vectorT_ofPath_t->clientdata = &SWIGTYPE_p_std__vectorT_ofPath_t_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_std__vectorT_std__string_t_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_std__vectorT_std__string_t");
    SWIGTYPE_p_std__vectorT_std__string_t_clientData.class_templ = SWIGTYPE_p_std__vectorT_std__string_t_class;
    SWIGTYPE_p_std__vectorT_std__string_t_clientData.dtor = delete__SWIGTYPE_p_std__vectorT_std__string_t;  
    SWIGTYPE_p_std__vectorT_std__string_t->clientdata = &SWIGTYPE_p_std__vectorT_std__string_t_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t");
    SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t_clientData.class_templ = SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t_class;
    SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t_clientData.dtor = delete__SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t;  
    SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t->clientdata = &SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t");
    SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t_clientData.class_templ = SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t_class;
    SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t_clientData.dtor = delete__SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t;  
    SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t->clientdata = &SWIGTYPE_p_ofPtrT_ofBaseVideoGrabber_t_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t");
    SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t_clientData.class_templ = SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t_class;
    SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t_clientData.dtor = delete__SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t;  
    SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t->clientdata = &SWIGTYPE_p_ofPtrT_ofBaseVideoPlayer_t_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_ofPtrT_ofGLRenderer_t_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_ofPtrT_ofGLRenderer_t");
    SWIGTYPE_p_ofPtrT_ofGLRenderer_t_clientData.class_templ = SWIGTYPE_p_ofPtrT_ofGLRenderer_t_class;
    SWIGTYPE_p_ofPtrT_ofGLRenderer_t_clientData.dtor = delete__SWIGTYPE_p_ofPtrT_ofGLRenderer_t;  
    SWIGTYPE_p_ofPtrT_ofGLRenderer_t->clientdata = &SWIGTYPE_p_ofPtrT_ofGLRenderer_t_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_uint64_t_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_uint64_t");
    SWIGTYPE_p_uint64_t_clientData.class_templ = SWIGTYPE_p_uint64_t_class;
    SWIGTYPE_p_uint64_t_clientData.dtor = delete__SWIGTYPE_p_uint64_t;  
    SWIGTYPE_p_uint64_t->clientdata = &SWIGTYPE_p_uint64_t_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_TESSindex_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_TESSindex");
    SWIGTYPE_p_TESSindex_clientData.class_templ = SWIGTYPE_p_TESSindex_class;
    SWIGTYPE_p_TESSindex_clientData.dtor = delete__SWIGTYPE_p_TESSindex;  
    SWIGTYPE_p_TESSindex->clientdata = &SWIGTYPE_p_TESSindex_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_GLuint_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_GLuint");
    SWIGTYPE_p_GLuint_clientData.class_templ = SWIGTYPE_p_GLuint_class;
    SWIGTYPE_p_GLuint_clientData.dtor = delete__SWIGTYPE_p_GLuint;  
    SWIGTYPE_p_GLuint->clientdata = &SWIGTYPE_p_GLuint_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_GLint_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_GLint");
    SWIGTYPE_p_GLint_clientData.class_templ = SWIGTYPE_p_GLint_class;
    SWIGTYPE_p_GLint_clientData.dtor = delete__SWIGTYPE_p_GLint;  
    SWIGTYPE_p_GLint->clientdata = &SWIGTYPE_p_GLint_clientData;
    v8::Handle<v8::FunctionTemplate> SWIGTYPE_p_std__vectorT_ofFile_t_class = SWIGV8_CreateClassTemplate("SWIGTYPE_p_std__vectorT_ofFile_t");
    SWIGTYPE_p_std__vectorT_ofFile_t_clientData.class_templ = SWIGTYPE_p_std__vectorT_ofFile_t_class;
    SWIGTYPE_p_std__vectorT_ofFile_t_clientData.dtor = delete__SWIGTYPE_p_std__vectorT_ofFile_t;  
    SWIGTYPE_p_std__vectorT_ofFile_t->clientdata = &SWIGTYPE_p_std__vectorT_ofFile_t_clientData;
    
    
    /* register wrapper functions */
    SWIGV8_AddMemberFunction(_ofBuffer_class, "set", _wrap_ofBuffer_set);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "append", _wrap_ofBuffer_append);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "writeTo", _wrap_ofBuffer_writeTo);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "clear", _wrap_ofBuffer_clear);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "allocate", _wrap_ofBuffer_allocate);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "getBinaryBuffer", _wrap_ofBuffer_getBinaryBuffer);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "getText", _wrap_ofBuffer_getText);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "size", _wrap_ofBuffer_size);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "getNextLine", _wrap_ofBuffer_getNextLine);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "getFirstLine", _wrap_ofBuffer_getFirstLine);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "isLastLine", _wrap_ofBuffer_isLastLine);
    SWIGV8_AddMemberFunction(_ofBuffer_class, "resetLineReader", _wrap_ofBuffer_resetLineReader);
    SWIGV8_AddMemberFunction(_ofFile_class, "open", _wrap_ofFile_open);
    SWIGV8_AddMemberFunction(_ofFile_class, "changeMode", _wrap_ofFile_changeMode);
    SWIGV8_AddMemberFunction(_ofFile_class, "close", _wrap_ofFile_close);
    SWIGV8_AddMemberFunction(_ofFile_class, "create", _wrap_ofFile_create);
    SWIGV8_AddMemberFunction(_ofFile_class, "exists", _wrap_ofFile_exists);
    SWIGV8_AddMemberFunction(_ofFile_class, "path", _wrap_ofFile_path);
    SWIGV8_AddMemberFunction(_ofFile_class, "getExtension", _wrap_ofFile_getExtension);
    SWIGV8_AddMemberFunction(_ofFile_class, "getFileName", _wrap_ofFile_getFileName);
    SWIGV8_AddMemberFunction(_ofFile_class, "getBaseName", _wrap_ofFile_getBaseName);
    SWIGV8_AddMemberFunction(_ofFile_class, "getEnclosingDirectory", _wrap_ofFile_getEnclosingDirectory);
    SWIGV8_AddMemberFunction(_ofFile_class, "getAbsolutePath", _wrap_ofFile_getAbsolutePath);
    SWIGV8_AddMemberFunction(_ofFile_class, "canRead", _wrap_ofFile_canRead);
    SWIGV8_AddMemberFunction(_ofFile_class, "canWrite", _wrap_ofFile_canWrite);
    SWIGV8_AddMemberFunction(_ofFile_class, "canExecute", _wrap_ofFile_canExecute);
    SWIGV8_AddMemberFunction(_ofFile_class, "isFile", _wrap_ofFile_isFile);
    SWIGV8_AddMemberFunction(_ofFile_class, "isLink", _wrap_ofFile_isLink);
    SWIGV8_AddMemberFunction(_ofFile_class, "isDirectory", _wrap_ofFile_isDirectory);
    SWIGV8_AddMemberFunction(_ofFile_class, "isDevice", _wrap_ofFile_isDevice);
    SWIGV8_AddMemberFunction(_ofFile_class, "isHidden", _wrap_ofFile_isHidden);
    SWIGV8_AddMemberFunction(_ofFile_class, "setWriteable", _wrap_ofFile_setWriteable);
    SWIGV8_AddMemberFunction(_ofFile_class, "setReadOnly", _wrap_ofFile_setReadOnly);
    SWIGV8_AddMemberFunction(_ofFile_class, "setExecutable", _wrap_ofFile_setExecutable);
    SWIGV8_AddMemberFunction(_ofFile_class, "copyTo", _wrap_ofFile_copyTo);
    SWIGV8_AddMemberFunction(_ofFile_class, "moveTo", _wrap_ofFile_moveTo);
    SWIGV8_AddMemberFunction(_ofFile_class, "renameTo", _wrap_ofFile_renameTo);
    SWIGV8_AddMemberFunction(_ofFile_class, "remove", _wrap_ofFile_remove);
    SWIGV8_AddMemberFunction(_ofFile_class, "getSize", _wrap_ofFile_getSize);
    SWIGV8_AddMemberFunction(_ofFile_class, "getPocoFile", _wrap_ofFile_getPocoFile);
    SWIGV8_AddMemberFunction(_ofFile_class, "readToBuffer", _wrap_ofFile_readToBuffer);
    SWIGV8_AddMemberFunction(_ofFile_class, "writeFromBuffer", _wrap_ofFile_writeFromBuffer);
    SWIGV8_AddMemberFunction(_ofFile_class, "getFileBuffer", _wrap_ofFile_getFileBuffer);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "open", _wrap_ofDirectory_open);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "close", _wrap_ofDirectory_close);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "create", _wrap_ofDirectory_create);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "exists", _wrap_ofDirectory_exists);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "path", _wrap_ofDirectory_path);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "getAbsolutePath", _wrap_ofDirectory_getAbsolutePath);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "isDirectory", _wrap_ofDirectory_isDirectory);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "isHidden", _wrap_ofDirectory_isHidden);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "setWriteable", _wrap_ofDirectory_setWriteable);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "setReadOnly", _wrap_ofDirectory_setReadOnly);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "setExecutable", _wrap_ofDirectory_setExecutable);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "setShowHidden", _wrap_ofDirectory_setShowHidden);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "copyTo", _wrap_ofDirectory_copyTo);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "moveTo", _wrap_ofDirectory_moveTo);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "renameTo", _wrap_ofDirectory_renameTo);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "remove", _wrap_ofDirectory_remove);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "allowExt", _wrap_ofDirectory_allowExt);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "listDir", _wrap_ofDirectory_listDir);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "getOriginalDirectory", _wrap_ofDirectory_getOriginalDirectory);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "getName", _wrap_ofDirectory_getName);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "getPath", _wrap_ofDirectory_getPath);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "getFile", _wrap_ofDirectory_getFile);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "getFiles", _wrap_ofDirectory_getFiles);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "getShowHidden", _wrap_ofDirectory_getShowHidden);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "reset", _wrap_ofDirectory_reset);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "sort", _wrap_ofDirectory_sort);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "size", _wrap_ofDirectory_size);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "numFiles", _wrap_ofDirectory_numFiles);
    SWIGV8_AddMemberFunction(_ofDirectory_class, "getPocoFile", _wrap_ofDirectory_getPocoFile);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "set", _wrap_ofRectangle_set);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "setX", _wrap_ofRectangle_setX);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "setY", _wrap_ofRectangle_setY);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "setWidth", _wrap_ofRectangle_setWidth);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "setHeight", _wrap_ofRectangle_setHeight);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "setPosition", _wrap_ofRectangle_setPosition);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "setFromCenter", _wrap_ofRectangle_setFromCenter);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "translate", _wrap_ofRectangle_translate);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "translateX", _wrap_ofRectangle_translateX);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "translateY", _wrap_ofRectangle_translateY);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "scale", _wrap_ofRectangle_scale);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "scaleWidth", _wrap_ofRectangle_scaleWidth);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "scaleHeight", _wrap_ofRectangle_scaleHeight);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "scaleFromCenter", _wrap_ofRectangle_scaleFromCenter);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "scaleTo", _wrap_ofRectangle_scaleTo);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "alignToHorz", _wrap_ofRectangle_alignToHorz);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "alignToVert", _wrap_ofRectangle_alignToVert);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "alignTo", _wrap_ofRectangle_alignTo);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "inside", _wrap_ofRectangle_inside);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "intersects", _wrap_ofRectangle_intersects);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "growToInclude", _wrap_ofRectangle_growToInclude);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getIntersection", _wrap_ofRectangle_getIntersection);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getUnion", _wrap_ofRectangle_getUnion);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "standardize", _wrap_ofRectangle_standardize);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getStandardized", _wrap_ofRectangle_getStandardized);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "isStandardized", _wrap_ofRectangle_isStandardized);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getArea", _wrap_ofRectangle_getArea);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getPerimeter", _wrap_ofRectangle_getPerimeter);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getAspectRatio", _wrap_ofRectangle_getAspectRatio);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "isEmpty", _wrap_ofRectangle_isEmpty);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getMin", _wrap_ofRectangle_getMin);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getMax", _wrap_ofRectangle_getMax);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getMinX", _wrap_ofRectangle_getMinX);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getMaxX", _wrap_ofRectangle_getMaxX);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getMinY", _wrap_ofRectangle_getMinY);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getMaxY", _wrap_ofRectangle_getMaxY);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getLeft", _wrap_ofRectangle_getLeft);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getRight", _wrap_ofRectangle_getRight);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getTop", _wrap_ofRectangle_getTop);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getBottom", _wrap_ofRectangle_getBottom);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getTopLeft", _wrap_ofRectangle_getTopLeft);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getTopRight", _wrap_ofRectangle_getTopRight);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getBottomLeft", _wrap_ofRectangle_getBottomLeft);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getBottomRight", _wrap_ofRectangle_getBottomRight);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getHorzAnchor", _wrap_ofRectangle_getHorzAnchor);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getVertAnchor", _wrap_ofRectangle_getVertAnchor);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getPosition", _wrap_ofRectangle_getPosition);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getPositionRef", _wrap_ofRectangle_getPositionRef);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getCenter", _wrap_ofRectangle_getCenter);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getX", _wrap_ofRectangle_getX);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getY", _wrap_ofRectangle_getY);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getWidth", _wrap_ofRectangle_getWidth);
    SWIGV8_AddMemberFunction(_ofRectangle_class, "getHeight", _wrap_ofRectangle_getHeight);
    SWIGV8_AddMemberVariable(_ofRectangle_class, "position", _wrap_ofRectangle_position_get, _wrap_ofRectangle_position_set);
    SWIGV8_AddMemberVariable(_ofRectangle_class, "x", _wrap_ofRectangle_x_get, _wrap_ofRectangle_x_set);
    SWIGV8_AddMemberVariable(_ofRectangle_class, "y", _wrap_ofRectangle_y_get, _wrap_ofRectangle_y_set);
    SWIGV8_AddMemberVariable(_ofRectangle_class, "width", _wrap_ofRectangle_width_get, _wrap_ofRectangle_width_set);
    SWIGV8_AddMemberVariable(_ofRectangle_class, "height", _wrap_ofRectangle_height_get, _wrap_ofRectangle_height_set);
    SWIGV8_AddMemberFunction(_ofSerialDeviceInfo_class, "getDevicePath", _wrap_ofSerialDeviceInfo_getDevicePath);
    SWIGV8_AddMemberFunction(_ofSerialDeviceInfo_class, "getDeviceName", _wrap_ofSerialDeviceInfo_getDeviceName);
    SWIGV8_AddMemberFunction(_ofSerialDeviceInfo_class, "getDeviceID", _wrap_ofSerialDeviceInfo_getDeviceID);
    SWIGV8_AddMemberVariable(_ofStyle_class, "color", _wrap_ofStyle_color_get, _wrap_ofStyle_color_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "bgColor", _wrap_ofStyle_bgColor_get, _wrap_ofStyle_bgColor_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "polyMode", _wrap_ofStyle_polyMode_get, _wrap_ofStyle_polyMode_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "rectMode", _wrap_ofStyle_rectMode_get, _wrap_ofStyle_rectMode_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "bFill", _wrap_ofStyle_bFill_get, _wrap_ofStyle_bFill_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "drawBitmapMode", _wrap_ofStyle_drawBitmapMode_get, _wrap_ofStyle_drawBitmapMode_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "blendingMode", _wrap_ofStyle_blendingMode_get, _wrap_ofStyle_blendingMode_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "smoothing", _wrap_ofStyle_smoothing_get, _wrap_ofStyle_smoothing_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "circleResolution", _wrap_ofStyle_circleResolution_get, _wrap_ofStyle_circleResolution_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "sphereResolution", _wrap_ofStyle_sphereResolution_get, _wrap_ofStyle_sphereResolution_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "curveResolution", _wrap_ofStyle_curveResolution_get, _wrap_ofStyle_curveResolution_set);
    SWIGV8_AddMemberVariable(_ofStyle_class, "lineWidth", _wrap_ofStyle_lineWidth_get, _wrap_ofStyle_lineWidth_set);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "set", _wrap_ofColor_set);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "setHex", _wrap_ofColor_setHex);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getHex", _wrap_ofColor_getHex);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "clamp", _wrap_ofColor_clamp);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "invert", _wrap_ofColor_invert);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "normalize", _wrap_ofColor_normalize);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "lerp", _wrap_ofColor_lerp);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getClamped", _wrap_ofColor_getClamped);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getInverted", _wrap_ofColor_getInverted);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getNormalized", _wrap_ofColor_getNormalized);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getLerped", _wrap_ofColor_getLerped);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getHue", _wrap_ofColor_getHue);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getSaturation", _wrap_ofColor_getSaturation);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getBrightness", _wrap_ofColor_getBrightness);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getLightness", _wrap_ofColor_getLightness);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "getHsb", _wrap_ofColor_getHsb);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "setHue", _wrap_ofColor_setHue);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "setSaturation", _wrap_ofColor_setSaturation);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "setBrightness", _wrap_ofColor_setBrightness);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_char_t_class, "setHsb", _wrap_ofColor_setHsb);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "set", _wrap_ofFloatColor_set);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "setHex", _wrap_ofFloatColor_setHex);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getHex", _wrap_ofFloatColor_getHex);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "clamp", _wrap_ofFloatColor_clamp);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "invert", _wrap_ofFloatColor_invert);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "normalize", _wrap_ofFloatColor_normalize);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "lerp", _wrap_ofFloatColor_lerp);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getClamped", _wrap_ofFloatColor_getClamped);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getInverted", _wrap_ofFloatColor_getInverted);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getNormalized", _wrap_ofFloatColor_getNormalized);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getLerped", _wrap_ofFloatColor_getLerped);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getHue", _wrap_ofFloatColor_getHue);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getSaturation", _wrap_ofFloatColor_getSaturation);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getBrightness", _wrap_ofFloatColor_getBrightness);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getLightness", _wrap_ofFloatColor_getLightness);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "getHsb", _wrap_ofFloatColor_getHsb);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "setHue", _wrap_ofFloatColor_setHue);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "setSaturation", _wrap_ofFloatColor_setSaturation);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "setBrightness", _wrap_ofFloatColor_setBrightness);
    SWIGV8_AddMemberFunction(_ofColor_T_float_t_class, "setHsb", _wrap_ofFloatColor_setHsb);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "set", _wrap_ofShortColor_set);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "setHex", _wrap_ofShortColor_setHex);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getHex", _wrap_ofShortColor_getHex);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "clamp", _wrap_ofShortColor_clamp);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "invert", _wrap_ofShortColor_invert);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "normalize", _wrap_ofShortColor_normalize);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "lerp", _wrap_ofShortColor_lerp);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getClamped", _wrap_ofShortColor_getClamped);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getInverted", _wrap_ofShortColor_getInverted);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getNormalized", _wrap_ofShortColor_getNormalized);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getLerped", _wrap_ofShortColor_getLerped);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getHue", _wrap_ofShortColor_getHue);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getSaturation", _wrap_ofShortColor_getSaturation);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getBrightness", _wrap_ofShortColor_getBrightness);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getLightness", _wrap_ofShortColor_getLightness);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "getHsb", _wrap_ofShortColor_getHsb);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "setHue", _wrap_ofShortColor_setHue);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "setSaturation", _wrap_ofShortColor_setSaturation);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "setBrightness", _wrap_ofShortColor_setBrightness);
    SWIGV8_AddMemberFunction(_ofColor_T_unsigned_short_t_class, "setHsb", _wrap_ofShortColor_setHsb);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_QUALITY_BEST", _wrap_OF_IMAGE_QUALITY_BEST, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_QUALITY_HIGH", _wrap_OF_IMAGE_QUALITY_HIGH, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_QUALITY_MEDIUM", _wrap_OF_IMAGE_QUALITY_MEDIUM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_QUALITY_LOW", _wrap_OF_IMAGE_QUALITY_LOW, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_QUALITY_WORST", _wrap_OF_IMAGE_QUALITY_WORST, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_BMP", _wrap_OF_IMAGE_FORMAT_BMP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_ICO", _wrap_OF_IMAGE_FORMAT_ICO, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_JPEG", _wrap_OF_IMAGE_FORMAT_JPEG, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_JNG", _wrap_OF_IMAGE_FORMAT_JNG, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_KOALA", _wrap_OF_IMAGE_FORMAT_KOALA, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_LBM", _wrap_OF_IMAGE_FORMAT_LBM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_IFF", _wrap_OF_IMAGE_FORMAT_IFF, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_MNG", _wrap_OF_IMAGE_FORMAT_MNG, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PBM", _wrap_OF_IMAGE_FORMAT_PBM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PBMRAW", _wrap_OF_IMAGE_FORMAT_PBMRAW, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PCD", _wrap_OF_IMAGE_FORMAT_PCD, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PCX", _wrap_OF_IMAGE_FORMAT_PCX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PGM", _wrap_OF_IMAGE_FORMAT_PGM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PGMRAW", _wrap_OF_IMAGE_FORMAT_PGMRAW, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PNG", _wrap_OF_IMAGE_FORMAT_PNG, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PPM", _wrap_OF_IMAGE_FORMAT_PPM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PPMRAW", _wrap_OF_IMAGE_FORMAT_PPMRAW, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_RAS", _wrap_OF_IMAGE_FORMAT_RAS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_TARGA", _wrap_OF_IMAGE_FORMAT_TARGA, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_TIFF", _wrap_OF_IMAGE_FORMAT_TIFF, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_WBMP", _wrap_OF_IMAGE_FORMAT_WBMP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PSD", _wrap_OF_IMAGE_FORMAT_PSD, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_CUT", _wrap_OF_IMAGE_FORMAT_CUT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_XBM", _wrap_OF_IMAGE_FORMAT_XBM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_XPM", _wrap_OF_IMAGE_FORMAT_XPM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_DDS", _wrap_OF_IMAGE_FORMAT_DDS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_GIF", _wrap_OF_IMAGE_FORMAT_GIF, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_HDR", _wrap_OF_IMAGE_FORMAT_HDR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_FAXG3", _wrap_OF_IMAGE_FORMAT_FAXG3, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_SGI", _wrap_OF_IMAGE_FORMAT_SGI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_EXR", _wrap_OF_IMAGE_FORMAT_EXR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_J2K", _wrap_OF_IMAGE_FORMAT_J2K, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_JP2", _wrap_OF_IMAGE_FORMAT_JP2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PFM", _wrap_OF_IMAGE_FORMAT_PFM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_PICT", _wrap_OF_IMAGE_FORMAT_PICT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_FORMAT_RAW", _wrap_OF_IMAGE_FORMAT_RAW, JS_veto_set_variable);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "allocate", _wrap_ofImage_allocate);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "clear", _wrap_ofImage_clear);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "setUseTexture", _wrap_ofImage_setUseTexture);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "isUsingTexture", _wrap_ofImage_isUsingTexture);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "getTextureReference", _wrap_ofImage_getTextureReference);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "bind", _wrap_ofImage_bind);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "unbind", _wrap_ofImage_unbind);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "loadImage", _wrap_ofImage_loadImage);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "saveImage", _wrap_ofImage_saveImage);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "setCompression", _wrap_ofImage_setCompression);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "getPixels", _wrap_ofImage_getPixels);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "getPixelsRef", _wrap_ofImage_getPixelsRef);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "getColor", _wrap_ofImage_getColor);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "setColor", _wrap_ofImage_setColor);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "setFromPixels", _wrap_ofImage_setFromPixels);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "setImageType", _wrap_ofImage_setImageType);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "resize", _wrap_ofImage_resize);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "grabScreen", _wrap_ofImage_grabScreen);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "crop", _wrap_ofImage_crop);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "cropFrom", _wrap_ofImage_cropFrom);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "rotate90", _wrap_ofImage_rotate90);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "mirror", _wrap_ofImage_mirror);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "update", _wrap_ofImage_update);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "setAnchorPercent", _wrap_ofImage_setAnchorPercent);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "setAnchorPoint", _wrap_ofImage_setAnchorPoint);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "resetAnchor", _wrap_ofImage_resetAnchor);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "draw", _wrap_ofImage_draw);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "drawSubsection", _wrap_ofImage_drawSubsection);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "getHeight", _wrap_ofImage_getHeight);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "getWidth", _wrap_ofImage_getWidth);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "bAllocated", _wrap_ofImage_bAllocated);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "isAllocated", _wrap_ofImage_isAllocated);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_char_t_class, "reloadTexture", _wrap_ofImage_reloadTexture);
    SWIGV8_AddMemberVariable(_ofImage_T_unsigned_char_t_class, "width", _wrap_ofImage_width_get, _wrap_ofImage_width_set);
    SWIGV8_AddMemberVariable(_ofImage_T_unsigned_char_t_class, "height", _wrap_ofImage_height_get, _wrap_ofImage_height_set);
    SWIGV8_AddMemberVariable(_ofImage_T_unsigned_char_t_class, "bpp", _wrap_ofImage_bpp_get, _wrap_ofImage_bpp_set);
    SWIGV8_AddMemberVariable(_ofImage_T_unsigned_char_t_class, "type", _wrap_ofImage_type_get, _wrap_ofImage_type_set);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "allocate", _wrap_ofFloatImage_allocate);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "clear", _wrap_ofFloatImage_clear);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "setUseTexture", _wrap_ofFloatImage_setUseTexture);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "isUsingTexture", _wrap_ofFloatImage_isUsingTexture);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "getTextureReference", _wrap_ofFloatImage_getTextureReference);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "bind", _wrap_ofFloatImage_bind);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "unbind", _wrap_ofFloatImage_unbind);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "loadImage", _wrap_ofFloatImage_loadImage);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "saveImage", _wrap_ofFloatImage_saveImage);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "setCompression", _wrap_ofFloatImage_setCompression);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "getPixels", _wrap_ofFloatImage_getPixels);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "getPixelsRef", _wrap_ofFloatImage_getPixelsRef);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "getColor", _wrap_ofFloatImage_getColor);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "setColor", _wrap_ofFloatImage_setColor);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "setFromPixels", _wrap_ofFloatImage_setFromPixels);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "setImageType", _wrap_ofFloatImage_setImageType);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "resize", _wrap_ofFloatImage_resize);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "grabScreen", _wrap_ofFloatImage_grabScreen);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "crop", _wrap_ofFloatImage_crop);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "cropFrom", _wrap_ofFloatImage_cropFrom);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "rotate90", _wrap_ofFloatImage_rotate90);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "mirror", _wrap_ofFloatImage_mirror);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "update", _wrap_ofFloatImage_update);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "setAnchorPercent", _wrap_ofFloatImage_setAnchorPercent);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "setAnchorPoint", _wrap_ofFloatImage_setAnchorPoint);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "resetAnchor", _wrap_ofFloatImage_resetAnchor);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "draw", _wrap_ofFloatImage_draw);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "drawSubsection", _wrap_ofFloatImage_drawSubsection);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "getHeight", _wrap_ofFloatImage_getHeight);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "getWidth", _wrap_ofFloatImage_getWidth);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "bAllocated", _wrap_ofFloatImage_bAllocated);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "isAllocated", _wrap_ofFloatImage_isAllocated);
    SWIGV8_AddMemberFunction(_ofImage_T_float_t_class, "reloadTexture", _wrap_ofFloatImage_reloadTexture);
    SWIGV8_AddMemberVariable(_ofImage_T_float_t_class, "width", _wrap_ofFloatImage_width_get, _wrap_ofFloatImage_width_set);
    SWIGV8_AddMemberVariable(_ofImage_T_float_t_class, "height", _wrap_ofFloatImage_height_get, _wrap_ofFloatImage_height_set);
    SWIGV8_AddMemberVariable(_ofImage_T_float_t_class, "bpp", _wrap_ofFloatImage_bpp_get, _wrap_ofFloatImage_bpp_set);
    SWIGV8_AddMemberVariable(_ofImage_T_float_t_class, "type", _wrap_ofFloatImage_type_get, _wrap_ofFloatImage_type_set);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "allocate", _wrap_ofShortImage_allocate);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "clear", _wrap_ofShortImage_clear);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "setUseTexture", _wrap_ofShortImage_setUseTexture);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "isUsingTexture", _wrap_ofShortImage_isUsingTexture);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "getTextureReference", _wrap_ofShortImage_getTextureReference);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "bind", _wrap_ofShortImage_bind);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "unbind", _wrap_ofShortImage_unbind);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "loadImage", _wrap_ofShortImage_loadImage);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "saveImage", _wrap_ofShortImage_saveImage);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "setCompression", _wrap_ofShortImage_setCompression);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "getPixels", _wrap_ofShortImage_getPixels);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "getPixelsRef", _wrap_ofShortImage_getPixelsRef);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "getColor", _wrap_ofShortImage_getColor);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "setColor", _wrap_ofShortImage_setColor);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "setFromPixels", _wrap_ofShortImage_setFromPixels);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "setImageType", _wrap_ofShortImage_setImageType);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "resize", _wrap_ofShortImage_resize);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "grabScreen", _wrap_ofShortImage_grabScreen);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "crop", _wrap_ofShortImage_crop);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "cropFrom", _wrap_ofShortImage_cropFrom);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "rotate90", _wrap_ofShortImage_rotate90);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "mirror", _wrap_ofShortImage_mirror);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "update", _wrap_ofShortImage_update);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "setAnchorPercent", _wrap_ofShortImage_setAnchorPercent);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "setAnchorPoint", _wrap_ofShortImage_setAnchorPoint);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "resetAnchor", _wrap_ofShortImage_resetAnchor);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "draw", _wrap_ofShortImage_draw);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "drawSubsection", _wrap_ofShortImage_drawSubsection);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "getHeight", _wrap_ofShortImage_getHeight);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "getWidth", _wrap_ofShortImage_getWidth);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "bAllocated", _wrap_ofShortImage_bAllocated);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "isAllocated", _wrap_ofShortImage_isAllocated);
    SWIGV8_AddMemberFunction(_ofImage_T_unsigned_short_t_class, "reloadTexture", _wrap_ofShortImage_reloadTexture);
    SWIGV8_AddMemberVariable(_ofImage_T_unsigned_short_t_class, "width", _wrap_ofShortImage_width_get, _wrap_ofShortImage_width_set);
    SWIGV8_AddMemberVariable(_ofImage_T_unsigned_short_t_class, "height", _wrap_ofShortImage_height_get, _wrap_ofShortImage_height_set);
    SWIGV8_AddMemberVariable(_ofImage_T_unsigned_short_t_class, "bpp", _wrap_ofShortImage_bpp_get, _wrap_ofShortImage_bpp_set);
    SWIGV8_AddMemberVariable(_ofImage_T_unsigned_short_t_class, "type", _wrap_ofShortImage_type_get, _wrap_ofShortImage_type_set);
    SWIGV8_AddStaticVariable(of_obj, "OF_INTERPOLATE_NEAREST_NEIGHBOR", _wrap_OF_INTERPOLATE_NEAREST_NEIGHBOR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_INTERPOLATE_BILINEAR", _wrap_OF_INTERPOLATE_BILINEAR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_INTERPOLATE_BICUBIC", _wrap_OF_INTERPOLATE_BICUBIC, JS_veto_set_variable);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "allocate", _wrap_ofPixels_allocate);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "set", _wrap_ofPixels_set);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "setFromPixels", _wrap_ofPixels_setFromPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "setFromExternalPixels", _wrap_ofPixels_setFromExternalPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "setFromAlignedPixels", _wrap_ofPixels_setFromAlignedPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "swap", _wrap_ofPixels_swap);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "crop", _wrap_ofPixels_crop);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "cropTo", _wrap_ofPixels_cropTo);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "rotate90", _wrap_ofPixels_rotate90);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "rotate90To", _wrap_ofPixels_rotate90To);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "mirrorTo", _wrap_ofPixels_mirrorTo);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "mirror", _wrap_ofPixels_mirror);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "resize", _wrap_ofPixels_resize);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "resizeTo", _wrap_ofPixels_resizeTo);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "pasteInto", _wrap_ofPixels_pasteInto);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "swapRgb", _wrap_ofPixels_swapRgb);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "clear", _wrap_ofPixels_clear);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getPixels", _wrap_ofPixels_getPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getPixelIndex", _wrap_ofPixels_getPixelIndex);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getColor", _wrap_ofPixels_getColor);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "setColor", _wrap_ofPixels_setColor);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "isAllocated", _wrap_ofPixels_isAllocated);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getWidth", _wrap_ofPixels_getWidth);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getHeight", _wrap_ofPixels_getHeight);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getBytesPerPixel", _wrap_ofPixels_getBytesPerPixel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getBitsPerPixel", _wrap_ofPixels_getBitsPerPixel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getBytesPerChannel", _wrap_ofPixels_getBytesPerChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getBitsPerChannel", _wrap_ofPixels_getBitsPerChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getNumChannels", _wrap_ofPixels_getNumChannels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getChannel", _wrap_ofPixels_getChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "setChannel", _wrap_ofPixels_setChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "getImageType", _wrap_ofPixels_getImageType);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "setImageType", _wrap_ofPixels_setImageType);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "setNumChannels", _wrap_ofPixels_setNumChannels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_char_t_class, "size", _wrap_ofPixels_size);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "allocate", _wrap_ofFloatPixels_allocate);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "set", _wrap_ofFloatPixels_set);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "setFromPixels", _wrap_ofFloatPixels_setFromPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "setFromExternalPixels", _wrap_ofFloatPixels_setFromExternalPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "setFromAlignedPixels", _wrap_ofFloatPixels_setFromAlignedPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "swap", _wrap_ofFloatPixels_swap);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "crop", _wrap_ofFloatPixels_crop);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "cropTo", _wrap_ofFloatPixels_cropTo);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "rotate90", _wrap_ofFloatPixels_rotate90);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "rotate90To", _wrap_ofFloatPixels_rotate90To);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "mirrorTo", _wrap_ofFloatPixels_mirrorTo);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "mirror", _wrap_ofFloatPixels_mirror);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "resize", _wrap_ofFloatPixels_resize);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "resizeTo", _wrap_ofFloatPixels_resizeTo);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "pasteInto", _wrap_ofFloatPixels_pasteInto);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "swapRgb", _wrap_ofFloatPixels_swapRgb);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "clear", _wrap_ofFloatPixels_clear);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getPixels", _wrap_ofFloatPixels_getPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getPixelIndex", _wrap_ofFloatPixels_getPixelIndex);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getColor", _wrap_ofFloatPixels_getColor);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "setColor", _wrap_ofFloatPixels_setColor);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "isAllocated", _wrap_ofFloatPixels_isAllocated);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getWidth", _wrap_ofFloatPixels_getWidth);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getHeight", _wrap_ofFloatPixels_getHeight);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getBytesPerPixel", _wrap_ofFloatPixels_getBytesPerPixel);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getBitsPerPixel", _wrap_ofFloatPixels_getBitsPerPixel);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getBytesPerChannel", _wrap_ofFloatPixels_getBytesPerChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getBitsPerChannel", _wrap_ofFloatPixels_getBitsPerChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getNumChannels", _wrap_ofFloatPixels_getNumChannels);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getChannel", _wrap_ofFloatPixels_getChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "setChannel", _wrap_ofFloatPixels_setChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "getImageType", _wrap_ofFloatPixels_getImageType);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "setImageType", _wrap_ofFloatPixels_setImageType);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "setNumChannels", _wrap_ofFloatPixels_setNumChannels);
    SWIGV8_AddMemberFunction(_ofPixels_T_float_t_class, "size", _wrap_ofFloatPixels_size);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "allocate", _wrap_ofShortPixels_allocate);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "set", _wrap_ofShortPixels_set);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "setFromPixels", _wrap_ofShortPixels_setFromPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "setFromExternalPixels", _wrap_ofShortPixels_setFromExternalPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "setFromAlignedPixels", _wrap_ofShortPixels_setFromAlignedPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "swap", _wrap_ofShortPixels_swap);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "crop", _wrap_ofShortPixels_crop);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "cropTo", _wrap_ofShortPixels_cropTo);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "rotate90", _wrap_ofShortPixels_rotate90);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "rotate90To", _wrap_ofShortPixels_rotate90To);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "mirrorTo", _wrap_ofShortPixels_mirrorTo);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "mirror", _wrap_ofShortPixels_mirror);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "resize", _wrap_ofShortPixels_resize);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "resizeTo", _wrap_ofShortPixels_resizeTo);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "pasteInto", _wrap_ofShortPixels_pasteInto);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "swapRgb", _wrap_ofShortPixels_swapRgb);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "clear", _wrap_ofShortPixels_clear);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getPixels", _wrap_ofShortPixels_getPixels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getPixelIndex", _wrap_ofShortPixels_getPixelIndex);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getColor", _wrap_ofShortPixels_getColor);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "setColor", _wrap_ofShortPixels_setColor);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "isAllocated", _wrap_ofShortPixels_isAllocated);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getWidth", _wrap_ofShortPixels_getWidth);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getHeight", _wrap_ofShortPixels_getHeight);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getBytesPerPixel", _wrap_ofShortPixels_getBytesPerPixel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getBitsPerPixel", _wrap_ofShortPixels_getBitsPerPixel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getBytesPerChannel", _wrap_ofShortPixels_getBytesPerChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getBitsPerChannel", _wrap_ofShortPixels_getBitsPerChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getNumChannels", _wrap_ofShortPixels_getNumChannels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getChannel", _wrap_ofShortPixels_getChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "setChannel", _wrap_ofShortPixels_setChannel);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "getImageType", _wrap_ofShortPixels_getImageType);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "setImageType", _wrap_ofShortPixels_setImageType);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "setNumChannels", _wrap_ofShortPixels_setNumChannels);
    SWIGV8_AddMemberFunction(_ofPixels_T_unsigned_short_t_class, "size", _wrap_ofShortPixels_size);
    SWIGV8_AddMemberVariable(_ofDragInfo_class, "files", _wrap_ofDragInfo_files_get, _wrap_ofDragInfo_files_set);
    SWIGV8_AddMemberVariable(_ofDragInfo_class, "position", _wrap_ofDragInfo_position_get, _wrap_ofDragInfo_position_set);
    SWIGV8_AddMemberVariable(_ofEntryEventArgs_class, "state", _wrap_ofEntryEventArgs_state_get, _wrap_ofEntryEventArgs_state_set);
    SWIGV8_AddMemberVariable(_ofKeyEventArgs_class, "key", _wrap_ofKeyEventArgs_key_get, _wrap_ofKeyEventArgs_key_set);
    SWIGV8_AddMemberVariable(_ofMouseEventArgs_class, "x", _wrap_ofMouseEventArgs_x_get, _wrap_ofMouseEventArgs_x_set);
    SWIGV8_AddMemberVariable(_ofMouseEventArgs_class, "y", _wrap_ofMouseEventArgs_y_get, _wrap_ofMouseEventArgs_y_set);
    SWIGV8_AddMemberVariable(_ofMouseEventArgs_class, "button", _wrap_ofMouseEventArgs_button_get, _wrap_ofMouseEventArgs_button_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "type", _wrap_ofTouchEventArgs_type_get, _wrap_ofTouchEventArgs_type_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "id", _wrap_ofTouchEventArgs_id_get, _wrap_ofTouchEventArgs_id_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "time", _wrap_ofTouchEventArgs_time_get, _wrap_ofTouchEventArgs_time_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "x", _wrap_ofTouchEventArgs_x_get, _wrap_ofTouchEventArgs_x_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "y", _wrap_ofTouchEventArgs_y_get, _wrap_ofTouchEventArgs_y_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "numTouches", _wrap_ofTouchEventArgs_numTouches_get, _wrap_ofTouchEventArgs_numTouches_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "width", _wrap_ofTouchEventArgs_width_get, _wrap_ofTouchEventArgs_width_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "height", _wrap_ofTouchEventArgs_height_get, _wrap_ofTouchEventArgs_height_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "angle", _wrap_ofTouchEventArgs_angle_get, _wrap_ofTouchEventArgs_angle_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "minoraxis", _wrap_ofTouchEventArgs_minoraxis_get, _wrap_ofTouchEventArgs_minoraxis_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "majoraxis", _wrap_ofTouchEventArgs_majoraxis_get, _wrap_ofTouchEventArgs_majoraxis_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "pressure", _wrap_ofTouchEventArgs_pressure_get, _wrap_ofTouchEventArgs_pressure_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "xspeed", _wrap_ofTouchEventArgs_xspeed_get, _wrap_ofTouchEventArgs_xspeed_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "yspeed", _wrap_ofTouchEventArgs_yspeed_get, _wrap_ofTouchEventArgs_yspeed_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "xaccel", _wrap_ofTouchEventArgs_xaccel_get, _wrap_ofTouchEventArgs_xaccel_set);
    SWIGV8_AddMemberVariable(_ofTouchEventArgs_class, "yaccel", _wrap_ofTouchEventArgs_yaccel_get, _wrap_ofTouchEventArgs_yaccel_set);
    SWIGV8_AddMemberVariable(_ofAudioEventArgs_class, "buffer", _wrap_ofAudioEventArgs_buffer_get, _wrap_ofAudioEventArgs_buffer_set);
    SWIGV8_AddMemberVariable(_ofAudioEventArgs_class, "bufferSize", _wrap_ofAudioEventArgs_bufferSize_get, _wrap_ofAudioEventArgs_bufferSize_set);
    SWIGV8_AddMemberVariable(_ofAudioEventArgs_class, "nChannels", _wrap_ofAudioEventArgs_nChannels_get, _wrap_ofAudioEventArgs_nChannels_set);
    SWIGV8_AddMemberVariable(_ofResizeEventArgs_class, "width", _wrap_ofResizeEventArgs_width_get, _wrap_ofResizeEventArgs_width_set);
    SWIGV8_AddMemberVariable(_ofResizeEventArgs_class, "height", _wrap_ofResizeEventArgs_height_get, _wrap_ofResizeEventArgs_height_set);
    SWIGV8_AddMemberVariable(_ofMessage_class, "message", _wrap_ofMessage_message_get, _wrap_ofMessage_message_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "setup", _wrap_ofCoreEvents_setup_get, _wrap_ofCoreEvents_setup_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "update", _wrap_ofCoreEvents_update_get, _wrap_ofCoreEvents_update_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "draw", _wrap_ofCoreEvents_draw_get, _wrap_ofCoreEvents_draw_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "exit", _wrap_ofCoreEvents_exit_get, _wrap_ofCoreEvents_exit_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "windowEntered", _wrap_ofCoreEvents_windowEntered_get, _wrap_ofCoreEvents_windowEntered_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "windowResized", _wrap_ofCoreEvents_windowResized_get, _wrap_ofCoreEvents_windowResized_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "keyPressed", _wrap_ofCoreEvents_keyPressed_get, _wrap_ofCoreEvents_keyPressed_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "keyReleased", _wrap_ofCoreEvents_keyReleased_get, _wrap_ofCoreEvents_keyReleased_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "mouseMoved", _wrap_ofCoreEvents_mouseMoved_get, _wrap_ofCoreEvents_mouseMoved_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "mouseDragged", _wrap_ofCoreEvents_mouseDragged_get, _wrap_ofCoreEvents_mouseDragged_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "mousePressed", _wrap_ofCoreEvents_mousePressed_get, _wrap_ofCoreEvents_mousePressed_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "mouseReleased", _wrap_ofCoreEvents_mouseReleased_get, _wrap_ofCoreEvents_mouseReleased_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "audioReceived", _wrap_ofCoreEvents_audioReceived_get, _wrap_ofCoreEvents_audioReceived_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "audioRequested", _wrap_ofCoreEvents_audioRequested_get, _wrap_ofCoreEvents_audioRequested_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "touchDown", _wrap_ofCoreEvents_touchDown_get, _wrap_ofCoreEvents_touchDown_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "touchUp", _wrap_ofCoreEvents_touchUp_get, _wrap_ofCoreEvents_touchUp_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "touchMoved", _wrap_ofCoreEvents_touchMoved_get, _wrap_ofCoreEvents_touchMoved_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "touchDoubleTap", _wrap_ofCoreEvents_touchDoubleTap_get, _wrap_ofCoreEvents_touchDoubleTap_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "touchCancelled", _wrap_ofCoreEvents_touchCancelled_get, _wrap_ofCoreEvents_touchCancelled_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "messageEvent", _wrap_ofCoreEvents_messageEvent_get, _wrap_ofCoreEvents_messageEvent_set);
    SWIGV8_AddMemberVariable(_ofCoreEvents_class, "fileDragEvent", _wrap_ofCoreEvents_fileDragEvent_get, _wrap_ofCoreEvents_fileDragEvent_set);
    SWIGV8_AddMemberFunction(_ofCoreEvents_class, "disable", _wrap_ofCoreEvents_disable);
    SWIGV8_AddMemberFunction(_ofCoreEvents_class, "enable", _wrap_ofCoreEvents_enable);
    SWIGV8_AddMemberFunction(_ofNode_class, "setParent", _wrap_ofNode_setParent);
    SWIGV8_AddMemberFunction(_ofNode_class, "clearParent", _wrap_ofNode_clearParent);
    SWIGV8_AddMemberFunction(_ofNode_class, "getParent", _wrap_ofNode_getParent);
    SWIGV8_AddMemberFunction(_ofNode_class, "getPosition", _wrap_ofNode_getPosition);
    SWIGV8_AddMemberFunction(_ofNode_class, "getX", _wrap_ofNode_getX);
    SWIGV8_AddMemberFunction(_ofNode_class, "getY", _wrap_ofNode_getY);
    SWIGV8_AddMemberFunction(_ofNode_class, "getZ", _wrap_ofNode_getZ);
    SWIGV8_AddMemberFunction(_ofNode_class, "getXAxis", _wrap_ofNode_getXAxis);
    SWIGV8_AddMemberFunction(_ofNode_class, "getYAxis", _wrap_ofNode_getYAxis);
    SWIGV8_AddMemberFunction(_ofNode_class, "getZAxis", _wrap_ofNode_getZAxis);
    SWIGV8_AddMemberFunction(_ofNode_class, "getSideDir", _wrap_ofNode_getSideDir);
    SWIGV8_AddMemberFunction(_ofNode_class, "getLookAtDir", _wrap_ofNode_getLookAtDir);
    SWIGV8_AddMemberFunction(_ofNode_class, "getUpDir", _wrap_ofNode_getUpDir);
    SWIGV8_AddMemberFunction(_ofNode_class, "getPitch", _wrap_ofNode_getPitch);
    SWIGV8_AddMemberFunction(_ofNode_class, "getHeading", _wrap_ofNode_getHeading);
    SWIGV8_AddMemberFunction(_ofNode_class, "getRoll", _wrap_ofNode_getRoll);
    SWIGV8_AddMemberFunction(_ofNode_class, "getOrientationQuat", _wrap_ofNode_getOrientationQuat);
    SWIGV8_AddMemberFunction(_ofNode_class, "getOrientationEuler", _wrap_ofNode_getOrientationEuler);
    SWIGV8_AddMemberFunction(_ofNode_class, "getScale", _wrap_ofNode_getScale);
    SWIGV8_AddMemberFunction(_ofNode_class, "getLocalTransformMatrix", _wrap_ofNode_getLocalTransformMatrix);
    SWIGV8_AddMemberFunction(_ofNode_class, "getGlobalTransformMatrix", _wrap_ofNode_getGlobalTransformMatrix);
    SWIGV8_AddMemberFunction(_ofNode_class, "getGlobalPosition", _wrap_ofNode_getGlobalPosition);
    SWIGV8_AddMemberFunction(_ofNode_class, "getGlobalOrientation", _wrap_ofNode_getGlobalOrientation);
    SWIGV8_AddMemberFunction(_ofNode_class, "getGlobalScale", _wrap_ofNode_getGlobalScale);
    SWIGV8_AddMemberFunction(_ofNode_class, "setTransformMatrix", _wrap_ofNode_setTransformMatrix);
    SWIGV8_AddMemberFunction(_ofNode_class, "setPosition", _wrap_ofNode_setPosition);
    SWIGV8_AddMemberFunction(_ofNode_class, "setGlobalPosition", _wrap_ofNode_setGlobalPosition);
    SWIGV8_AddMemberFunction(_ofNode_class, "setOrientation", _wrap_ofNode_setOrientation);
    SWIGV8_AddMemberFunction(_ofNode_class, "setGlobalOrientation", _wrap_ofNode_setGlobalOrientation);
    SWIGV8_AddMemberFunction(_ofNode_class, "setScale", _wrap_ofNode_setScale);
    SWIGV8_AddMemberFunction(_ofNode_class, "move", _wrap_ofNode_move);
    SWIGV8_AddMemberFunction(_ofNode_class, "truck", _wrap_ofNode_truck);
    SWIGV8_AddMemberFunction(_ofNode_class, "boom", _wrap_ofNode_boom);
    SWIGV8_AddMemberFunction(_ofNode_class, "dolly", _wrap_ofNode_dolly);
    SWIGV8_AddMemberFunction(_ofNode_class, "tilt", _wrap_ofNode_tilt);
    SWIGV8_AddMemberFunction(_ofNode_class, "pan", _wrap_ofNode_pan);
    SWIGV8_AddMemberFunction(_ofNode_class, "roll", _wrap_ofNode_roll);
    SWIGV8_AddMemberFunction(_ofNode_class, "rotate", _wrap_ofNode_rotate);
    SWIGV8_AddMemberFunction(_ofNode_class, "rotateAround", _wrap_ofNode_rotateAround);
    SWIGV8_AddMemberFunction(_ofNode_class, "lookAt", _wrap_ofNode_lookAt);
    SWIGV8_AddMemberFunction(_ofNode_class, "orbit", _wrap_ofNode_orbit);
    SWIGV8_AddMemberFunction(_ofNode_class, "transformGL", _wrap_ofNode_transformGL);
    SWIGV8_AddMemberFunction(_ofNode_class, "restoreTransformGL", _wrap_ofNode_restoreTransformGL);
    SWIGV8_AddMemberFunction(_ofNode_class, "resetTransform", _wrap_ofNode_resetTransform);
    SWIGV8_AddMemberFunction(_ofNode_class, "customDraw", _wrap_ofNode_customDraw);
    SWIGV8_AddMemberFunction(_ofNode_class, "draw", _wrap_ofNode_draw);
    SWIGV8_AddMemberFunction(_ofCamera_class, "setFov", _wrap_ofCamera_setFov);
    SWIGV8_AddMemberFunction(_ofCamera_class, "setNearClip", _wrap_ofCamera_setNearClip);
    SWIGV8_AddMemberFunction(_ofCamera_class, "setFarClip", _wrap_ofCamera_setFarClip);
    SWIGV8_AddMemberFunction(_ofCamera_class, "setLensOffset", _wrap_ofCamera_setLensOffset);
    SWIGV8_AddMemberFunction(_ofCamera_class, "setAspectRatio", _wrap_ofCamera_setAspectRatio);
    SWIGV8_AddMemberFunction(_ofCamera_class, "setForceAspectRatio", _wrap_ofCamera_setForceAspectRatio);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getFov", _wrap_ofCamera_getFov);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getNearClip", _wrap_ofCamera_getNearClip);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getFarClip", _wrap_ofCamera_getFarClip);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getLensOffset", _wrap_ofCamera_getLensOffset);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getForceAspectRatio", _wrap_ofCamera_getForceAspectRatio);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getAspectRatio", _wrap_ofCamera_getAspectRatio);
    SWIGV8_AddMemberFunction(_ofCamera_class, "setupPerspective", _wrap_ofCamera_setupPerspective);
    SWIGV8_AddMemberFunction(_ofCamera_class, "setupOffAxisViewPortal", _wrap_ofCamera_setupOffAxisViewPortal);
    SWIGV8_AddMemberFunction(_ofCamera_class, "enableOrtho", _wrap_ofCamera_enableOrtho);
    SWIGV8_AddMemberFunction(_ofCamera_class, "disableOrtho", _wrap_ofCamera_disableOrtho);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getOrtho", _wrap_ofCamera_getOrtho);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getImagePlaneDistance", _wrap_ofCamera_getImagePlaneDistance);
    SWIGV8_AddMemberFunction(_ofCamera_class, "begin", _wrap_ofCamera_begin);
    SWIGV8_AddMemberFunction(_ofCamera_class, "end_", _wrap_ofCamera_end_);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getProjectionMatrix", _wrap_ofCamera_getProjectionMatrix);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getModelViewMatrix", _wrap_ofCamera_getModelViewMatrix);
    SWIGV8_AddMemberFunction(_ofCamera_class, "getModelViewProjectionMatrix", _wrap_ofCamera_getModelViewProjectionMatrix);
    SWIGV8_AddMemberFunction(_ofCamera_class, "worldToScreen", _wrap_ofCamera_worldToScreen);
    SWIGV8_AddMemberFunction(_ofCamera_class, "screenToWorld", _wrap_ofCamera_screenToWorld);
    SWIGV8_AddMemberFunction(_ofCamera_class, "worldToCamera", _wrap_ofCamera_worldToCamera);
    SWIGV8_AddMemberFunction(_ofCamera_class, "cameraToWorld", _wrap_ofCamera_cameraToWorld);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "begin", _wrap_ofEasyCam_begin);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "reset", _wrap_ofEasyCam_reset);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "setTarget", _wrap_ofEasyCam_setTarget);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "getTarget", _wrap_ofEasyCam_getTarget);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "setDistance", _wrap_ofEasyCam_setDistance);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "getDistance", _wrap_ofEasyCam_getDistance);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "setDrag", _wrap_ofEasyCam_setDrag);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "getDrag", _wrap_ofEasyCam_getDrag);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "setTranslationKey", _wrap_ofEasyCam_setTranslationKey);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "getTranslationKey", _wrap_ofEasyCam_getTranslationKey);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "enableMouseInput", _wrap_ofEasyCam_enableMouseInput);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "disableMouseInput", _wrap_ofEasyCam_disableMouseInput);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "getMouseInputEnabled", _wrap_ofEasyCam_getMouseInputEnabled);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "enableMouseMiddleButton", _wrap_ofEasyCam_enableMouseMiddleButton);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "disableMouseMiddleButton", _wrap_ofEasyCam_disableMouseMiddleButton);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "getMouseMiddleButtonEnabled", _wrap_ofEasyCam_getMouseMiddleButtonEnabled);
    SWIGV8_AddMemberFunction(_ofEasyCam_class, "setAutoDistance", _wrap_ofEasyCam_setAutoDistance);
    SWIGV8_AddMemberFunction(_ofMesh_class, "setMode", _wrap_ofMesh_setMode);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getMode", _wrap_ofMesh_getMode);
    SWIGV8_AddMemberFunction(_ofMesh_class, "clear", _wrap_ofMesh_clear);
    SWIGV8_AddMemberFunction(_ofMesh_class, "setupIndicesAuto", _wrap_ofMesh_setupIndicesAuto);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getVertex", _wrap_ofMesh_getVertex);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addVertex", _wrap_ofMesh_addVertex);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addVertices", _wrap_ofMesh_addVertices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "removeVertex", _wrap_ofMesh_removeVertex);
    SWIGV8_AddMemberFunction(_ofMesh_class, "setVertex", _wrap_ofMesh_setVertex);
    SWIGV8_AddMemberFunction(_ofMesh_class, "clearVertices", _wrap_ofMesh_clearVertices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getNormal", _wrap_ofMesh_getNormal);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addNormal", _wrap_ofMesh_addNormal);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addNormals", _wrap_ofMesh_addNormals);
    SWIGV8_AddMemberFunction(_ofMesh_class, "removeNormal", _wrap_ofMesh_removeNormal);
    SWIGV8_AddMemberFunction(_ofMesh_class, "setNormal", _wrap_ofMesh_setNormal);
    SWIGV8_AddMemberFunction(_ofMesh_class, "clearNormals", _wrap_ofMesh_clearNormals);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getColor", _wrap_ofMesh_getColor);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addColor", _wrap_ofMesh_addColor);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addColors", _wrap_ofMesh_addColors);
    SWIGV8_AddMemberFunction(_ofMesh_class, "removeColor", _wrap_ofMesh_removeColor);
    SWIGV8_AddMemberFunction(_ofMesh_class, "setColor", _wrap_ofMesh_setColor);
    SWIGV8_AddMemberFunction(_ofMesh_class, "clearColors", _wrap_ofMesh_clearColors);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getTexCoord", _wrap_ofMesh_getTexCoord);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addTexCoord", _wrap_ofMesh_addTexCoord);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addTexCoords", _wrap_ofMesh_addTexCoords);
    SWIGV8_AddMemberFunction(_ofMesh_class, "removeTexCoord", _wrap_ofMesh_removeTexCoord);
    SWIGV8_AddMemberFunction(_ofMesh_class, "setTexCoord", _wrap_ofMesh_setTexCoord);
    SWIGV8_AddMemberFunction(_ofMesh_class, "clearTexCoords", _wrap_ofMesh_clearTexCoords);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getIndex", _wrap_ofMesh_getIndex);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addIndex", _wrap_ofMesh_addIndex);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addIndices", _wrap_ofMesh_addIndices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "removeIndex", _wrap_ofMesh_removeIndex);
    SWIGV8_AddMemberFunction(_ofMesh_class, "setIndex", _wrap_ofMesh_setIndex);
    SWIGV8_AddMemberFunction(_ofMesh_class, "clearIndices", _wrap_ofMesh_clearIndices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "addTriangle", _wrap_ofMesh_addTriangle);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getNumVertices", _wrap_ofMesh_getNumVertices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getNumColors", _wrap_ofMesh_getNumColors);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getNumNormals", _wrap_ofMesh_getNumNormals);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getNumTexCoords", _wrap_ofMesh_getNumTexCoords);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getNumIndices", _wrap_ofMesh_getNumIndices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getVerticesPointer", _wrap_ofMesh_getVerticesPointer);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getColorsPointer", _wrap_ofMesh_getColorsPointer);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getNormalsPointer", _wrap_ofMesh_getNormalsPointer);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getTexCoordsPointer", _wrap_ofMesh_getTexCoordsPointer);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getIndexPointer", _wrap_ofMesh_getIndexPointer);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getVertices", _wrap_ofMesh_getVertices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getColors", _wrap_ofMesh_getColors);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getNormals", _wrap_ofMesh_getNormals);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getTexCoords", _wrap_ofMesh_getTexCoords);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getIndices", _wrap_ofMesh_getIndices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "getCentroid", _wrap_ofMesh_getCentroid);
    SWIGV8_AddMemberFunction(_ofMesh_class, "setName", _wrap_ofMesh_setName);
    SWIGV8_AddMemberFunction(_ofMesh_class, "haveVertsChanged", _wrap_ofMesh_haveVertsChanged);
    SWIGV8_AddMemberFunction(_ofMesh_class, "haveColorsChanged", _wrap_ofMesh_haveColorsChanged);
    SWIGV8_AddMemberFunction(_ofMesh_class, "haveNormalsChanged", _wrap_ofMesh_haveNormalsChanged);
    SWIGV8_AddMemberFunction(_ofMesh_class, "haveTexCoordsChanged", _wrap_ofMesh_haveTexCoordsChanged);
    SWIGV8_AddMemberFunction(_ofMesh_class, "haveIndicesChanged", _wrap_ofMesh_haveIndicesChanged);
    SWIGV8_AddMemberFunction(_ofMesh_class, "hasVertices", _wrap_ofMesh_hasVertices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "hasColors", _wrap_ofMesh_hasColors);
    SWIGV8_AddMemberFunction(_ofMesh_class, "hasNormals", _wrap_ofMesh_hasNormals);
    SWIGV8_AddMemberFunction(_ofMesh_class, "hasTexCoords", _wrap_ofMesh_hasTexCoords);
    SWIGV8_AddMemberFunction(_ofMesh_class, "hasIndices", _wrap_ofMesh_hasIndices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "drawVertices", _wrap_ofMesh_drawVertices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "drawWireframe", _wrap_ofMesh_drawWireframe);
    SWIGV8_AddMemberFunction(_ofMesh_class, "drawFaces", _wrap_ofMesh_drawFaces);
    SWIGV8_AddMemberFunction(_ofMesh_class, "draw", _wrap_ofMesh_draw);
    SWIGV8_AddMemberFunction(_ofMesh_class, "load", _wrap_ofMesh_load);
    SWIGV8_AddMemberFunction(_ofMesh_class, "save", _wrap_ofMesh_save);
    SWIGV8_AddMemberFunction(_ofMesh_class, "enableColors", _wrap_ofMesh_enableColors);
    SWIGV8_AddMemberFunction(_ofMesh_class, "enableTextures", _wrap_ofMesh_enableTextures);
    SWIGV8_AddMemberFunction(_ofMesh_class, "enableNormals", _wrap_ofMesh_enableNormals);
    SWIGV8_AddMemberFunction(_ofMesh_class, "enableIndices", _wrap_ofMesh_enableIndices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "disableColors", _wrap_ofMesh_disableColors);
    SWIGV8_AddMemberFunction(_ofMesh_class, "disableTextures", _wrap_ofMesh_disableTextures);
    SWIGV8_AddMemberFunction(_ofMesh_class, "disableNormals", _wrap_ofMesh_disableNormals);
    SWIGV8_AddMemberFunction(_ofMesh_class, "disableIndices", _wrap_ofMesh_disableIndices);
    SWIGV8_AddMemberFunction(_ofMesh_class, "usingColors", _wrap_ofMesh_usingColors);
    SWIGV8_AddMemberFunction(_ofMesh_class, "usingTextures", _wrap_ofMesh_usingTextures);
    SWIGV8_AddMemberFunction(_ofMesh_class, "usingNormals", _wrap_ofMesh_usingNormals);
    SWIGV8_AddMemberFunction(_ofMesh_class, "usingIndices", _wrap_ofMesh_usingIndices);
    SWIGV8_AddMemberFunction(_ofFbo_class, "allocate", _wrap_ofFbo_allocate);
    SWIGV8_AddMemberFunction(_ofFbo_class, "isAllocated", _wrap_ofFbo_isAllocated);
    SWIGV8_AddMemberFunction(_ofFbo_class, "draw", _wrap_ofFbo_draw);
    SWIGV8_AddMemberFunction(_ofFbo_class, "setAnchorPercent", _wrap_ofFbo_setAnchorPercent);
    SWIGV8_AddMemberFunction(_ofFbo_class, "setAnchorPoint", _wrap_ofFbo_setAnchorPoint);
    SWIGV8_AddMemberFunction(_ofFbo_class, "resetAnchor", _wrap_ofFbo_resetAnchor);
    SWIGV8_AddMemberFunction(_ofFbo_class, "setDefaultTextureIndex", _wrap_ofFbo_setDefaultTextureIndex);
    SWIGV8_AddMemberFunction(_ofFbo_class, "getDefaultTextureIndex", _wrap_ofFbo_getDefaultTextureIndex);
    SWIGV8_AddMemberFunction(_ofFbo_class, "getTextureReference", _wrap_ofFbo_getTextureReference);
    SWIGV8_AddMemberFunction(_ofFbo_class, "getDepthTexture", _wrap_ofFbo_getDepthTexture);
    SWIGV8_AddMemberFunction(_ofFbo_class, "setUseTexture", _wrap_ofFbo_setUseTexture);
    SWIGV8_AddMemberFunction(_ofFbo_class, "begin", _wrap_ofFbo_begin);
    SWIGV8_AddMemberFunction(_ofFbo_class, "end_", _wrap_ofFbo_end_);
    SWIGV8_AddMemberFunction(_ofFbo_class, "readToPixels", _wrap_ofFbo_readToPixels);
    SWIGV8_AddMemberFunction(_ofFbo_class, "getWidth", _wrap_ofFbo_getWidth);
    SWIGV8_AddMemberFunction(_ofFbo_class, "getHeight", _wrap_ofFbo_getHeight);
    SWIGV8_AddMemberFunction(_ofFbo_class, "bind", _wrap_ofFbo_bind);
    SWIGV8_AddMemberFunction(_ofFbo_class, "unbind", _wrap_ofFbo_unbind);
    SWIGV8_AddMemberFunction(_ofFbo_class, "getNumTextures", _wrap_ofFbo_getNumTextures);
    SWIGV8_AddMemberFunction(_ofFbo_class, "setActiveDrawBuffer", _wrap_ofFbo_setActiveDrawBuffer);
    SWIGV8_AddMemberFunction(_ofFbo_class, "setActiveDrawBuffers", _wrap_ofFbo_setActiveDrawBuffers);
    SWIGV8_AddMemberFunction(_ofFbo_class, "activateAllDrawBuffers", _wrap_ofFbo_activateAllDrawBuffers);
    SWIGV8_AddMemberFunction(_ofFbo_class, "getFbo", _wrap_ofFbo_getFbo);
    SWIGV8_AddMemberFunction(_ofFbo_class, "getDepthBuffer", _wrap_ofFbo_getDepthBuffer);
    SWIGV8_AddMemberFunction(_ofFbo_class, "getStencilBuffer", _wrap_ofFbo_getStencilBuffer);
    SWIGV8_AddStaticVariable(of_obj, "OF_PRIMITIVE_TRIANGLES", _wrap_OF_PRIMITIVE_TRIANGLES, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PRIMITIVE_TRIANGLE_STRIP", _wrap_OF_PRIMITIVE_TRIANGLE_STRIP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PRIMITIVE_TRIANGLE_FAN", _wrap_OF_PRIMITIVE_TRIANGLE_FAN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PRIMITIVE_LINES", _wrap_OF_PRIMITIVE_LINES, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PRIMITIVE_LINE_STRIP", _wrap_OF_PRIMITIVE_LINE_STRIP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PRIMITIVE_LINE_LOOP", _wrap_OF_PRIMITIVE_LINE_LOOP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PRIMITIVE_POINTS", _wrap_OF_PRIMITIVE_POINTS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TRIANGLES_MODE", _wrap_OF_TRIANGLES_MODE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TRIANGLE_STRIP_MODE", _wrap_OF_TRIANGLE_STRIP_MODE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TRIANGLE_FAN_MODE", _wrap_OF_TRIANGLE_FAN_MODE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LINES_MODE", _wrap_OF_LINES_MODE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LINE_STRIP_MODE", _wrap_OF_LINE_STRIP_MODE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LINE_LOOP_MODE", _wrap_OF_LINE_LOOP_MODE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_POINTS_MODE", _wrap_OF_POINTS_MODE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MESH_POINTS", _wrap_OF_MESH_POINTS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MESH_WIREFRAME", _wrap_OF_MESH_WIREFRAME, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MESH_FILL", _wrap_OF_MESH_FILL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MAX_LIGHTS", _wrap_OF_MAX_LIGHTS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LIGHT_POINT", _wrap_OF_LIGHT_POINT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LIGHT_SPOT", _wrap_OF_LIGHT_SPOT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LIGHT_DIRECTIONAL", _wrap_OF_LIGHT_DIRECTIONAL, JS_veto_set_variable);
    SWIGV8_AddMemberFunction(_ofLight_class, "destroy", _wrap_ofLight_destroy);
    SWIGV8_AddMemberFunction(_ofLight_class, "setup", _wrap_ofLight_setup);
    SWIGV8_AddMemberFunction(_ofLight_class, "enable", _wrap_ofLight_enable);
    SWIGV8_AddMemberFunction(_ofLight_class, "disable", _wrap_ofLight_disable);
    SWIGV8_AddMemberFunction(_ofLight_class, "getIsEnabled", _wrap_ofLight_getIsEnabled);
    SWIGV8_AddMemberFunction(_ofLight_class, "setDirectional", _wrap_ofLight_setDirectional);
    SWIGV8_AddMemberFunction(_ofLight_class, "getIsDirectional", _wrap_ofLight_getIsDirectional);
    SWIGV8_AddMemberFunction(_ofLight_class, "setSpotlight", _wrap_ofLight_setSpotlight);
    SWIGV8_AddMemberFunction(_ofLight_class, "getIsSpotlight", _wrap_ofLight_getIsSpotlight);
    SWIGV8_AddMemberFunction(_ofLight_class, "setSpotlightCutOff", _wrap_ofLight_setSpotlightCutOff);
    SWIGV8_AddMemberFunction(_ofLight_class, "getSpotlightCutOff", _wrap_ofLight_getSpotlightCutOff);
    SWIGV8_AddMemberFunction(_ofLight_class, "setSpotConcentration", _wrap_ofLight_setSpotConcentration);
    SWIGV8_AddMemberFunction(_ofLight_class, "getSpotConcentration", _wrap_ofLight_getSpotConcentration);
    SWIGV8_AddMemberFunction(_ofLight_class, "setPointLight", _wrap_ofLight_setPointLight);
    SWIGV8_AddMemberFunction(_ofLight_class, "getIsPointLight", _wrap_ofLight_getIsPointLight);
    SWIGV8_AddMemberFunction(_ofLight_class, "setAttenuation", _wrap_ofLight_setAttenuation);
    SWIGV8_AddMemberFunction(_ofLight_class, "getAttenuationConstant", _wrap_ofLight_getAttenuationConstant);
    SWIGV8_AddMemberFunction(_ofLight_class, "getAttenuationLinear", _wrap_ofLight_getAttenuationLinear);
    SWIGV8_AddMemberFunction(_ofLight_class, "getAttenuationQuadratic", _wrap_ofLight_getAttenuationQuadratic);
    SWIGV8_AddMemberFunction(_ofLight_class, "getType", _wrap_ofLight_getType);
    SWIGV8_AddMemberFunction(_ofLight_class, "setAmbientColor", _wrap_ofLight_setAmbientColor);
    SWIGV8_AddMemberFunction(_ofLight_class, "setDiffuseColor", _wrap_ofLight_setDiffuseColor);
    SWIGV8_AddMemberFunction(_ofLight_class, "setSpecularColor", _wrap_ofLight_setSpecularColor);
    SWIGV8_AddMemberFunction(_ofLight_class, "getAmbientColor", _wrap_ofLight_getAmbientColor);
    SWIGV8_AddMemberFunction(_ofLight_class, "getDiffuseColor", _wrap_ofLight_getDiffuseColor);
    SWIGV8_AddMemberFunction(_ofLight_class, "getSpecularColor", _wrap_ofLight_getSpecularColor);
    SWIGV8_AddMemberFunction(_ofLight_class, "getLightID", _wrap_ofLight_getLightID);
    SWIGV8_AddMemberFunction(_ofLight_class, "customDraw", _wrap_ofLight_customDraw);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "setColors", _wrap_ofMaterial_setColors);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "setDiffuseColor", _wrap_ofMaterial_setDiffuseColor);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "setAmbientColor", _wrap_ofMaterial_setAmbientColor);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "setSpecularColor", _wrap_ofMaterial_setSpecularColor);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "setEmissiveColor", _wrap_ofMaterial_setEmissiveColor);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "setShininess", _wrap_ofMaterial_setShininess);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "getDiffuseColor", _wrap_ofMaterial_getDiffuseColor);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "getAmbientColor", _wrap_ofMaterial_getAmbientColor);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "getSpecularColor", _wrap_ofMaterial_getSpecularColor);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "getEmissiveColor", _wrap_ofMaterial_getEmissiveColor);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "getShininess", _wrap_ofMaterial_getShininess);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "begin", _wrap_ofMaterial_begin);
    SWIGV8_AddMemberFunction(_ofMaterial_class, "end_", _wrap_ofMaterial_end_);
    SWIGV8_AddMemberFunction(_ofShader_class, "load", _wrap_ofShader_load);
    SWIGV8_AddMemberFunction(_ofShader_class, "setGeometryInputType", _wrap_ofShader_setGeometryInputType);
    SWIGV8_AddMemberFunction(_ofShader_class, "setGeometryOutputType", _wrap_ofShader_setGeometryOutputType);
    SWIGV8_AddMemberFunction(_ofShader_class, "setGeometryOutputCount", _wrap_ofShader_setGeometryOutputCount);
    SWIGV8_AddMemberFunction(_ofShader_class, "getGeometryMaxOutputCount", _wrap_ofShader_getGeometryMaxOutputCount);
    SWIGV8_AddMemberFunction(_ofShader_class, "unload", _wrap_ofShader_unload);
    SWIGV8_AddMemberFunction(_ofShader_class, "begin", _wrap_ofShader_begin);
    SWIGV8_AddMemberFunction(_ofShader_class, "end_", _wrap_ofShader_end_);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniformTexture", _wrap_ofShader_setUniformTexture);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform1i", _wrap_ofShader_setUniform1i);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform2i", _wrap_ofShader_setUniform2i);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform3i", _wrap_ofShader_setUniform3i);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform4i", _wrap_ofShader_setUniform4i);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform1f", _wrap_ofShader_setUniform1f);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform2f", _wrap_ofShader_setUniform2f);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform3f", _wrap_ofShader_setUniform3f);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform4f", _wrap_ofShader_setUniform4f);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform1iv", _wrap_ofShader_setUniform1iv);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform2iv", _wrap_ofShader_setUniform2iv);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform3iv", _wrap_ofShader_setUniform3iv);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform4iv", _wrap_ofShader_setUniform4iv);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform1fv", _wrap_ofShader_setUniform1fv);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform2fv", _wrap_ofShader_setUniform2fv);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform3fv", _wrap_ofShader_setUniform3fv);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniform4fv", _wrap_ofShader_setUniform4fv);
    SWIGV8_AddMemberFunction(_ofShader_class, "setUniformMatrix4f", _wrap_ofShader_setUniformMatrix4f);
    SWIGV8_AddMemberFunction(_ofShader_class, "getAttributeLocation", _wrap_ofShader_getAttributeLocation);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute1s", _wrap_ofShader_setAttribute1s);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute2s", _wrap_ofShader_setAttribute2s);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute3s", _wrap_ofShader_setAttribute3s);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute4s", _wrap_ofShader_setAttribute4s);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute1f", _wrap_ofShader_setAttribute1f);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute2f", _wrap_ofShader_setAttribute2f);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute3f", _wrap_ofShader_setAttribute3f);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute4f", _wrap_ofShader_setAttribute4f);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute1d", _wrap_ofShader_setAttribute1d);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute2d", _wrap_ofShader_setAttribute2d);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute3d", _wrap_ofShader_setAttribute3d);
    SWIGV8_AddMemberFunction(_ofShader_class, "setAttribute4d", _wrap_ofShader_setAttribute4d);
    SWIGV8_AddMemberFunction(_ofShader_class, "printActiveUniforms", _wrap_ofShader_printActiveUniforms);
    SWIGV8_AddMemberFunction(_ofShader_class, "printActiveAttributes", _wrap_ofShader_printActiveAttributes);
    SWIGV8_AddMemberFunction(_ofShader_class, "setupShaderFromSource", _wrap_ofShader_setupShaderFromSource);
    SWIGV8_AddMemberFunction(_ofShader_class, "setupShaderFromFile", _wrap_ofShader_setupShaderFromFile);
    SWIGV8_AddMemberFunction(_ofShader_class, "linkProgram", _wrap_ofShader_linkProgram);
    SWIGV8_AddMemberFunction(_ofShader_class, "getProgram", _wrap_ofShader_getProgram);
    SWIGV8_AddMemberFunction(_ofShader_class, "getShader", _wrap_ofShader_getShader);
    SWIGV8_AddStaticVariable(of_obj, "OF_COMPRESS_NONE", _wrap_OF_COMPRESS_NONE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_COMPRESS_SRGB", _wrap_OF_COMPRESS_SRGB, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_COMPRESS_ARB", _wrap_OF_COMPRESS_ARB, JS_veto_set_variable);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "textureID", _wrap_ofTextureData_textureID_get, _wrap_ofTextureData_textureID_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "textureTarget", _wrap_ofTextureData_textureTarget_get, _wrap_ofTextureData_textureTarget_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "glTypeInternal", _wrap_ofTextureData_glTypeInternal_get, _wrap_ofTextureData_glTypeInternal_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "glType", _wrap_ofTextureData_glType_get, _wrap_ofTextureData_glType_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "pixelType", _wrap_ofTextureData_pixelType_get, _wrap_ofTextureData_pixelType_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "tex_t", _wrap_ofTextureData_tex_t_get, _wrap_ofTextureData_tex_t_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "tex_u", _wrap_ofTextureData_tex_u_get, _wrap_ofTextureData_tex_u_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "tex_w", _wrap_ofTextureData_tex_w_get, _wrap_ofTextureData_tex_w_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "tex_h", _wrap_ofTextureData_tex_h_get, _wrap_ofTextureData_tex_h_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "width", _wrap_ofTextureData_width_get, _wrap_ofTextureData_width_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "height", _wrap_ofTextureData_height_get, _wrap_ofTextureData_height_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "bFlipTexture", _wrap_ofTextureData_bFlipTexture_get, _wrap_ofTextureData_bFlipTexture_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "compressionType", _wrap_ofTextureData_compressionType_get, _wrap_ofTextureData_compressionType_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "bAllocated", _wrap_ofTextureData_bAllocated_get, _wrap_ofTextureData_bAllocated_set);
    SWIGV8_AddMemberVariable(_ofTextureData_class, "bUseExternalTextureID", _wrap_ofTextureData_bUseExternalTextureID_get, _wrap_ofTextureData_bUseExternalTextureID_set);
    SWIGV8_AddMemberFunction(_ofTexture_class, "allocate", _wrap_ofTexture_allocate);
    SWIGV8_AddMemberFunction(_ofTexture_class, "clear", _wrap_ofTexture_clear);
    SWIGV8_AddMemberFunction(_ofTexture_class, "setUseExternalTextureID", _wrap_ofTexture_setUseExternalTextureID);
    SWIGV8_AddMemberFunction(_ofTexture_class, "loadData", _wrap_ofTexture_loadData);
    SWIGV8_AddMemberFunction(_ofTexture_class, "loadScreenData", _wrap_ofTexture_loadScreenData);
    SWIGV8_AddMemberFunction(_ofTexture_class, "setAnchorPercent", _wrap_ofTexture_setAnchorPercent);
    SWIGV8_AddMemberFunction(_ofTexture_class, "setAnchorPoint", _wrap_ofTexture_setAnchorPoint);
    SWIGV8_AddMemberFunction(_ofTexture_class, "resetAnchor", _wrap_ofTexture_resetAnchor);
    SWIGV8_AddMemberFunction(_ofTexture_class, "draw", _wrap_ofTexture_draw);
    SWIGV8_AddMemberFunction(_ofTexture_class, "drawSubsection", _wrap_ofTexture_drawSubsection);
    SWIGV8_AddMemberFunction(_ofTexture_class, "readToPixels", _wrap_ofTexture_readToPixels);
    SWIGV8_AddMemberFunction(_ofTexture_class, "bind", _wrap_ofTexture_bind);
    SWIGV8_AddMemberFunction(_ofTexture_class, "unbind", _wrap_ofTexture_unbind);
    SWIGV8_AddMemberFunction(_ofTexture_class, "getCoordFromPoint", _wrap_ofTexture_getCoordFromPoint);
    SWIGV8_AddMemberFunction(_ofTexture_class, "getCoordFromPercent", _wrap_ofTexture_getCoordFromPercent);
    SWIGV8_AddMemberFunction(_ofTexture_class, "setTextureWrap", _wrap_ofTexture_setTextureWrap);
    SWIGV8_AddMemberFunction(_ofTexture_class, "setTextureMinMagFilter", _wrap_ofTexture_setTextureMinMagFilter);
    SWIGV8_AddMemberFunction(_ofTexture_class, "setCompression", _wrap_ofTexture_setCompression);
    SWIGV8_AddMemberFunction(_ofTexture_class, "bAllocated", _wrap_ofTexture_bAllocated);
    SWIGV8_AddMemberFunction(_ofTexture_class, "isAllocated", _wrap_ofTexture_isAllocated);
    SWIGV8_AddMemberFunction(_ofTexture_class, "getTextureData", _wrap_ofTexture_getTextureData);
    SWIGV8_AddMemberVariable(_ofTexture_class, "texData", _wrap_ofTexture_texData_get, _wrap_ofTexture_texData_set);
    SWIGV8_AddMemberFunction(_ofTexture_class, "getHeight", _wrap_ofTexture_getHeight);
    SWIGV8_AddMemberFunction(_ofTexture_class, "getWidth", _wrap_ofTexture_getWidth);
    SWIGV8_AddMemberFunction(_ofVbo_class, "setMesh", _wrap_ofVbo_setMesh);
    SWIGV8_AddMemberFunction(_ofVbo_class, "setIndexData", _wrap_ofVbo_setIndexData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "setVertexData", _wrap_ofVbo_setVertexData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "setColorData", _wrap_ofVbo_setColorData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "setNormalData", _wrap_ofVbo_setNormalData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "setTexCoordData", _wrap_ofVbo_setTexCoordData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "updateMesh", _wrap_ofVbo_updateMesh);
    SWIGV8_AddMemberFunction(_ofVbo_class, "updateIndexData", _wrap_ofVbo_updateIndexData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "updateVertexData", _wrap_ofVbo_updateVertexData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "updateColorData", _wrap_ofVbo_updateColorData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "updateNormalData", _wrap_ofVbo_updateNormalData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "updateTexCoordData", _wrap_ofVbo_updateTexCoordData);
    SWIGV8_AddMemberFunction(_ofVbo_class, "enableColors", _wrap_ofVbo_enableColors);
    SWIGV8_AddMemberFunction(_ofVbo_class, "enableNormals", _wrap_ofVbo_enableNormals);
    SWIGV8_AddMemberFunction(_ofVbo_class, "enableTexCoords", _wrap_ofVbo_enableTexCoords);
    SWIGV8_AddMemberFunction(_ofVbo_class, "enableIndices", _wrap_ofVbo_enableIndices);
    SWIGV8_AddMemberFunction(_ofVbo_class, "disableColors", _wrap_ofVbo_disableColors);
    SWIGV8_AddMemberFunction(_ofVbo_class, "disableNormals", _wrap_ofVbo_disableNormals);
    SWIGV8_AddMemberFunction(_ofVbo_class, "disableTexCoords", _wrap_ofVbo_disableTexCoords);
    SWIGV8_AddMemberFunction(_ofVbo_class, "disableIndices", _wrap_ofVbo_disableIndices);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getVertId", _wrap_ofVbo_getVertId);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getColorId", _wrap_ofVbo_getColorId);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getNormalId", _wrap_ofVbo_getNormalId);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getTexCoordId", _wrap_ofVbo_getTexCoordId);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getIndexId", _wrap_ofVbo_getIndexId);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getIsAllocated", _wrap_ofVbo_getIsAllocated);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getUsingVerts", _wrap_ofVbo_getUsingVerts);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getUsingColors", _wrap_ofVbo_getUsingColors);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getUsingNormals", _wrap_ofVbo_getUsingNormals);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getUsingTexCoords", _wrap_ofVbo_getUsingTexCoords);
    SWIGV8_AddMemberFunction(_ofVbo_class, "getUsingIndices", _wrap_ofVbo_getUsingIndices);
    SWIGV8_AddMemberFunction(_ofVbo_class, "draw", _wrap_ofVbo_draw);
    SWIGV8_AddMemberFunction(_ofVbo_class, "drawElements", _wrap_ofVbo_drawElements);
    SWIGV8_AddMemberFunction(_ofVbo_class, "bind", _wrap_ofVbo_bind);
    SWIGV8_AddMemberFunction(_ofVbo_class, "unbind", _wrap_ofVbo_unbind);
    SWIGV8_AddMemberFunction(_ofVbo_class, "clear", _wrap_ofVbo_clear);
    SWIGV8_AddMemberFunction(_ofVbo_class, "clearVertices", _wrap_ofVbo_clearVertices);
    SWIGV8_AddMemberFunction(_ofVbo_class, "clearNormals", _wrap_ofVbo_clearNormals);
    SWIGV8_AddMemberFunction(_ofVbo_class, "clearColors", _wrap_ofVbo_clearColors);
    SWIGV8_AddMemberFunction(_ofVbo_class, "clearTexCoords", _wrap_ofVbo_clearTexCoords);
    SWIGV8_AddMemberFunction(_ofVbo_class, "clearIndices", _wrap_ofVbo_clearIndices);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "draw", _wrap_ofVboMesh_draw);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "setUsage", _wrap_ofVboMesh_setUsage);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "enableColors", _wrap_ofVboMesh_enableColors);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "enableTextures", _wrap_ofVboMesh_enableTextures);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "enableNormals", _wrap_ofVboMesh_enableNormals);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "enableIndices", _wrap_ofVboMesh_enableIndices);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "disableColors", _wrap_ofVboMesh_disableColors);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "disableTextures", _wrap_ofVboMesh_disableTextures);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "disableNormals", _wrap_ofVboMesh_disableNormals);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "disableIndices", _wrap_ofVboMesh_disableIndices);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "usingColors", _wrap_ofVboMesh_usingColors);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "usingTextures", _wrap_ofVboMesh_usingTextures);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "usingNormals", _wrap_ofVboMesh_usingNormals);
    SWIGV8_AddMemberFunction(_ofVboMesh_class, "usingIndices", _wrap_ofVboMesh_usingIndices);
    SWIGV8_AddStaticVariable(of_obj, "CIRC_RESOLUTION", _wrap_CIRC_RESOLUTION, JS_veto_set_variable);
    SWIGV8_AddMemberFunction(_ofPath_class, "clear", _wrap_ofPath_clear);
    SWIGV8_AddMemberFunction(_ofPath_class, "newSubPath", _wrap_ofPath_newSubPath);
    SWIGV8_AddMemberFunction(_ofPath_class, "close", _wrap_ofPath_close);
    SWIGV8_AddMemberFunction(_ofPath_class, "lineTo", _wrap_ofPath_lineTo);
    SWIGV8_AddMemberFunction(_ofPath_class, "moveTo", _wrap_ofPath_moveTo);
    SWIGV8_AddMemberFunction(_ofPath_class, "curveTo", _wrap_ofPath_curveTo);
    SWIGV8_AddMemberFunction(_ofPath_class, "bezierTo", _wrap_ofPath_bezierTo);
    SWIGV8_AddMemberFunction(_ofPath_class, "quadBezierTo", _wrap_ofPath_quadBezierTo);
    SWIGV8_AddMemberFunction(_ofPath_class, "arc", _wrap_ofPath_arc);
    SWIGV8_AddMemberFunction(_ofPath_class, "arcNegative", _wrap_ofPath_arcNegative);
    SWIGV8_AddMemberFunction(_ofPath_class, "setPolyWindingMode", _wrap_ofPath_setPolyWindingMode);
    SWIGV8_AddMemberFunction(_ofPath_class, "setFilled", _wrap_ofPath_setFilled);
    SWIGV8_AddMemberFunction(_ofPath_class, "setStrokeWidth", _wrap_ofPath_setStrokeWidth);
    SWIGV8_AddMemberFunction(_ofPath_class, "setColor", _wrap_ofPath_setColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "setHexColor", _wrap_ofPath_setHexColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "setFillColor", _wrap_ofPath_setFillColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "setFillHexColor", _wrap_ofPath_setFillHexColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "setStrokeColor", _wrap_ofPath_setStrokeColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "setStrokeHexColor", _wrap_ofPath_setStrokeHexColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "getWindingMode", _wrap_ofPath_getWindingMode);
    SWIGV8_AddMemberFunction(_ofPath_class, "isFilled", _wrap_ofPath_isFilled);
    SWIGV8_AddMemberFunction(_ofPath_class, "getFillColor", _wrap_ofPath_getFillColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "getStrokeColor", _wrap_ofPath_getStrokeColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "getStrokeWidth", _wrap_ofPath_getStrokeWidth);
    SWIGV8_AddMemberFunction(_ofPath_class, "hasOutline", _wrap_ofPath_hasOutline);
    SWIGV8_AddMemberFunction(_ofPath_class, "draw", _wrap_ofPath_draw);
    SWIGV8_AddMemberFunction(_ofPath_class, "getSubPaths", _wrap_ofPath_getSubPaths);
    SWIGV8_AddMemberFunction(_ofPath_class, "getOutline", _wrap_ofPath_getOutline);
    SWIGV8_AddMemberFunction(_ofPath_class, "getTessellation", _wrap_ofPath_getTessellation);
    SWIGV8_AddMemberFunction(_ofPath_class, "simplify", _wrap_ofPath_simplify);
    SWIGV8_AddMemberFunction(_ofPath_class, "flagShapeChanged", _wrap_ofPath_flagShapeChanged);
    SWIGV8_AddMemberFunction(_ofPath_class, "setMode", _wrap_ofPath_setMode);
    SWIGV8_AddMemberFunction(_ofPath_class, "setCurveResolution", _wrap_ofPath_setCurveResolution);
    SWIGV8_AddMemberFunction(_ofPath_class, "getCurveResolution", _wrap_ofPath_getCurveResolution);
    SWIGV8_AddMemberFunction(_ofPath_class, "setArcResolution", _wrap_ofPath_setArcResolution);
    SWIGV8_AddMemberFunction(_ofPath_class, "getArcResolution", _wrap_ofPath_getArcResolution);
    SWIGV8_AddMemberFunction(_ofPath_class, "setUseShapeColor", _wrap_ofPath_setUseShapeColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "getUseShapeColor", _wrap_ofPath_getUseShapeColor);
    SWIGV8_AddMemberFunction(_ofPath_class, "tessellate", _wrap_ofPath_tessellate);
    SWIGV8_AddMemberFunction(_ofPath_class, "translate", _wrap_ofPath_translate);
    SWIGV8_AddMemberFunction(_ofPath_class, "rotate", _wrap_ofPath_rotate);
    SWIGV8_AddMemberFunction(_ofPath_class, "scale", _wrap_ofPath_scale);
    SWIGV8_AddMemberFunction(_ofSubPath_class, "getCommands", _wrap_ofSubPath_getCommands);
    SWIGV8_AddMemberFunction(_ofSubPath_class, "addCommand", _wrap_ofSubPath_addCommand);
    SWIGV8_AddMemberFunction(_ofSubPath_class, "close", _wrap_ofSubPath_close);
    SWIGV8_AddMemberFunction(_ofSubPath_class, "isClosed", _wrap_ofSubPath_isClosed);
    SWIGV8_AddMemberFunction(_ofSubPath_class, "size", _wrap_ofSubPath_size);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "clear", _wrap_ofPolyline_clear);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "addVertex", _wrap_ofPolyline_addVertex);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "addVertices", _wrap_ofPolyline_addVertices);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "addVertexes", _wrap_ofPolyline_addVertexes);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "lineTo", _wrap_ofPolyline_lineTo);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "arc", _wrap_ofPolyline_arc);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "arcNegative", _wrap_ofPolyline_arcNegative);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "curveTo", _wrap_ofPolyline_curveTo);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "bezierTo", _wrap_ofPolyline_bezierTo);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "quadBezierTo", _wrap_ofPolyline_quadBezierTo);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "getSmoothed", _wrap_ofPolyline_getSmoothed);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "getResampledBySpacing", _wrap_ofPolyline_getResampledBySpacing);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "getResampledByCount", _wrap_ofPolyline_getResampledByCount);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "getBoundingBox", _wrap_ofPolyline_getBoundingBox);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "getClosestPoint", _wrap_ofPolyline_getClosestPoint);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "inside", _wrap_ofPolyline_inside);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "simplify", _wrap_ofPolyline_simplify);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "size", _wrap_ofPolyline_size);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "resize", _wrap_ofPolyline_resize);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "setClosed", _wrap_ofPolyline_setClosed);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "isClosed", _wrap_ofPolyline_isClosed);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "close", _wrap_ofPolyline_close);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "hasChanged", _wrap_ofPolyline_hasChanged);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "getVertices", _wrap_ofPolyline_getVertices);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "getPerimeter", _wrap_ofPolyline_getPerimeter);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "getArea", _wrap_ofPolyline_getArea);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "getCentroid2D", _wrap_ofPolyline_getCentroid2D);
    SWIGV8_AddMemberFunction(_ofPolyline_class, "draw", _wrap_ofPolyline_draw);
    SWIGV8_AddMemberFunction(_ofTessellator_class, "tessellateToMesh", _wrap_ofTessellator_tessellateToMesh);
    SWIGV8_AddMemberFunction(_ofTessellator_class, "tessellateToPolylines", _wrap_ofTessellator_tessellateToPolylines);
    SWIGV8_AddMemberVariable(_charProps_class, "character", _wrap_charProps_character_get, _wrap_charProps_character_set);
    SWIGV8_AddMemberVariable(_charProps_class, "height", _wrap_charProps_height_get, _wrap_charProps_height_set);
    SWIGV8_AddMemberVariable(_charProps_class, "width", _wrap_charProps_width_get, _wrap_charProps_width_set);
    SWIGV8_AddMemberVariable(_charProps_class, "setWidth", _wrap_charProps_setWidth_get, _wrap_charProps_setWidth_set);
    SWIGV8_AddMemberVariable(_charProps_class, "topExtent", _wrap_charProps_topExtent_get, _wrap_charProps_topExtent_set);
    SWIGV8_AddMemberVariable(_charProps_class, "leftExtent", _wrap_charProps_leftExtent_get, _wrap_charProps_leftExtent_set);
    SWIGV8_AddMemberVariable(_charProps_class, "tW", _wrap_charProps_tW_get, _wrap_charProps_tW_set);
    SWIGV8_AddMemberVariable(_charProps_class, "tH", _wrap_charProps_tH_get, _wrap_charProps_tH_set);
    SWIGV8_AddMemberVariable(_charProps_class, "x1", _wrap_charProps_x1_get, _wrap_charProps_x1_set);
    SWIGV8_AddMemberVariable(_charProps_class, "x2", _wrap_charProps_x2_get, _wrap_charProps_x2_set);
    SWIGV8_AddMemberVariable(_charProps_class, "y1", _wrap_charProps_y1_get, _wrap_charProps_y1_set);
    SWIGV8_AddMemberVariable(_charProps_class, "y2", _wrap_charProps_y2_get, _wrap_charProps_y2_set);
    SWIGV8_AddMemberVariable(_charProps_class, "t1", _wrap_charProps_t1_get, _wrap_charProps_t1_set);
    SWIGV8_AddMemberVariable(_charProps_class, "t2", _wrap_charProps_t2_get, _wrap_charProps_t2_set);
    SWIGV8_AddMemberVariable(_charProps_class, "v1", _wrap_charProps_v1_get, _wrap_charProps_v1_set);
    SWIGV8_AddMemberVariable(_charProps_class, "v2", _wrap_charProps_v2_get, _wrap_charProps_v2_set);
    SWIGV8_AddStaticVariable(of_obj, "NUM_CHARACTER_TO_START", _wrap_NUM_CHARACTER_TO_START, JS_veto_set_variable);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "loadFont", _wrap_ofTrueTypeFont_loadFont);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "isLoaded", _wrap_ofTrueTypeFont_isLoaded);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "isAntiAliased", _wrap_ofTrueTypeFont_isAntiAliased);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "hasFullCharacterSet", _wrap_ofTrueTypeFont_hasFullCharacterSet);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "getSize", _wrap_ofTrueTypeFont_getSize);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "getLineHeight", _wrap_ofTrueTypeFont_getLineHeight);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "setLineHeight", _wrap_ofTrueTypeFont_setLineHeight);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "getLetterSpacing", _wrap_ofTrueTypeFont_getLetterSpacing);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "setLetterSpacing", _wrap_ofTrueTypeFont_setLetterSpacing);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "getSpaceSize", _wrap_ofTrueTypeFont_getSpaceSize);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "setSpaceSize", _wrap_ofTrueTypeFont_setSpaceSize);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "stringWidth", _wrap_ofTrueTypeFont_stringWidth);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "stringHeight", _wrap_ofTrueTypeFont_stringHeight);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "getStringBoundingBox", _wrap_ofTrueTypeFont_getStringBoundingBox);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "drawString", _wrap_ofTrueTypeFont_drawString);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "drawStringAsShapes", _wrap_ofTrueTypeFont_drawStringAsShapes);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "getNumCharacters", _wrap_ofTrueTypeFont_getNumCharacters);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "getCharacterAsPoints", _wrap_ofTrueTypeFont_getCharacterAsPoints);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "getStringAsPoints", _wrap_ofTrueTypeFont_getStringAsPoints);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "bind", _wrap_ofTrueTypeFont_bind);
    SWIGV8_AddMemberFunction(_ofTrueTypeFont_class, "unbind", _wrap_ofTrueTypeFont_unbind);
    SWIGV8_AddMemberVariable(_ofMatrix3x3_class, "a", _wrap_ofMatrix3x3_a_get, _wrap_ofMatrix3x3_a_set);
    SWIGV8_AddMemberVariable(_ofMatrix3x3_class, "b", _wrap_ofMatrix3x3_b_get, _wrap_ofMatrix3x3_b_set);
    SWIGV8_AddMemberVariable(_ofMatrix3x3_class, "c", _wrap_ofMatrix3x3_c_get, _wrap_ofMatrix3x3_c_set);
    SWIGV8_AddMemberVariable(_ofMatrix3x3_class, "d", _wrap_ofMatrix3x3_d_get, _wrap_ofMatrix3x3_d_set);
    SWIGV8_AddMemberVariable(_ofMatrix3x3_class, "e", _wrap_ofMatrix3x3_e_get, _wrap_ofMatrix3x3_e_set);
    SWIGV8_AddMemberVariable(_ofMatrix3x3_class, "f", _wrap_ofMatrix3x3_f_get, _wrap_ofMatrix3x3_f_set);
    SWIGV8_AddMemberVariable(_ofMatrix3x3_class, "g", _wrap_ofMatrix3x3_g_get, _wrap_ofMatrix3x3_g_set);
    SWIGV8_AddMemberVariable(_ofMatrix3x3_class, "h", _wrap_ofMatrix3x3_h_get, _wrap_ofMatrix3x3_h_set);
    SWIGV8_AddMemberVariable(_ofMatrix3x3_class, "i", _wrap_ofMatrix3x3_i_get, _wrap_ofMatrix3x3_i_set);
    SWIGV8_AddMemberFunction(_ofMatrix3x3_class, "set", _wrap_ofMatrix3x3_set);
    SWIGV8_AddMemberFunction(_ofMatrix3x3_class, "transpose", _wrap_ofMatrix3x3_transpose);
    SWIGV8_AddMemberFunction(_ofMatrix3x3_class, "determinant", _wrap_ofMatrix3x3_determinant);
    SWIGV8_AddMemberFunction(_ofMatrix3x3_class, "invert", _wrap_ofMatrix3x3_invert);
    SWIGV8_AddMemberFunction(_ofMatrix3x3_class, "inverse", _wrap_ofMatrix3x3_inverse);
    SWIGV8_AddMemberFunction(_ofMatrix3x3_class, "entrywiseTimes", _wrap_ofMatrix3x3_entrywiseTimes);
    SWIGV8_AddMemberVariable(_ofMatrix4x4_class, "_mat", _wrap_ofMatrix4x4__mat_get, _wrap_ofMatrix4x4__mat_set);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getRowAsVec3f", _wrap_ofMatrix4x4_getRowAsVec3f);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getRowAsVec4f", _wrap_ofMatrix4x4_getRowAsVec4f);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "isValid", _wrap_ofMatrix4x4_isValid);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "isNaN", _wrap_ofMatrix4x4_isNaN);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "set", _wrap_ofMatrix4x4_set);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getPtr", _wrap_ofMatrix4x4_getPtr);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "isIdentity", _wrap_ofMatrix4x4_isIdentity);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeIdentityMatrix", _wrap_ofMatrix4x4_makeIdentityMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeScaleMatrix", _wrap_ofMatrix4x4_makeScaleMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeTranslationMatrix", _wrap_ofMatrix4x4_makeTranslationMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeRotationMatrix", _wrap_ofMatrix4x4_makeRotationMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeInvertOf", _wrap_ofMatrix4x4_makeInvertOf);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeOrthoNormalOf", _wrap_ofMatrix4x4_makeOrthoNormalOf);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeFromMultiplicationOf", _wrap_ofMatrix4x4_makeFromMultiplicationOf);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getInverse", _wrap_ofMatrix4x4_getInverse);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeOrthoMatrix", _wrap_ofMatrix4x4_makeOrthoMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeOrtho2DMatrix", _wrap_ofMatrix4x4_makeOrtho2DMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeFrustumMatrix", _wrap_ofMatrix4x4_makeFrustumMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makePerspectiveMatrix", _wrap_ofMatrix4x4_makePerspectiveMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeLookAtMatrix", _wrap_ofMatrix4x4_makeLookAtMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "makeLookAtViewMatrix", _wrap_ofMatrix4x4_makeLookAtViewMatrix);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getOrtho", _wrap_ofMatrix4x4_getOrtho);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getFrustum", _wrap_ofMatrix4x4_getFrustum);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getPerspective", _wrap_ofMatrix4x4_getPerspective);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getLookAt", _wrap_ofMatrix4x4_getLookAt);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "decompose", _wrap_ofMatrix4x4_decompose);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "setRotate", _wrap_ofMatrix4x4_setRotate);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "setTranslation", _wrap_ofMatrix4x4_setTranslation);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "rotateRad", _wrap_ofMatrix4x4_rotateRad);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "rotate", _wrap_ofMatrix4x4_rotate);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "translate", _wrap_ofMatrix4x4_translate);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "scale", _wrap_ofMatrix4x4_scale);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "glRotateRad", _wrap_ofMatrix4x4_glRotateRad);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "glRotate", _wrap_ofMatrix4x4_glRotate);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "glTranslate", _wrap_ofMatrix4x4_glTranslate);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "glScale", _wrap_ofMatrix4x4_glScale);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getRotate", _wrap_ofMatrix4x4_getRotate);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getTranslation", _wrap_ofMatrix4x4_getTranslation);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "getScale", _wrap_ofMatrix4x4_getScale);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "postMult", _wrap_ofMatrix4x4_postMult);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "preMult", _wrap_ofMatrix4x4_preMult);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "postMultTranslate", _wrap_ofMatrix4x4_postMultTranslate);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "postMultRotate", _wrap_ofMatrix4x4_postMultRotate);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "postMultScale", _wrap_ofMatrix4x4_postMultScale);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "preMultScale", _wrap_ofMatrix4x4_preMultScale);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "preMultTranslate", _wrap_ofMatrix4x4_preMultTranslate);
    SWIGV8_AddMemberFunction(_ofMatrix4x4_class, "preMultRotate", _wrap_ofMatrix4x4_preMultRotate);
    SWIGV8_AddMemberVariable(_ofQuaternion_class, "_v", _wrap_ofQuaternion__v_get, _wrap_ofQuaternion__v_set);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "asVec4", _wrap_ofQuaternion_asVec4);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "asVec3", _wrap_ofQuaternion_asVec3);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "set", _wrap_ofQuaternion_set);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "get", _wrap_ofQuaternion_get);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "x", _wrap_ofQuaternion_x);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "y", _wrap_ofQuaternion_y);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "z", _wrap_ofQuaternion_z);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "w", _wrap_ofQuaternion_w);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "zeroRotation", _wrap_ofQuaternion_zeroRotation);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "length", _wrap_ofQuaternion_length);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "length2", _wrap_ofQuaternion_length2);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "conj", _wrap_ofQuaternion_conj);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "inverse", _wrap_ofQuaternion_inverse);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "makeRotate", _wrap_ofQuaternion_makeRotate);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "makeRotate_original", _wrap_ofQuaternion_makeRotate_original);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "getRotate", _wrap_ofQuaternion_getRotate);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "getEuler", _wrap_ofQuaternion_getEuler);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "slerp", _wrap_ofQuaternion_slerp);
    SWIGV8_AddMemberFunction(_ofQuaternion_class, "normalize", _wrap_ofQuaternion_normalize);
    SWIGV8_AddMemberVariable(_ofVec2f_class, "x", _wrap_ofVec2f_x_get, _wrap_ofVec2f_x_set);
    SWIGV8_AddMemberVariable(_ofVec2f_class, "y", _wrap_ofVec2f_y_get, _wrap_ofVec2f_y_set);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getPtr", _wrap_ofVec2f_getPtr);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "set", _wrap_ofVec2f_set);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "match", _wrap_ofVec2f_match);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "isAligned", _wrap_ofVec2f_isAligned);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "isAlignedRad", _wrap_ofVec2f_isAlignedRad);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "align", _wrap_ofVec2f_align);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "alignRad", _wrap_ofVec2f_alignRad);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getScaled", _wrap_ofVec2f_getScaled);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "scale", _wrap_ofVec2f_scale);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getRotated", _wrap_ofVec2f_getRotated);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "rotate", _wrap_ofVec2f_rotate);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getRotatedRad", _wrap_ofVec2f_getRotatedRad);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "rotateRad", _wrap_ofVec2f_rotateRad);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getMapped", _wrap_ofVec2f_getMapped);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "map", _wrap_ofVec2f_map);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "distance", _wrap_ofVec2f_distance);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "squareDistance", _wrap_ofVec2f_squareDistance);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getInterpolated", _wrap_ofVec2f_getInterpolated);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "interpolate", _wrap_ofVec2f_interpolate);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getMiddle", _wrap_ofVec2f_getMiddle);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "middle", _wrap_ofVec2f_middle);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "average", _wrap_ofVec2f_average);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getNormalized", _wrap_ofVec2f_getNormalized);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "normalize", _wrap_ofVec2f_normalize);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getLimited", _wrap_ofVec2f_getLimited);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "limit", _wrap_ofVec2f_limit);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "getPerpendicular", _wrap_ofVec2f_getPerpendicular);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "perpendicular", _wrap_ofVec2f_perpendicular);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "length", _wrap_ofVec2f_length);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "lengthSquared", _wrap_ofVec2f_lengthSquared);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "squareLength", _wrap_ofVec2f_squareLength);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "angle", _wrap_ofVec2f_angle);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "angleRad", _wrap_ofVec2f_angleRad);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "dot", _wrap_ofVec2f_dot);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "rescaled", _wrap_ofVec2f_rescaled);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "rescale", _wrap_ofVec2f_rescale);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "normalized", _wrap_ofVec2f_normalized);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "limited", _wrap_ofVec2f_limited);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "perpendiculared", _wrap_ofVec2f_perpendiculared);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "interpolated", _wrap_ofVec2f_interpolated);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "middled", _wrap_ofVec2f_middled);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "mapped", _wrap_ofVec2f_mapped);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "distanceSquared", _wrap_ofVec2f_distanceSquared);
    SWIGV8_AddMemberFunction(_ofVec2f_class, "rotated", _wrap_ofVec2f_rotated);
    SWIGV8_AddMemberVariable(_ofVec3f_class, "x", _wrap_ofVec3f_x_get, _wrap_ofVec3f_x_set);
    SWIGV8_AddMemberVariable(_ofVec3f_class, "y", _wrap_ofVec3f_y_get, _wrap_ofVec3f_y_set);
    SWIGV8_AddMemberVariable(_ofVec3f_class, "z", _wrap_ofVec3f_z_get, _wrap_ofVec3f_z_set);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getPtr", _wrap_ofVec3f_getPtr);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "set", _wrap_ofVec3f_set);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "match", _wrap_ofVec3f_match);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "isAligned", _wrap_ofVec3f_isAligned);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "align", _wrap_ofVec3f_align);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "isAlignedRad", _wrap_ofVec3f_isAlignedRad);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "alignRad", _wrap_ofVec3f_alignRad);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getScaled", _wrap_ofVec3f_getScaled);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "scale", _wrap_ofVec3f_scale);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getRotated", _wrap_ofVec3f_getRotated);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "rotate", _wrap_ofVec3f_rotate);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getRotatedRad", _wrap_ofVec3f_getRotatedRad);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "rotateRad", _wrap_ofVec3f_rotateRad);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getMapped", _wrap_ofVec3f_getMapped);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "map", _wrap_ofVec3f_map);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "distance", _wrap_ofVec3f_distance);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "squareDistance", _wrap_ofVec3f_squareDistance);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getInterpolated", _wrap_ofVec3f_getInterpolated);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "interpolate", _wrap_ofVec3f_interpolate);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getMiddle", _wrap_ofVec3f_getMiddle);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "middle", _wrap_ofVec3f_middle);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "average", _wrap_ofVec3f_average);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getNormalized", _wrap_ofVec3f_getNormalized);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "normalize", _wrap_ofVec3f_normalize);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getLimited", _wrap_ofVec3f_getLimited);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "limit", _wrap_ofVec3f_limit);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getCrossed", _wrap_ofVec3f_getCrossed);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "cross", _wrap_ofVec3f_cross);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "getPerpendicular", _wrap_ofVec3f_getPerpendicular);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "perpendicular", _wrap_ofVec3f_perpendicular);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "length", _wrap_ofVec3f_length);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "lengthSquared", _wrap_ofVec3f_lengthSquared);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "squareLength", _wrap_ofVec3f_squareLength);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "angle", _wrap_ofVec3f_angle);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "angleRad", _wrap_ofVec3f_angleRad);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "dot", _wrap_ofVec3f_dot);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "rescaled", _wrap_ofVec3f_rescaled);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "rescale", _wrap_ofVec3f_rescale);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "normalized", _wrap_ofVec3f_normalized);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "limited", _wrap_ofVec3f_limited);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "crossed", _wrap_ofVec3f_crossed);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "perpendiculared", _wrap_ofVec3f_perpendiculared);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "mapped", _wrap_ofVec3f_mapped);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "distanceSquared", _wrap_ofVec3f_distanceSquared);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "interpolated", _wrap_ofVec3f_interpolated);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "middled", _wrap_ofVec3f_middled);
    SWIGV8_AddMemberFunction(_ofVec3f_class, "rotated", _wrap_ofVec3f_rotated);
    SWIGV8_AddMemberVariable(_ofVec4f_class, "x", _wrap_ofVec4f_x_get, _wrap_ofVec4f_x_set);
    SWIGV8_AddMemberVariable(_ofVec4f_class, "y", _wrap_ofVec4f_y_get, _wrap_ofVec4f_y_set);
    SWIGV8_AddMemberVariable(_ofVec4f_class, "z", _wrap_ofVec4f_z_get, _wrap_ofVec4f_z_set);
    SWIGV8_AddMemberVariable(_ofVec4f_class, "w", _wrap_ofVec4f_w_get, _wrap_ofVec4f_w_set);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "set", _wrap_ofVec4f_set);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "getPtr", _wrap_ofVec4f_getPtr);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "match", _wrap_ofVec4f_match);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "getScaled", _wrap_ofVec4f_getScaled);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "scale", _wrap_ofVec4f_scale);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "distance", _wrap_ofVec4f_distance);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "squareDistance", _wrap_ofVec4f_squareDistance);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "getInterpolated", _wrap_ofVec4f_getInterpolated);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "interpolate", _wrap_ofVec4f_interpolate);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "getMiddle", _wrap_ofVec4f_getMiddle);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "middle", _wrap_ofVec4f_middle);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "average", _wrap_ofVec4f_average);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "getNormalized", _wrap_ofVec4f_getNormalized);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "normalize", _wrap_ofVec4f_normalize);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "getLimited", _wrap_ofVec4f_getLimited);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "limit", _wrap_ofVec4f_limit);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "length", _wrap_ofVec4f_length);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "lengthSquared", _wrap_ofVec4f_lengthSquared);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "squareLength", _wrap_ofVec4f_squareLength);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "dot", _wrap_ofVec4f_dot);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "rescaled", _wrap_ofVec4f_rescaled);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "rescale", _wrap_ofVec4f_rescale);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "normalized", _wrap_ofVec4f_normalized);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "limited", _wrap_ofVec4f_limited);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "distanceSquared", _wrap_ofVec4f_distanceSquared);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "interpolated", _wrap_ofVec4f_interpolated);
    SWIGV8_AddMemberFunction(_ofVec4f_class, "middled", _wrap_ofVec4f_middled);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "setPlayer", _wrap_ofSoundPlayer_setPlayer);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "getPlayer", _wrap_ofSoundPlayer_getPlayer);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "loadSound", _wrap_ofSoundPlayer_loadSound);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "unloadSound", _wrap_ofSoundPlayer_unloadSound);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "play", _wrap_ofSoundPlayer_play);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "stop", _wrap_ofSoundPlayer_stop);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "setVolume", _wrap_ofSoundPlayer_setVolume);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "setPan", _wrap_ofSoundPlayer_setPan);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "setSpeed", _wrap_ofSoundPlayer_setSpeed);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "setPaused", _wrap_ofSoundPlayer_setPaused);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "setLoop", _wrap_ofSoundPlayer_setLoop);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "setMultiPlay", _wrap_ofSoundPlayer_setMultiPlay);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "setPosition", _wrap_ofSoundPlayer_setPosition);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "setPositionMS", _wrap_ofSoundPlayer_setPositionMS);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "getPositionMS", _wrap_ofSoundPlayer_getPositionMS);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "getPosition", _wrap_ofSoundPlayer_getPosition);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "getIsPlaying", _wrap_ofSoundPlayer_getIsPlaying);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "getSpeed", _wrap_ofSoundPlayer_getSpeed);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "getPan", _wrap_ofSoundPlayer_getPan);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "getVolume", _wrap_ofSoundPlayer_getVolume);
    SWIGV8_AddMemberFunction(_ofSoundPlayer_class, "isLoaded", _wrap_ofSoundPlayer_isLoaded);
    SWIGV8_AddStaticVariable(of_obj, "OF_VERSION_MAJOR", _wrap_OF_VERSION_MAJOR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_VERSION_MINOR", _wrap_OF_VERSION_MINOR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_VERSION_PATCH", _wrap_OF_VERSION_PATCH, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LOOP_NONE", _wrap_OF_LOOP_NONE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LOOP_PALINDROME", _wrap_OF_LOOP_PALINDROME, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LOOP_NORMAL", _wrap_OF_LOOP_NORMAL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TARGET_OSX", _wrap_OF_TARGET_OSX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TARGET_WINGCC", _wrap_OF_TARGET_WINGCC, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TARGET_WINVS", _wrap_OF_TARGET_WINVS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TARGET_IPHONE", _wrap_OF_TARGET_IPHONE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TARGET_ANDROID", _wrap_OF_TARGET_ANDROID, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TARGET_LINUX", _wrap_OF_TARGET_LINUX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_TARGET_LINUX64", _wrap_OF_TARGET_LINUX64, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "B14400", _wrap_B14400, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "B28800", _wrap_B28800, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_SERIAL_NO_DATA", _wrap_OF_SERIAL_NO_DATA, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_SERIAL_ERROR", _wrap_OF_SERIAL_ERROR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "PI", _wrap_PI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "TWO_PI", _wrap_TWO_PI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "M_TWO_PI", _wrap_M_TWO_PI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "FOUR_PI", _wrap_FOUR_PI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "HALF_PI", _wrap_HALF_PI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "DEG_TO_RAD", _wrap_DEG_TO_RAD, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "RAD_TO_DEG", _wrap_RAD_TO_DEG, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_OUTLINE", _wrap_OF_OUTLINE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_FILLED", _wrap_OF_FILLED, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_WINDOW", _wrap_OF_WINDOW, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_FULLSCREEN", _wrap_OF_FULLSCREEN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_GAME_MODE", _wrap_OF_GAME_MODE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ASPECT_RATIO_IGNORE", _wrap_OF_ASPECT_RATIO_IGNORE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ASPECT_RATIO_KEEP", _wrap_OF_ASPECT_RATIO_KEEP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ASPECT_RATIO_KEEP_BY_EXPANDING", _wrap_OF_ASPECT_RATIO_KEEP_BY_EXPANDING, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ALIGN_VERT_IGNORE", _wrap_OF_ALIGN_VERT_IGNORE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ALIGN_VERT_TOP", _wrap_OF_ALIGN_VERT_TOP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ALIGN_VERT_BOTTOM", _wrap_OF_ALIGN_VERT_BOTTOM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ALIGN_VERT_CENTER", _wrap_OF_ALIGN_VERT_CENTER, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ALIGN_HORZ_IGNORE", _wrap_OF_ALIGN_HORZ_IGNORE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ALIGN_HORZ_LEFT", _wrap_OF_ALIGN_HORZ_LEFT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ALIGN_HORZ_RIGHT", _wrap_OF_ALIGN_HORZ_RIGHT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ALIGN_HORZ_CENTER", _wrap_OF_ALIGN_HORZ_CENTER, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_RECTMODE_CORNER", _wrap_OF_RECTMODE_CORNER, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_RECTMODE_CENTER", _wrap_OF_RECTMODE_CENTER, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_SCALEMODE_FIT", _wrap_OF_SCALEMODE_FIT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_SCALEMODE_FILL", _wrap_OF_SCALEMODE_FILL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_SCALEMODE_CENTER", _wrap_OF_SCALEMODE_CENTER, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_SCALEMODE_STRETCH_TO_FILL", _wrap_OF_SCALEMODE_STRETCH_TO_FILL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_GRAYSCALE", _wrap_OF_IMAGE_GRAYSCALE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_COLOR", _wrap_OF_IMAGE_COLOR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_COLOR_ALPHA", _wrap_OF_IMAGE_COLOR_ALPHA, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_IMAGE_UNDEFINED", _wrap_OF_IMAGE_UNDEFINED, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PIXELS_MONO", _wrap_OF_PIXELS_MONO, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PIXELS_RGB", _wrap_OF_PIXELS_RGB, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PIXELS_RGBA", _wrap_OF_PIXELS_RGBA, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PIXELS_BGRA", _wrap_OF_PIXELS_BGRA, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_PIXELS_RGB565", _wrap_OF_PIXELS_RGB565, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MAX_STYLE_HISTORY", _wrap_OF_MAX_STYLE_HISTORY, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MAX_VIEWPORT_HISTORY", _wrap_OF_MAX_VIEWPORT_HISTORY, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MAX_CIRCLE_PTS", _wrap_OF_MAX_CIRCLE_PTS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BLENDMODE_DISABLED", _wrap_OF_BLENDMODE_DISABLED, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BLENDMODE_ALPHA", _wrap_OF_BLENDMODE_ALPHA, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BLENDMODE_ADD", _wrap_OF_BLENDMODE_ADD, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BLENDMODE_SUBTRACT", _wrap_OF_BLENDMODE_SUBTRACT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BLENDMODE_MULTIPLY", _wrap_OF_BLENDMODE_MULTIPLY, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BLENDMODE_SCREEN", _wrap_OF_BLENDMODE_SCREEN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ORIENTATION_DEFAULT", _wrap_OF_ORIENTATION_DEFAULT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ORIENTATION_180", _wrap_OF_ORIENTATION_180, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ORIENTATION_90_LEFT", _wrap_OF_ORIENTATION_90_LEFT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ORIENTATION_90_RIGHT", _wrap_OF_ORIENTATION_90_RIGHT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_ORIENTATION_UNKNOWN", _wrap_OF_ORIENTATION_UNKNOWN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_GRADIENT_LINEAR", _wrap_OF_GRADIENT_LINEAR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_GRADIENT_CIRCULAR", _wrap_OF_GRADIENT_CIRCULAR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_GRADIENT_BAR", _wrap_OF_GRADIENT_BAR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_POLY_WINDING_ODD", _wrap_OF_POLY_WINDING_ODD, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_POLY_WINDING_NONZERO", _wrap_OF_POLY_WINDING_NONZERO, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_POLY_WINDING_POSITIVE", _wrap_OF_POLY_WINDING_POSITIVE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_POLY_WINDING_NEGATIVE", _wrap_OF_POLY_WINDING_NEGATIVE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_POLY_WINDING_ABS_GEQ_TWO", _wrap_OF_POLY_WINDING_ABS_GEQ_TWO, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CLOSE", _wrap_OF_CLOSE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LEFT_HANDED", _wrap_OF_LEFT_HANDED, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_RIGHT_HANDED", _wrap_OF_RIGHT_HANDED, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MATRIX_MODELVIEW", _wrap_OF_MATRIX_MODELVIEW, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MATRIX_PROJECTION", _wrap_OF_MATRIX_PROJECTION, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_MATRIX_TEXTURE", _wrap_OF_MATRIX_TEXTURE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_MODIFIER", _wrap_OF_KEY_MODIFIER, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_RETURN", _wrap_OF_KEY_RETURN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_ESC", _wrap_OF_KEY_ESC, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_CTRL", _wrap_OF_KEY_CTRL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_ALT", _wrap_OF_KEY_ALT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_SHIFT", _wrap_OF_KEY_SHIFT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_BACKSPACE", _wrap_OF_KEY_BACKSPACE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_DEL", _wrap_OF_KEY_DEL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F1", _wrap_OF_KEY_F1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F2", _wrap_OF_KEY_F2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F3", _wrap_OF_KEY_F3, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F4", _wrap_OF_KEY_F4, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F5", _wrap_OF_KEY_F5, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F6", _wrap_OF_KEY_F6, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F7", _wrap_OF_KEY_F7, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F8", _wrap_OF_KEY_F8, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F9", _wrap_OF_KEY_F9, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F10", _wrap_OF_KEY_F10, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F11", _wrap_OF_KEY_F11, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_F12", _wrap_OF_KEY_F12, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_LEFT", _wrap_OF_KEY_LEFT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_UP", _wrap_OF_KEY_UP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_RIGHT", _wrap_OF_KEY_RIGHT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_DOWN", _wrap_OF_KEY_DOWN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_PAGE_UP", _wrap_OF_KEY_PAGE_UP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_PAGE_DOWN", _wrap_OF_KEY_PAGE_DOWN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_HOME", _wrap_OF_KEY_HOME, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_END", _wrap_OF_KEY_END, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_KEY_INSERT", _wrap_OF_KEY_INSERT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CONSOLE_COLOR_RESTORE", _wrap_OF_CONSOLE_COLOR_RESTORE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CONSOLE_COLOR_BLACK", _wrap_OF_CONSOLE_COLOR_BLACK, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CONSOLE_COLOR_RED", _wrap_OF_CONSOLE_COLOR_RED, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CONSOLE_COLOR_GREEN", _wrap_OF_CONSOLE_COLOR_GREEN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CONSOLE_COLOR_YELLOW", _wrap_OF_CONSOLE_COLOR_YELLOW, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CONSOLE_COLOR_BLUE", _wrap_OF_CONSOLE_COLOR_BLUE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CONSOLE_COLOR_PURPLE", _wrap_OF_CONSOLE_COLOR_PURPLE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CONSOLE_COLOR_CYAN", _wrap_OF_CONSOLE_COLOR_CYAN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_CONSOLE_COLOR_WHITE", _wrap_OF_CONSOLE_COLOR_WHITE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BITMAPMODE_SIMPLE", _wrap_OF_BITMAPMODE_SIMPLE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BITMAPMODE_SCREEN", _wrap_OF_BITMAPMODE_SCREEN, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BITMAPMODE_VIEWPORT", _wrap_OF_BITMAPMODE_VIEWPORT, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BITMAPMODE_MODEL", _wrap_OF_BITMAPMODE_MODEL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_BITMAPMODE_MODEL_BILLBOARD", _wrap_OF_BITMAPMODE_MODEL_BILLBOARD, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LOG_VERBOSE", _wrap_OF_LOG_VERBOSE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LOG_NOTICE", _wrap_OF_LOG_NOTICE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LOG_WARNING", _wrap_OF_LOG_WARNING, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LOG_ERROR", _wrap_OF_LOG_ERROR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LOG_FATAL_ERROR", _wrap_OF_LOG_FATAL_ERROR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(of_obj, "OF_LOG_SILENT", _wrap_OF_LOG_SILENT, JS_veto_set_variable);
    SWIGV8_AddMemberFunction(_ofBaseLoggerChannel_class, "log", _wrap_ofBaseLoggerChannel_log);
    SWIGV8_AddMemberFunction(_ofConsoleLoggerChannel_class, "log", _wrap_ofConsoleLoggerChannel_log);
    SWIGV8_AddMemberFunction(_ofFileLoggerChannel_class, "setFile", _wrap_ofFileLoggerChannel_setFile);
    SWIGV8_AddMemberFunction(_ofFileLoggerChannel_class, "log", _wrap_ofFileLoggerChannel_log);
    SWIGV8_AddMemberFunction(_ofFileLoggerChannel_class, "close", _wrap_ofFileLoggerChannel_close);
    SWIGV8_AddMemberFunction(_ofFileDialogResult_class, "getName", _wrap_ofFileDialogResult_getName);
    SWIGV8_AddMemberFunction(_ofFileDialogResult_class, "getPath", _wrap_ofFileDialogResult_getPath);
    SWIGV8_AddMemberVariable(_ofFileDialogResult_class, "filePath", _wrap_ofFileDialogResult_filePath_get, _wrap_ofFileDialogResult_filePath_set);
    SWIGV8_AddMemberVariable(_ofFileDialogResult_class, "fileName", _wrap_ofFileDialogResult_fileName_get, _wrap_ofFileDialogResult_fileName_set);
    SWIGV8_AddMemberVariable(_ofFileDialogResult_class, "bSuccess", _wrap_ofFileDialogResult_bSuccess_get, _wrap_ofFileDialogResult_bSuccess_set);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "setGrabber", _wrap_ofVideoGrabber_setGrabber);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "getGrabber", _wrap_ofVideoGrabber_getGrabber);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "listDevices", _wrap_ofVideoGrabber_listDevices);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "isFrameNew", _wrap_ofVideoGrabber_isFrameNew);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "update", _wrap_ofVideoGrabber_update);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "grabFrame", _wrap_ofVideoGrabber_grabFrame);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "close", _wrap_ofVideoGrabber_close);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "initGrabber", _wrap_ofVideoGrabber_initGrabber);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "setPixelFormat", _wrap_ofVideoGrabber_setPixelFormat);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "getPixelFormat", _wrap_ofVideoGrabber_getPixelFormat);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "videoSettings", _wrap_ofVideoGrabber_videoSettings);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "getPixels", _wrap_ofVideoGrabber_getPixels);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "getPixelsRef", _wrap_ofVideoGrabber_getPixelsRef);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "getTextureReference", _wrap_ofVideoGrabber_getTextureReference);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "setVerbose", _wrap_ofVideoGrabber_setVerbose);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "setDeviceID", _wrap_ofVideoGrabber_setDeviceID);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "setDesiredFrameRate", _wrap_ofVideoGrabber_setDesiredFrameRate);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "setUseTexture", _wrap_ofVideoGrabber_setUseTexture);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "setAnchorPercent", _wrap_ofVideoGrabber_setAnchorPercent);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "setAnchorPoint", _wrap_ofVideoGrabber_setAnchorPoint);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "resetAnchor", _wrap_ofVideoGrabber_resetAnchor);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "getHeight", _wrap_ofVideoGrabber_getHeight);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "getWidth", _wrap_ofVideoGrabber_getWidth);
    SWIGV8_AddMemberFunction(_ofVideoGrabber_class, "isInitialized", _wrap_ofVideoGrabber_isInitialized);
    SWIGV8_AddMemberVariable(_ofVideoGrabber_class, "height", _wrap_ofVideoGrabber_height_get, _wrap_ofVideoGrabber_height_set);
    SWIGV8_AddMemberVariable(_ofVideoGrabber_class, "width", _wrap_ofVideoGrabber_width_get, _wrap_ofVideoGrabber_width_set);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setPlayer", _wrap_ofVideoPlayer_setPlayer);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getPlayer", _wrap_ofVideoPlayer_getPlayer);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "loadMovie", _wrap_ofVideoPlayer_loadMovie);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getMoviePath", _wrap_ofVideoPlayer_getMoviePath);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setPixelFormat", _wrap_ofVideoPlayer_setPixelFormat);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getPixelFormat", _wrap_ofVideoPlayer_getPixelFormat);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "closeMovie", _wrap_ofVideoPlayer_closeMovie);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "close", _wrap_ofVideoPlayer_close);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "update", _wrap_ofVideoPlayer_update);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "idleMovie", _wrap_ofVideoPlayer_idleMovie);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "play", _wrap_ofVideoPlayer_play);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "stop", _wrap_ofVideoPlayer_stop);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "isFrameNew", _wrap_ofVideoPlayer_isFrameNew);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getPixels", _wrap_ofVideoPlayer_getPixels);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getPixelsRef", _wrap_ofVideoPlayer_getPixelsRef);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getPosition", _wrap_ofVideoPlayer_getPosition);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getSpeed", _wrap_ofVideoPlayer_getSpeed);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getDuration", _wrap_ofVideoPlayer_getDuration);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getIsMovieDone", _wrap_ofVideoPlayer_getIsMovieDone);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setPosition", _wrap_ofVideoPlayer_setPosition);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setVolume", _wrap_ofVideoPlayer_setVolume);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setLoopState", _wrap_ofVideoPlayer_setLoopState);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getLoopState", _wrap_ofVideoPlayer_getLoopState);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setSpeed", _wrap_ofVideoPlayer_setSpeed);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setFrame", _wrap_ofVideoPlayer_setFrame);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setUseTexture", _wrap_ofVideoPlayer_setUseTexture);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getTextureReference", _wrap_ofVideoPlayer_getTextureReference);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setAnchorPercent", _wrap_ofVideoPlayer_setAnchorPercent);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setAnchorPoint", _wrap_ofVideoPlayer_setAnchorPoint);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "resetAnchor", _wrap_ofVideoPlayer_resetAnchor);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "setPaused", _wrap_ofVideoPlayer_setPaused);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getCurrentFrame", _wrap_ofVideoPlayer_getCurrentFrame);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getTotalNumFrames", _wrap_ofVideoPlayer_getTotalNumFrames);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "firstFrame", _wrap_ofVideoPlayer_firstFrame);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "nextFrame", _wrap_ofVideoPlayer_nextFrame);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "previousFrame", _wrap_ofVideoPlayer_previousFrame);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getHeight", _wrap_ofVideoPlayer_getHeight);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "getWidth", _wrap_ofVideoPlayer_getWidth);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "isPaused", _wrap_ofVideoPlayer_isPaused);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "isLoaded", _wrap_ofVideoPlayer_isLoaded);
    SWIGV8_AddMemberFunction(_ofVideoPlayer_class, "isPlaying", _wrap_ofVideoPlayer_isPlaying);
    SWIGV8_AddMemberVariable(_ofVideoPlayer_class, "height", _wrap_ofVideoPlayer_height_get, _wrap_ofVideoPlayer_height_set);
    SWIGV8_AddMemberVariable(_ofVideoPlayer_class, "width", _wrap_ofVideoPlayer_width_get, _wrap_ofVideoPlayer_width_set);
    
    
    /* setup inheritances */
    if (SWIGTYPE_p_ofEventArgs->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ.IsEmpty()))
    {
      _ofEntryEventArgs_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofEntryEventArgs _ofEventArgs\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofEntryEventArgs _ofEventArgs\n");
#endif
    }
    if (SWIGTYPE_p_ofEventArgs->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ.IsEmpty()))
    {
      _ofKeyEventArgs_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofKeyEventArgs _ofEventArgs\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofKeyEventArgs _ofEventArgs\n");
#endif
    }
    if (SWIGTYPE_p_ofEventArgs->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ.IsEmpty()))
    {
      _ofMouseEventArgs_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofMouseEventArgs _ofEventArgs\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofMouseEventArgs _ofEventArgs\n");
#endif
    }
    if (SWIGTYPE_p_ofEventArgs->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ.IsEmpty()))
    {
      _ofTouchEventArgs_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofTouchEventArgs _ofEventArgs\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofTouchEventArgs _ofEventArgs\n");
#endif
    }
    if (SWIGTYPE_p_ofEventArgs->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ.IsEmpty()))
    {
      _ofAudioEventArgs_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofAudioEventArgs _ofEventArgs\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofAudioEventArgs _ofEventArgs\n");
#endif
    }
    if (SWIGTYPE_p_ofEventArgs->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ.IsEmpty()))
    {
      _ofResizeEventArgs_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofResizeEventArgs _ofEventArgs\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofResizeEventArgs _ofEventArgs\n");
#endif
    }
    if (SWIGTYPE_p_ofEventArgs->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ.IsEmpty()))
    {
      _ofMessage_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofEventArgs->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofMessage _ofEventArgs\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofMessage _ofEventArgs\n");
#endif
    }
    if (SWIGTYPE_p_ofNode->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofNode->clientdata)->class_templ.IsEmpty()))
    {
      _ofCamera_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofNode->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofCamera _ofNode\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofCamera _ofNode\n");
#endif
    }
    if (SWIGTYPE_p_ofCamera->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofCamera->clientdata)->class_templ.IsEmpty()))
    {
      _ofEasyCam_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofCamera->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofEasyCam _ofCamera\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofEasyCam _ofCamera\n");
#endif
    }
    if (SWIGTYPE_p_ofNode->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofNode->clientdata)->class_templ.IsEmpty()))
    {
      _ofLight_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofNode->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofLight _ofNode\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofLight _ofNode\n");
#endif
    }
    if (SWIGTYPE_p_ofMesh->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofMesh->clientdata)->class_templ.IsEmpty()))
    {
      _ofVboMesh_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofMesh->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofVboMesh _ofMesh\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofVboMesh _ofMesh\n");
#endif
    }
    if (SWIGTYPE_p_ofLog->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ.IsEmpty()))
    {
      _ofLogVerbose_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofLogVerbose _ofLog\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofLogVerbose _ofLog\n");
#endif
    }
    if (SWIGTYPE_p_ofLog->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ.IsEmpty()))
    {
      _ofLogNotice_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofLogNotice _ofLog\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofLogNotice _ofLog\n");
#endif
    }
    if (SWIGTYPE_p_ofLog->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ.IsEmpty()))
    {
      _ofLogWarning_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofLogWarning _ofLog\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofLogWarning _ofLog\n");
#endif
    }
    if (SWIGTYPE_p_ofLog->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ.IsEmpty()))
    {
      _ofLogError_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofLogError _ofLog\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofLogError _ofLog\n");
#endif
    }
    if (SWIGTYPE_p_ofLog->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ.IsEmpty()))
    {
      _ofLogFatalError_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofLog->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofLogFatalError _ofLog\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofLogFatalError _ofLog\n");
#endif
    }
    if (SWIGTYPE_p_ofBaseLoggerChannel->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofBaseLoggerChannel->clientdata)->class_templ.IsEmpty()))
    {
      _ofConsoleLoggerChannel_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofBaseLoggerChannel->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofConsoleLoggerChannel _ofBaseLoggerChannel\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofConsoleLoggerChannel _ofBaseLoggerChannel\n");
#endif
    }
    if (SWIGTYPE_p_ofBaseLoggerChannel->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofBaseLoggerChannel->clientdata)->class_templ.IsEmpty()))
    {
      _ofFileLoggerChannel_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ofBaseLoggerChannel->clientdata)->class_templ);
#ifdef SWIGRUNTIME_DEBUG
      printf("Inheritance successful _ofFileLoggerChannel _ofBaseLoggerChannel\n");
#endif
    } else {
#ifdef SWIGRUNTIME_DEBUG
      printf("Unable to inherit baseclass, it didn't exist _ofFileLoggerChannel _ofBaseLoggerChannel\n");
#endif
    }
    
    
    /* class instances */
    v8::Handle<v8::FunctionTemplate> _ofBuffer_class_0 = SWIGV8_CreateClassTemplate("ofBuffer");
    _ofBuffer_class_0->SetCallHandler(_wrap_new_ofBuffer);
    _ofBuffer_class_0->Inherit(_ofBuffer_class);
    _ofBuffer_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofBuffer_obj = _ofBuffer_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofFilePath_class_0 = SWIGV8_CreateClassTemplate("ofFilePath");
    _ofFilePath_class_0->SetCallHandler(_wrap_new_ofFilePath);
    _ofFilePath_class_0->Inherit(_ofFilePath_class);
    _ofFilePath_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofFilePath_obj = _ofFilePath_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofFile_class_0 = SWIGV8_CreateClassTemplate("ofFile");
    _ofFile_class_0->SetCallHandler(_wrap_new_ofFile);
    _ofFile_class_0->Inherit(_ofFile_class);
    _ofFile_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofFile_obj = _ofFile_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofDirectory_class_0 = SWIGV8_CreateClassTemplate("ofDirectory");
    _ofDirectory_class_0->SetCallHandler(_wrap_new_ofDirectory);
    _ofDirectory_class_0->Inherit(_ofDirectory_class);
    _ofDirectory_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofDirectory_obj = _ofDirectory_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofRectangle_class_0 = SWIGV8_CreateClassTemplate("ofRectangle");
    _ofRectangle_class_0->SetCallHandler(_wrap_new_ofRectangle);
    _ofRectangle_class_0->Inherit(_ofRectangle_class);
    _ofRectangle_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofRectangle_obj = _ofRectangle_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofSerialDeviceInfo_class_0 = SWIGV8_CreateClassTemplate("ofSerialDeviceInfo");
    _ofSerialDeviceInfo_class_0->SetCallHandler(_wrap_new_ofSerialDeviceInfo);
    _ofSerialDeviceInfo_class_0->Inherit(_ofSerialDeviceInfo_class);
    _ofSerialDeviceInfo_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofSerialDeviceInfo_obj = _ofSerialDeviceInfo_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofStyle_class_0 = SWIGV8_CreateClassTemplate("ofStyle");
    _ofStyle_class_0->SetCallHandler(_wrap_new_ofStyle);
    _ofStyle_class_0->Inherit(_ofStyle_class);
    _ofStyle_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofStyle_obj = _ofStyle_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofColor_T_unsigned_char_t_class_0 = SWIGV8_CreateClassTemplate("ofColor");
    _ofColor_T_unsigned_char_t_class_0->SetCallHandler(_wrap_new_ofColor);
    _ofColor_T_unsigned_char_t_class_0->Inherit(_ofColor_T_unsigned_char_t_class);
    _ofColor_T_unsigned_char_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofColor_T_unsigned_char_t_obj = _ofColor_T_unsigned_char_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofColor_T_float_t_class_0 = SWIGV8_CreateClassTemplate("ofFloatColor");
    _ofColor_T_float_t_class_0->SetCallHandler(_wrap_new_ofFloatColor);
    _ofColor_T_float_t_class_0->Inherit(_ofColor_T_float_t_class);
    _ofColor_T_float_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofColor_T_float_t_obj = _ofColor_T_float_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofColor_T_unsigned_short_t_class_0 = SWIGV8_CreateClassTemplate("ofShortColor");
    _ofColor_T_unsigned_short_t_class_0->SetCallHandler(_wrap_new_ofShortColor);
    _ofColor_T_unsigned_short_t_class_0->Inherit(_ofColor_T_unsigned_short_t_class);
    _ofColor_T_unsigned_short_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofColor_T_unsigned_short_t_obj = _ofColor_T_unsigned_short_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofImage_T_unsigned_char_t_class_0 = SWIGV8_CreateClassTemplate("ofImage");
    _ofImage_T_unsigned_char_t_class_0->SetCallHandler(_wrap_new_ofImage);
    _ofImage_T_unsigned_char_t_class_0->Inherit(_ofImage_T_unsigned_char_t_class);
    _ofImage_T_unsigned_char_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofImage_T_unsigned_char_t_obj = _ofImage_T_unsigned_char_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofImage_T_float_t_class_0 = SWIGV8_CreateClassTemplate("ofFloatImage");
    _ofImage_T_float_t_class_0->SetCallHandler(_wrap_new_ofFloatImage);
    _ofImage_T_float_t_class_0->Inherit(_ofImage_T_float_t_class);
    _ofImage_T_float_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofImage_T_float_t_obj = _ofImage_T_float_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofImage_T_unsigned_short_t_class_0 = SWIGV8_CreateClassTemplate("ofShortImage");
    _ofImage_T_unsigned_short_t_class_0->SetCallHandler(_wrap_new_ofShortImage);
    _ofImage_T_unsigned_short_t_class_0->Inherit(_ofImage_T_unsigned_short_t_class);
    _ofImage_T_unsigned_short_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofImage_T_unsigned_short_t_obj = _ofImage_T_unsigned_short_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofPixels_T_unsigned_char_t_class_0 = SWIGV8_CreateClassTemplate("ofPixels");
    _ofPixels_T_unsigned_char_t_class_0->SetCallHandler(_wrap_new_ofPixels);
    _ofPixels_T_unsigned_char_t_class_0->Inherit(_ofPixels_T_unsigned_char_t_class);
    _ofPixels_T_unsigned_char_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofPixels_T_unsigned_char_t_obj = _ofPixels_T_unsigned_char_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofPixels_T_float_t_class_0 = SWIGV8_CreateClassTemplate("ofFloatPixels");
    _ofPixels_T_float_t_class_0->SetCallHandler(_wrap_new_ofFloatPixels);
    _ofPixels_T_float_t_class_0->Inherit(_ofPixels_T_float_t_class);
    _ofPixels_T_float_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofPixels_T_float_t_obj = _ofPixels_T_float_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofPixels_T_unsigned_short_t_class_0 = SWIGV8_CreateClassTemplate("ofShortPixels");
    _ofPixels_T_unsigned_short_t_class_0->SetCallHandler(_wrap_new_ofShortPixels);
    _ofPixels_T_unsigned_short_t_class_0->Inherit(_ofPixels_T_unsigned_short_t_class);
    _ofPixels_T_unsigned_short_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofPixels_T_unsigned_short_t_obj = _ofPixels_T_unsigned_short_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofDragInfo_class_0 = SWIGV8_CreateClassTemplate("ofDragInfo");
    _ofDragInfo_class_0->SetCallHandler(_wrap_new_ofDragInfo);
    _ofDragInfo_class_0->Inherit(_ofDragInfo_class);
    _ofDragInfo_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofDragInfo_obj = _ofDragInfo_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofEventArgs_class_0 = SWIGV8_CreateClassTemplate("ofEventArgs");
    _ofEventArgs_class_0->SetCallHandler(_wrap_new_ofEventArgs);
    _ofEventArgs_class_0->Inherit(_ofEventArgs_class);
    _ofEventArgs_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofEventArgs_obj = _ofEventArgs_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofEntryEventArgs_class_0 = SWIGV8_CreateClassTemplate("ofEntryEventArgs");
    _ofEntryEventArgs_class_0->SetCallHandler(_wrap_new_ofEntryEventArgs);
    _ofEntryEventArgs_class_0->Inherit(_ofEntryEventArgs_class);
    _ofEntryEventArgs_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofEntryEventArgs_obj = _ofEntryEventArgs_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofKeyEventArgs_class_0 = SWIGV8_CreateClassTemplate("ofKeyEventArgs");
    _ofKeyEventArgs_class_0->SetCallHandler(_wrap_new_ofKeyEventArgs);
    _ofKeyEventArgs_class_0->Inherit(_ofKeyEventArgs_class);
    _ofKeyEventArgs_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofKeyEventArgs_obj = _ofKeyEventArgs_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofMouseEventArgs_class_0 = SWIGV8_CreateClassTemplate("ofMouseEventArgs");
    _ofMouseEventArgs_class_0->SetCallHandler(_wrap_new_ofMouseEventArgs);
    _ofMouseEventArgs_class_0->Inherit(_ofMouseEventArgs_class);
    _ofMouseEventArgs_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofMouseEventArgs_obj = _ofMouseEventArgs_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofTouchEventArgs_class_0 = SWIGV8_CreateClassTemplate("ofTouchEventArgs");
    _ofTouchEventArgs_class_0->SetCallHandler(_wrap_new_ofTouchEventArgs);
    _ofTouchEventArgs_class_0->Inherit(_ofTouchEventArgs_class);
    _ofTouchEventArgs_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofTouchEventArgs_obj = _ofTouchEventArgs_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofAudioEventArgs_class_0 = SWIGV8_CreateClassTemplate("ofAudioEventArgs");
    _ofAudioEventArgs_class_0->SetCallHandler(_wrap_new_ofAudioEventArgs);
    _ofAudioEventArgs_class_0->Inherit(_ofAudioEventArgs_class);
    _ofAudioEventArgs_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofAudioEventArgs_obj = _ofAudioEventArgs_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofResizeEventArgs_class_0 = SWIGV8_CreateClassTemplate("ofResizeEventArgs");
    _ofResizeEventArgs_class_0->SetCallHandler(_wrap_new_ofResizeEventArgs);
    _ofResizeEventArgs_class_0->Inherit(_ofResizeEventArgs_class);
    _ofResizeEventArgs_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofResizeEventArgs_obj = _ofResizeEventArgs_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofMessage_class_0 = SWIGV8_CreateClassTemplate("ofMessage");
    _ofMessage_class_0->SetCallHandler(_wrap_new_ofMessage);
    _ofMessage_class_0->Inherit(_ofMessage_class);
    _ofMessage_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofMessage_obj = _ofMessage_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofCoreEvents_class_0 = SWIGV8_CreateClassTemplate("ofCoreEvents");
    _ofCoreEvents_class_0->SetCallHandler(_wrap_new_ofCoreEvents);
    _ofCoreEvents_class_0->Inherit(_ofCoreEvents_class);
    _ofCoreEvents_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofCoreEvents_obj = _ofCoreEvents_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofNode_class_0 = SWIGV8_CreateClassTemplate("ofNode");
    _ofNode_class_0->SetCallHandler(_wrap_new_ofNode);
    _ofNode_class_0->Inherit(_ofNode_class);
    _ofNode_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofNode_obj = _ofNode_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofCamera_class_0 = SWIGV8_CreateClassTemplate("ofCamera");
    _ofCamera_class_0->SetCallHandler(_wrap_new_ofCamera);
    _ofCamera_class_0->Inherit(_ofCamera_class);
    _ofCamera_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofCamera_obj = _ofCamera_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofEasyCam_class_0 = SWIGV8_CreateClassTemplate("ofEasyCam");
    _ofEasyCam_class_0->SetCallHandler(_wrap_new_ofEasyCam);
    _ofEasyCam_class_0->Inherit(_ofEasyCam_class);
    _ofEasyCam_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofEasyCam_obj = _ofEasyCam_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofMesh_class_0 = SWIGV8_CreateClassTemplate("ofMesh");
    _ofMesh_class_0->SetCallHandler(_wrap_new_ofMesh);
    _ofMesh_class_0->Inherit(_ofMesh_class);
    _ofMesh_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofMesh_obj = _ofMesh_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofFbo_class_0 = SWIGV8_CreateClassTemplate("ofFbo");
    _ofFbo_class_0->SetCallHandler(_wrap_new_ofFbo);
    _ofFbo_class_0->Inherit(_ofFbo_class);
    _ofFbo_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofFbo_obj = _ofFbo_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofLight_class_0 = SWIGV8_CreateClassTemplate("ofLight");
    _ofLight_class_0->SetCallHandler(_wrap_new_ofLight);
    _ofLight_class_0->Inherit(_ofLight_class);
    _ofLight_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofLight_obj = _ofLight_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofMaterial_class_0 = SWIGV8_CreateClassTemplate("ofMaterial");
    _ofMaterial_class_0->SetCallHandler(_wrap_new_ofMaterial);
    _ofMaterial_class_0->Inherit(_ofMaterial_class);
    _ofMaterial_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofMaterial_obj = _ofMaterial_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofShader_class_0 = SWIGV8_CreateClassTemplate("ofShader");
    _ofShader_class_0->SetCallHandler(_wrap_new_ofShader);
    _ofShader_class_0->Inherit(_ofShader_class);
    _ofShader_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofShader_obj = _ofShader_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofTextureData_class_0 = SWIGV8_CreateClassTemplate("ofTextureData");
    _ofTextureData_class_0->SetCallHandler(_wrap_new_ofTextureData);
    _ofTextureData_class_0->Inherit(_ofTextureData_class);
    _ofTextureData_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofTextureData_obj = _ofTextureData_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofTexture_class_0 = SWIGV8_CreateClassTemplate("ofTexture");
    _ofTexture_class_0->SetCallHandler(_wrap_new_ofTexture);
    _ofTexture_class_0->Inherit(_ofTexture_class);
    _ofTexture_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofTexture_obj = _ofTexture_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofVbo_class_0 = SWIGV8_CreateClassTemplate("ofVbo");
    _ofVbo_class_0->SetCallHandler(_wrap_new_ofVbo);
    _ofVbo_class_0->Inherit(_ofVbo_class);
    _ofVbo_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofVbo_obj = _ofVbo_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofVboMesh_class_0 = SWIGV8_CreateClassTemplate("ofVboMesh");
    _ofVboMesh_class_0->SetCallHandler(_wrap_new_ofVboMesh);
    _ofVboMesh_class_0->Inherit(_ofVboMesh_class);
    _ofVboMesh_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofVboMesh_obj = _ofVboMesh_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofPath_class_0 = SWIGV8_CreateClassTemplate("ofPath");
    _ofPath_class_0->SetCallHandler(_wrap_new_ofPath);
    _ofPath_class_0->Inherit(_ofPath_class);
    _ofPath_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofPath_obj = _ofPath_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofSubPath_class_0 = SWIGV8_CreateClassTemplate("ofSubPath");
    _ofSubPath_class_0->SetCallHandler(_wrap_new_ofSubPath);
    _ofSubPath_class_0->Inherit(_ofSubPath_class);
    _ofSubPath_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofSubPath_obj = _ofSubPath_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofPolyline_class_0 = SWIGV8_CreateClassTemplate("ofPolyline");
    _ofPolyline_class_0->SetCallHandler(_wrap_new_ofPolyline);
    _ofPolyline_class_0->Inherit(_ofPolyline_class);
    _ofPolyline_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofPolyline_obj = _ofPolyline_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofTessellator_class_0 = SWIGV8_CreateClassTemplate("ofTessellator");
    _ofTessellator_class_0->SetCallHandler(_wrap_new_ofTessellator);
    _ofTessellator_class_0->Inherit(_ofTessellator_class);
    _ofTessellator_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofTessellator_obj = _ofTessellator_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _charProps_class_0 = SWIGV8_CreateClassTemplate("charProps");
    _charProps_class_0->SetCallHandler(_wrap_new_charProps);
    _charProps_class_0->Inherit(_charProps_class);
    _charProps_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _charProps_obj = _charProps_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofTrueTypeFont_class_0 = SWIGV8_CreateClassTemplate("ofTrueTypeFont");
    _ofTrueTypeFont_class_0->SetCallHandler(_wrap_new_ofTrueTypeFont);
    _ofTrueTypeFont_class_0->Inherit(_ofTrueTypeFont_class);
    _ofTrueTypeFont_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofTrueTypeFont_obj = _ofTrueTypeFont_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofMatrix3x3_class_0 = SWIGV8_CreateClassTemplate("ofMatrix3x3");
    _ofMatrix3x3_class_0->SetCallHandler(_wrap_new_ofMatrix3x3);
    _ofMatrix3x3_class_0->Inherit(_ofMatrix3x3_class);
    _ofMatrix3x3_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofMatrix3x3_obj = _ofMatrix3x3_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofMatrix4x4_class_0 = SWIGV8_CreateClassTemplate("ofMatrix4x4");
    _ofMatrix4x4_class_0->SetCallHandler(_wrap_new_ofMatrix4x4);
    _ofMatrix4x4_class_0->Inherit(_ofMatrix4x4_class);
    _ofMatrix4x4_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofMatrix4x4_obj = _ofMatrix4x4_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofQuaternion_class_0 = SWIGV8_CreateClassTemplate("ofQuaternion");
    _ofQuaternion_class_0->SetCallHandler(_wrap_new_ofQuaternion);
    _ofQuaternion_class_0->Inherit(_ofQuaternion_class);
    _ofQuaternion_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofQuaternion_obj = _ofQuaternion_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofVec2f_class_0 = SWIGV8_CreateClassTemplate("ofVec2f");
    _ofVec2f_class_0->SetCallHandler(_wrap_new_ofVec2f);
    _ofVec2f_class_0->Inherit(_ofVec2f_class);
    _ofVec2f_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofVec2f_obj = _ofVec2f_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofVec3f_class_0 = SWIGV8_CreateClassTemplate("ofVec3f");
    _ofVec3f_class_0->SetCallHandler(_wrap_new_ofVec3f);
    _ofVec3f_class_0->Inherit(_ofVec3f_class);
    _ofVec3f_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofVec3f_obj = _ofVec3f_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofVec4f_class_0 = SWIGV8_CreateClassTemplate("ofVec4f");
    _ofVec4f_class_0->SetCallHandler(_wrap_new_ofVec4f);
    _ofVec4f_class_0->Inherit(_ofVec4f_class);
    _ofVec4f_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofVec4f_obj = _ofVec4f_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofSoundPlayer_class_0 = SWIGV8_CreateClassTemplate("ofSoundPlayer");
    _ofSoundPlayer_class_0->SetCallHandler(_wrap_new_ofSoundPlayer);
    _ofSoundPlayer_class_0->Inherit(_ofSoundPlayer_class);
    _ofSoundPlayer_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofSoundPlayer_obj = _ofSoundPlayer_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofLog_class_0 = SWIGV8_CreateClassTemplate("ofLog");
    _ofLog_class_0->SetCallHandler(_wrap_new_ofLog);
    _ofLog_class_0->Inherit(_ofLog_class);
    _ofLog_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofLog_obj = _ofLog_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofLogVerbose_class_0 = SWIGV8_CreateClassTemplate("ofLogVerbose");
    _ofLogVerbose_class_0->SetCallHandler(_wrap_new_ofLogVerbose);
    _ofLogVerbose_class_0->Inherit(_ofLogVerbose_class);
    _ofLogVerbose_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofLogVerbose_obj = _ofLogVerbose_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofLogNotice_class_0 = SWIGV8_CreateClassTemplate("ofLogNotice");
    _ofLogNotice_class_0->SetCallHandler(_wrap_new_ofLogNotice);
    _ofLogNotice_class_0->Inherit(_ofLogNotice_class);
    _ofLogNotice_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofLogNotice_obj = _ofLogNotice_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofLogWarning_class_0 = SWIGV8_CreateClassTemplate("ofLogWarning");
    _ofLogWarning_class_0->SetCallHandler(_wrap_new_ofLogWarning);
    _ofLogWarning_class_0->Inherit(_ofLogWarning_class);
    _ofLogWarning_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofLogWarning_obj = _ofLogWarning_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofLogError_class_0 = SWIGV8_CreateClassTemplate("ofLogError");
    _ofLogError_class_0->SetCallHandler(_wrap_new_ofLogError);
    _ofLogError_class_0->Inherit(_ofLogError_class);
    _ofLogError_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofLogError_obj = _ofLogError_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofLogFatalError_class_0 = SWIGV8_CreateClassTemplate("ofLogFatalError");
    _ofLogFatalError_class_0->SetCallHandler(_wrap_new_ofLogFatalError);
    _ofLogFatalError_class_0->Inherit(_ofLogFatalError_class);
    _ofLogFatalError_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofLogFatalError_obj = _ofLogFatalError_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofBaseLoggerChannel_class_0 = SWIGV8_CreateClassTemplate("ofBaseLoggerChannel");
    _ofBaseLoggerChannel_class_0->SetCallHandler(_wrap_new_veto_ofBaseLoggerChannel);
    _ofBaseLoggerChannel_class_0->Inherit(_ofBaseLoggerChannel_class);
    _ofBaseLoggerChannel_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofBaseLoggerChannel_obj = _ofBaseLoggerChannel_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofConsoleLoggerChannel_class_0 = SWIGV8_CreateClassTemplate("ofConsoleLoggerChannel");
    _ofConsoleLoggerChannel_class_0->SetCallHandler(_wrap_new_ofConsoleLoggerChannel);
    _ofConsoleLoggerChannel_class_0->Inherit(_ofConsoleLoggerChannel_class);
    _ofConsoleLoggerChannel_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofConsoleLoggerChannel_obj = _ofConsoleLoggerChannel_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofFileLoggerChannel_class_0 = SWIGV8_CreateClassTemplate("ofFileLoggerChannel");
    _ofFileLoggerChannel_class_0->SetCallHandler(_wrap_new_ofFileLoggerChannel);
    _ofFileLoggerChannel_class_0->Inherit(_ofFileLoggerChannel_class);
    _ofFileLoggerChannel_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofFileLoggerChannel_obj = _ofFileLoggerChannel_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofFileDialogResult_class_0 = SWIGV8_CreateClassTemplate("ofFileDialogResult");
    _ofFileDialogResult_class_0->SetCallHandler(_wrap_new_ofFileDialogResult);
    _ofFileDialogResult_class_0->Inherit(_ofFileDialogResult_class);
    _ofFileDialogResult_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofFileDialogResult_obj = _ofFileDialogResult_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofVideoGrabber_class_0 = SWIGV8_CreateClassTemplate("ofVideoGrabber");
    _ofVideoGrabber_class_0->SetCallHandler(_wrap_new_ofVideoGrabber);
    _ofVideoGrabber_class_0->Inherit(_ofVideoGrabber_class);
    _ofVideoGrabber_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofVideoGrabber_obj = _ofVideoGrabber_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ofVideoPlayer_class_0 = SWIGV8_CreateClassTemplate("ofVideoPlayer");
    _ofVideoPlayer_class_0->SetCallHandler(_wrap_new_ofVideoPlayer);
    _ofVideoPlayer_class_0->Inherit(_ofVideoPlayer_class);
    _ofVideoPlayer_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ofVideoPlayer_obj = _ofVideoPlayer_class_0->GetFunction();
    
    
    /* add static class functions and variables */
    SWIGV8_AddStaticFunction(of_obj, "ofBufferFromFile", _wrap__ofBufferFromFile);
    SWIGV8_AddStaticFunction(of_obj, "ofBufferToFile", _wrap__ofBufferToFile);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getFileExt", _wrap_ofFilePath_getFileExt);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "removeExt", _wrap_ofFilePath_removeExt);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "addLeadingSlash", _wrap_ofFilePath_addLeadingSlash);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "addTrailingSlash", _wrap_ofFilePath_addTrailingSlash);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "removeTrailingSlash", _wrap_ofFilePath_removeTrailingSlash);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getPathForDirectory", _wrap_ofFilePath_getPathForDirectory);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getAbsolutePath", _wrap_ofFilePath_getAbsolutePath);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "isAbsolute", _wrap_ofFilePath_isAbsolute);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getFileName", _wrap_ofFilePath_getFileName);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getBaseName", _wrap_ofFilePath_getBaseName);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getEnclosingDirectory", _wrap_ofFilePath_getEnclosingDirectory);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getCurrentWorkingDirectory", _wrap_ofFilePath_getCurrentWorkingDirectory);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "join", _wrap_ofFilePath_join);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getCurrentExePath", _wrap_ofFilePath_getCurrentExePath);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getCurrentExeDir", _wrap_ofFilePath_getCurrentExeDir);
    SWIGV8_AddStaticFunction(_ofFilePath_obj, "getUserHomeDir", _wrap_ofFilePath_getUserHomeDir);
    SWIGV8_AddStaticVariable(_ofFile_obj, "Reference", _wrap_ofFile_Reference, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofFile_obj, "ReadOnly", _wrap_ofFile_ReadOnly, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofFile_obj, "WriteOnly", _wrap_ofFile_WriteOnly, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofFile_obj, "ReadWrite", _wrap_ofFile_ReadWrite, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofFile_obj, "Append", _wrap_ofFile_Append, JS_veto_set_variable);
    SWIGV8_AddStaticFunction(_ofFile_obj, "copyFromTo", _wrap_ofFile_copyFromTo);
    SWIGV8_AddStaticFunction(_ofFile_obj, "moveFromTo", _wrap_ofFile_moveFromTo);
    SWIGV8_AddStaticFunction(_ofFile_obj, "doesFileExist", _wrap_ofFile_doesFileExist);
    SWIGV8_AddStaticFunction(_ofFile_obj, "removeFile", _wrap_ofFile_removeFile);
    SWIGV8_AddStaticFunction(_ofDirectory_obj, "createDirectory", _wrap_ofDirectory_createDirectory);
    SWIGV8_AddStaticFunction(_ofDirectory_obj, "isDirectoryEmpty", _wrap_ofDirectory_isDirectoryEmpty);
    SWIGV8_AddStaticFunction(_ofDirectory_obj, "doesDirectoryExist", _wrap_ofDirectory_doesDirectoryExist);
    SWIGV8_AddStaticFunction(_ofDirectory_obj, "removeDirectory", _wrap_ofDirectory_removeDirectory);
    SWIGV8_AddStaticFunction(_ofColor_T_unsigned_char_t_obj, "fromHsb", _wrap_ofColor_fromHsb);
    SWIGV8_AddStaticFunction(_ofColor_T_unsigned_char_t_obj, "fromHex", _wrap_ofColor_fromHex);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "white", _wrap_ofColor_white_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "gray", _wrap_ofColor_gray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "black", _wrap_ofColor_black_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "red", _wrap_ofColor_red_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "green", _wrap_ofColor_green_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "blue", _wrap_ofColor_blue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "cyan", _wrap_ofColor_cyan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "magenta", _wrap_ofColor_magenta_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "yellow", _wrap_ofColor_yellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "aliceBlue", _wrap_ofColor_aliceBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "antiqueWhite", _wrap_ofColor_antiqueWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "aqua", _wrap_ofColor_aqua_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "aquamarine", _wrap_ofColor_aquamarine_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "azure", _wrap_ofColor_azure_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "beige", _wrap_ofColor_beige_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "bisque", _wrap_ofColor_bisque_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "blanchedAlmond", _wrap_ofColor_blanchedAlmond_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "blueViolet", _wrap_ofColor_blueViolet_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "brown", _wrap_ofColor_brown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "burlyWood", _wrap_ofColor_burlyWood_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "cadetBlue", _wrap_ofColor_cadetBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "chartreuse", _wrap_ofColor_chartreuse_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "chocolate", _wrap_ofColor_chocolate_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "coral", _wrap_ofColor_coral_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "cornflowerBlue", _wrap_ofColor_cornflowerBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "cornsilk", _wrap_ofColor_cornsilk_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "crimson", _wrap_ofColor_crimson_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkBlue", _wrap_ofColor_darkBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkCyan", _wrap_ofColor_darkCyan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkGoldenRod", _wrap_ofColor_darkGoldenRod_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkGray", _wrap_ofColor_darkGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkGrey", _wrap_ofColor_darkGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkGreen", _wrap_ofColor_darkGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkKhaki", _wrap_ofColor_darkKhaki_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkMagenta", _wrap_ofColor_darkMagenta_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkOliveGreen", _wrap_ofColor_darkOliveGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkorange", _wrap_ofColor_darkorange_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkOrchid", _wrap_ofColor_darkOrchid_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkRed", _wrap_ofColor_darkRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkSalmon", _wrap_ofColor_darkSalmon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkSeaGreen", _wrap_ofColor_darkSeaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkSlateBlue", _wrap_ofColor_darkSlateBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkSlateGray", _wrap_ofColor_darkSlateGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkSlateGrey", _wrap_ofColor_darkSlateGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkTurquoise", _wrap_ofColor_darkTurquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "darkViolet", _wrap_ofColor_darkViolet_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "deepPink", _wrap_ofColor_deepPink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "deepSkyBlue", _wrap_ofColor_deepSkyBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "dimGray", _wrap_ofColor_dimGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "dimGrey", _wrap_ofColor_dimGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "dodgerBlue", _wrap_ofColor_dodgerBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "fireBrick", _wrap_ofColor_fireBrick_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "floralWhite", _wrap_ofColor_floralWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "forestGreen", _wrap_ofColor_forestGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "fuchsia", _wrap_ofColor_fuchsia_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "gainsboro", _wrap_ofColor_gainsboro_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "ghostWhite", _wrap_ofColor_ghostWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "gold", _wrap_ofColor_gold_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "goldenRod", _wrap_ofColor_goldenRod_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "grey", _wrap_ofColor_grey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "greenYellow", _wrap_ofColor_greenYellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "honeyDew", _wrap_ofColor_honeyDew_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "hotPink", _wrap_ofColor_hotPink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "indianRed", _wrap_ofColor_indianRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "indigo", _wrap_ofColor_indigo_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "ivory", _wrap_ofColor_ivory_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "khaki", _wrap_ofColor_khaki_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lavender", _wrap_ofColor_lavender_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lavenderBlush", _wrap_ofColor_lavenderBlush_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lawnGreen", _wrap_ofColor_lawnGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lemonChiffon", _wrap_ofColor_lemonChiffon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightBlue", _wrap_ofColor_lightBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightCoral", _wrap_ofColor_lightCoral_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightCyan", _wrap_ofColor_lightCyan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightGoldenRodYellow", _wrap_ofColor_lightGoldenRodYellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightGray", _wrap_ofColor_lightGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightGrey", _wrap_ofColor_lightGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightGreen", _wrap_ofColor_lightGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightPink", _wrap_ofColor_lightPink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightSalmon", _wrap_ofColor_lightSalmon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightSeaGreen", _wrap_ofColor_lightSeaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightSkyBlue", _wrap_ofColor_lightSkyBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightSlateGray", _wrap_ofColor_lightSlateGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightSlateGrey", _wrap_ofColor_lightSlateGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightSteelBlue", _wrap_ofColor_lightSteelBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lightYellow", _wrap_ofColor_lightYellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "lime", _wrap_ofColor_lime_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "limeGreen", _wrap_ofColor_limeGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "linen", _wrap_ofColor_linen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "maroon", _wrap_ofColor_maroon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mediumAquaMarine", _wrap_ofColor_mediumAquaMarine_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mediumBlue", _wrap_ofColor_mediumBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mediumOrchid", _wrap_ofColor_mediumOrchid_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mediumPurple", _wrap_ofColor_mediumPurple_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mediumSeaGreen", _wrap_ofColor_mediumSeaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mediumSlateBlue", _wrap_ofColor_mediumSlateBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mediumSpringGreen", _wrap_ofColor_mediumSpringGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mediumTurquoise", _wrap_ofColor_mediumTurquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mediumVioletRed", _wrap_ofColor_mediumVioletRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "midnightBlue", _wrap_ofColor_midnightBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mintCream", _wrap_ofColor_mintCream_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "mistyRose", _wrap_ofColor_mistyRose_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "moccasin", _wrap_ofColor_moccasin_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "navajoWhite", _wrap_ofColor_navajoWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "navy", _wrap_ofColor_navy_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "oldLace", _wrap_ofColor_oldLace_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "olive", _wrap_ofColor_olive_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "oliveDrab", _wrap_ofColor_oliveDrab_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "orange", _wrap_ofColor_orange_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "orangeRed", _wrap_ofColor_orangeRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "orchid", _wrap_ofColor_orchid_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "paleGoldenRod", _wrap_ofColor_paleGoldenRod_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "paleGreen", _wrap_ofColor_paleGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "paleTurquoise", _wrap_ofColor_paleTurquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "paleVioletRed", _wrap_ofColor_paleVioletRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "papayaWhip", _wrap_ofColor_papayaWhip_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "peachPuff", _wrap_ofColor_peachPuff_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "peru", _wrap_ofColor_peru_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "pink", _wrap_ofColor_pink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "plum", _wrap_ofColor_plum_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "powderBlue", _wrap_ofColor_powderBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "purple", _wrap_ofColor_purple_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "rosyBrown", _wrap_ofColor_rosyBrown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "royalBlue", _wrap_ofColor_royalBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "saddleBrown", _wrap_ofColor_saddleBrown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "salmon", _wrap_ofColor_salmon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "sandyBrown", _wrap_ofColor_sandyBrown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "seaGreen", _wrap_ofColor_seaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "seaShell", _wrap_ofColor_seaShell_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "sienna", _wrap_ofColor_sienna_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "silver", _wrap_ofColor_silver_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "skyBlue", _wrap_ofColor_skyBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "slateBlue", _wrap_ofColor_slateBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "slateGray", _wrap_ofColor_slateGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "slateGrey", _wrap_ofColor_slateGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "snow", _wrap_ofColor_snow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "springGreen", _wrap_ofColor_springGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "steelBlue", _wrap_ofColor_steelBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "tan", _wrap_ofColor_tan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "teal", _wrap_ofColor_teal_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "thistle", _wrap_ofColor_thistle_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "tomato", _wrap_ofColor_tomato_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "turquoise", _wrap_ofColor_turquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "violet", _wrap_ofColor_violet_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "wheat", _wrap_ofColor_wheat_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "whiteSmoke", _wrap_ofColor_whiteSmoke_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_char_t_obj, "yellowGreen", _wrap_ofColor_yellowGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticFunction(_ofColor_T_unsigned_char_t_obj, "limit", _wrap_ofColor_limit);
    SWIGV8_AddStaticFunction(_ofColor_T_float_t_obj, "fromHsb", _wrap_ofFloatColor_fromHsb);
    SWIGV8_AddStaticFunction(_ofColor_T_float_t_obj, "fromHex", _wrap_ofFloatColor_fromHex);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "white", _wrap_ofFloatColor_white_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "gray", _wrap_ofFloatColor_gray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "black", _wrap_ofFloatColor_black_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "red", _wrap_ofFloatColor_red_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "green", _wrap_ofFloatColor_green_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "blue", _wrap_ofFloatColor_blue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "cyan", _wrap_ofFloatColor_cyan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "magenta", _wrap_ofFloatColor_magenta_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "yellow", _wrap_ofFloatColor_yellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "aliceBlue", _wrap_ofFloatColor_aliceBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "antiqueWhite", _wrap_ofFloatColor_antiqueWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "aqua", _wrap_ofFloatColor_aqua_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "aquamarine", _wrap_ofFloatColor_aquamarine_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "azure", _wrap_ofFloatColor_azure_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "beige", _wrap_ofFloatColor_beige_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "bisque", _wrap_ofFloatColor_bisque_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "blanchedAlmond", _wrap_ofFloatColor_blanchedAlmond_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "blueViolet", _wrap_ofFloatColor_blueViolet_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "brown", _wrap_ofFloatColor_brown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "burlyWood", _wrap_ofFloatColor_burlyWood_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "cadetBlue", _wrap_ofFloatColor_cadetBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "chartreuse", _wrap_ofFloatColor_chartreuse_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "chocolate", _wrap_ofFloatColor_chocolate_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "coral", _wrap_ofFloatColor_coral_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "cornflowerBlue", _wrap_ofFloatColor_cornflowerBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "cornsilk", _wrap_ofFloatColor_cornsilk_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "crimson", _wrap_ofFloatColor_crimson_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkBlue", _wrap_ofFloatColor_darkBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkCyan", _wrap_ofFloatColor_darkCyan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkGoldenRod", _wrap_ofFloatColor_darkGoldenRod_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkGray", _wrap_ofFloatColor_darkGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkGrey", _wrap_ofFloatColor_darkGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkGreen", _wrap_ofFloatColor_darkGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkKhaki", _wrap_ofFloatColor_darkKhaki_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkMagenta", _wrap_ofFloatColor_darkMagenta_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkOliveGreen", _wrap_ofFloatColor_darkOliveGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkorange", _wrap_ofFloatColor_darkorange_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkOrchid", _wrap_ofFloatColor_darkOrchid_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkRed", _wrap_ofFloatColor_darkRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkSalmon", _wrap_ofFloatColor_darkSalmon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkSeaGreen", _wrap_ofFloatColor_darkSeaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkSlateBlue", _wrap_ofFloatColor_darkSlateBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkSlateGray", _wrap_ofFloatColor_darkSlateGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkSlateGrey", _wrap_ofFloatColor_darkSlateGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkTurquoise", _wrap_ofFloatColor_darkTurquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "darkViolet", _wrap_ofFloatColor_darkViolet_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "deepPink", _wrap_ofFloatColor_deepPink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "deepSkyBlue", _wrap_ofFloatColor_deepSkyBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "dimGray", _wrap_ofFloatColor_dimGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "dimGrey", _wrap_ofFloatColor_dimGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "dodgerBlue", _wrap_ofFloatColor_dodgerBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "fireBrick", _wrap_ofFloatColor_fireBrick_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "floralWhite", _wrap_ofFloatColor_floralWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "forestGreen", _wrap_ofFloatColor_forestGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "fuchsia", _wrap_ofFloatColor_fuchsia_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "gainsboro", _wrap_ofFloatColor_gainsboro_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "ghostWhite", _wrap_ofFloatColor_ghostWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "gold", _wrap_ofFloatColor_gold_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "goldenRod", _wrap_ofFloatColor_goldenRod_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "grey", _wrap_ofFloatColor_grey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "greenYellow", _wrap_ofFloatColor_greenYellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "honeyDew", _wrap_ofFloatColor_honeyDew_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "hotPink", _wrap_ofFloatColor_hotPink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "indianRed", _wrap_ofFloatColor_indianRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "indigo", _wrap_ofFloatColor_indigo_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "ivory", _wrap_ofFloatColor_ivory_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "khaki", _wrap_ofFloatColor_khaki_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lavender", _wrap_ofFloatColor_lavender_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lavenderBlush", _wrap_ofFloatColor_lavenderBlush_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lawnGreen", _wrap_ofFloatColor_lawnGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lemonChiffon", _wrap_ofFloatColor_lemonChiffon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightBlue", _wrap_ofFloatColor_lightBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightCoral", _wrap_ofFloatColor_lightCoral_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightCyan", _wrap_ofFloatColor_lightCyan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightGoldenRodYellow", _wrap_ofFloatColor_lightGoldenRodYellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightGray", _wrap_ofFloatColor_lightGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightGrey", _wrap_ofFloatColor_lightGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightGreen", _wrap_ofFloatColor_lightGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightPink", _wrap_ofFloatColor_lightPink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightSalmon", _wrap_ofFloatColor_lightSalmon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightSeaGreen", _wrap_ofFloatColor_lightSeaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightSkyBlue", _wrap_ofFloatColor_lightSkyBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightSlateGray", _wrap_ofFloatColor_lightSlateGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightSlateGrey", _wrap_ofFloatColor_lightSlateGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightSteelBlue", _wrap_ofFloatColor_lightSteelBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lightYellow", _wrap_ofFloatColor_lightYellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "lime", _wrap_ofFloatColor_lime_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "limeGreen", _wrap_ofFloatColor_limeGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "linen", _wrap_ofFloatColor_linen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "maroon", _wrap_ofFloatColor_maroon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mediumAquaMarine", _wrap_ofFloatColor_mediumAquaMarine_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mediumBlue", _wrap_ofFloatColor_mediumBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mediumOrchid", _wrap_ofFloatColor_mediumOrchid_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mediumPurple", _wrap_ofFloatColor_mediumPurple_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mediumSeaGreen", _wrap_ofFloatColor_mediumSeaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mediumSlateBlue", _wrap_ofFloatColor_mediumSlateBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mediumSpringGreen", _wrap_ofFloatColor_mediumSpringGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mediumTurquoise", _wrap_ofFloatColor_mediumTurquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mediumVioletRed", _wrap_ofFloatColor_mediumVioletRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "midnightBlue", _wrap_ofFloatColor_midnightBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mintCream", _wrap_ofFloatColor_mintCream_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "mistyRose", _wrap_ofFloatColor_mistyRose_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "moccasin", _wrap_ofFloatColor_moccasin_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "navajoWhite", _wrap_ofFloatColor_navajoWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "navy", _wrap_ofFloatColor_navy_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "oldLace", _wrap_ofFloatColor_oldLace_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "olive", _wrap_ofFloatColor_olive_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "oliveDrab", _wrap_ofFloatColor_oliveDrab_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "orange", _wrap_ofFloatColor_orange_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "orangeRed", _wrap_ofFloatColor_orangeRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "orchid", _wrap_ofFloatColor_orchid_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "paleGoldenRod", _wrap_ofFloatColor_paleGoldenRod_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "paleGreen", _wrap_ofFloatColor_paleGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "paleTurquoise", _wrap_ofFloatColor_paleTurquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "paleVioletRed", _wrap_ofFloatColor_paleVioletRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "papayaWhip", _wrap_ofFloatColor_papayaWhip_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "peachPuff", _wrap_ofFloatColor_peachPuff_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "peru", _wrap_ofFloatColor_peru_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "pink", _wrap_ofFloatColor_pink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "plum", _wrap_ofFloatColor_plum_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "powderBlue", _wrap_ofFloatColor_powderBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "purple", _wrap_ofFloatColor_purple_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "rosyBrown", _wrap_ofFloatColor_rosyBrown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "royalBlue", _wrap_ofFloatColor_royalBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "saddleBrown", _wrap_ofFloatColor_saddleBrown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "salmon", _wrap_ofFloatColor_salmon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "sandyBrown", _wrap_ofFloatColor_sandyBrown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "seaGreen", _wrap_ofFloatColor_seaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "seaShell", _wrap_ofFloatColor_seaShell_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "sienna", _wrap_ofFloatColor_sienna_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "silver", _wrap_ofFloatColor_silver_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "skyBlue", _wrap_ofFloatColor_skyBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "slateBlue", _wrap_ofFloatColor_slateBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "slateGray", _wrap_ofFloatColor_slateGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "slateGrey", _wrap_ofFloatColor_slateGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "snow", _wrap_ofFloatColor_snow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "springGreen", _wrap_ofFloatColor_springGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "steelBlue", _wrap_ofFloatColor_steelBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "tan", _wrap_ofFloatColor_tan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "teal", _wrap_ofFloatColor_teal_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "thistle", _wrap_ofFloatColor_thistle_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "tomato", _wrap_ofFloatColor_tomato_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "turquoise", _wrap_ofFloatColor_turquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "violet", _wrap_ofFloatColor_violet_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "wheat", _wrap_ofFloatColor_wheat_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "whiteSmoke", _wrap_ofFloatColor_whiteSmoke_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_float_t_obj, "yellowGreen", _wrap_ofFloatColor_yellowGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticFunction(_ofColor_T_float_t_obj, "limit", _wrap_ofFloatColor_limit);
    SWIGV8_AddStaticFunction(_ofColor_T_unsigned_short_t_obj, "fromHsb", _wrap_ofShortColor_fromHsb);
    SWIGV8_AddStaticFunction(_ofColor_T_unsigned_short_t_obj, "fromHex", _wrap_ofShortColor_fromHex);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "white", _wrap_ofShortColor_white_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "gray", _wrap_ofShortColor_gray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "black", _wrap_ofShortColor_black_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "red", _wrap_ofShortColor_red_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "green", _wrap_ofShortColor_green_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "blue", _wrap_ofShortColor_blue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "cyan", _wrap_ofShortColor_cyan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "magenta", _wrap_ofShortColor_magenta_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "yellow", _wrap_ofShortColor_yellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "aliceBlue", _wrap_ofShortColor_aliceBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "antiqueWhite", _wrap_ofShortColor_antiqueWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "aqua", _wrap_ofShortColor_aqua_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "aquamarine", _wrap_ofShortColor_aquamarine_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "azure", _wrap_ofShortColor_azure_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "beige", _wrap_ofShortColor_beige_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "bisque", _wrap_ofShortColor_bisque_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "blanchedAlmond", _wrap_ofShortColor_blanchedAlmond_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "blueViolet", _wrap_ofShortColor_blueViolet_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "brown", _wrap_ofShortColor_brown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "burlyWood", _wrap_ofShortColor_burlyWood_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "cadetBlue", _wrap_ofShortColor_cadetBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "chartreuse", _wrap_ofShortColor_chartreuse_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "chocolate", _wrap_ofShortColor_chocolate_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "coral", _wrap_ofShortColor_coral_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "cornflowerBlue", _wrap_ofShortColor_cornflowerBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "cornsilk", _wrap_ofShortColor_cornsilk_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "crimson", _wrap_ofShortColor_crimson_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkBlue", _wrap_ofShortColor_darkBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkCyan", _wrap_ofShortColor_darkCyan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkGoldenRod", _wrap_ofShortColor_darkGoldenRod_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkGray", _wrap_ofShortColor_darkGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkGrey", _wrap_ofShortColor_darkGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkGreen", _wrap_ofShortColor_darkGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkKhaki", _wrap_ofShortColor_darkKhaki_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkMagenta", _wrap_ofShortColor_darkMagenta_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkOliveGreen", _wrap_ofShortColor_darkOliveGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkorange", _wrap_ofShortColor_darkorange_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkOrchid", _wrap_ofShortColor_darkOrchid_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkRed", _wrap_ofShortColor_darkRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkSalmon", _wrap_ofShortColor_darkSalmon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkSeaGreen", _wrap_ofShortColor_darkSeaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkSlateBlue", _wrap_ofShortColor_darkSlateBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkSlateGray", _wrap_ofShortColor_darkSlateGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkSlateGrey", _wrap_ofShortColor_darkSlateGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkTurquoise", _wrap_ofShortColor_darkTurquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "darkViolet", _wrap_ofShortColor_darkViolet_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "deepPink", _wrap_ofShortColor_deepPink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "deepSkyBlue", _wrap_ofShortColor_deepSkyBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "dimGray", _wrap_ofShortColor_dimGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "dimGrey", _wrap_ofShortColor_dimGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "dodgerBlue", _wrap_ofShortColor_dodgerBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "fireBrick", _wrap_ofShortColor_fireBrick_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "floralWhite", _wrap_ofShortColor_floralWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "forestGreen", _wrap_ofShortColor_forestGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "fuchsia", _wrap_ofShortColor_fuchsia_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "gainsboro", _wrap_ofShortColor_gainsboro_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "ghostWhite", _wrap_ofShortColor_ghostWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "gold", _wrap_ofShortColor_gold_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "goldenRod", _wrap_ofShortColor_goldenRod_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "grey", _wrap_ofShortColor_grey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "greenYellow", _wrap_ofShortColor_greenYellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "honeyDew", _wrap_ofShortColor_honeyDew_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "hotPink", _wrap_ofShortColor_hotPink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "indianRed", _wrap_ofShortColor_indianRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "indigo", _wrap_ofShortColor_indigo_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "ivory", _wrap_ofShortColor_ivory_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "khaki", _wrap_ofShortColor_khaki_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lavender", _wrap_ofShortColor_lavender_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lavenderBlush", _wrap_ofShortColor_lavenderBlush_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lawnGreen", _wrap_ofShortColor_lawnGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lemonChiffon", _wrap_ofShortColor_lemonChiffon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightBlue", _wrap_ofShortColor_lightBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightCoral", _wrap_ofShortColor_lightCoral_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightCyan", _wrap_ofShortColor_lightCyan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightGoldenRodYellow", _wrap_ofShortColor_lightGoldenRodYellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightGray", _wrap_ofShortColor_lightGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightGrey", _wrap_ofShortColor_lightGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightGreen", _wrap_ofShortColor_lightGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightPink", _wrap_ofShortColor_lightPink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightSalmon", _wrap_ofShortColor_lightSalmon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightSeaGreen", _wrap_ofShortColor_lightSeaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightSkyBlue", _wrap_ofShortColor_lightSkyBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightSlateGray", _wrap_ofShortColor_lightSlateGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightSlateGrey", _wrap_ofShortColor_lightSlateGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightSteelBlue", _wrap_ofShortColor_lightSteelBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lightYellow", _wrap_ofShortColor_lightYellow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "lime", _wrap_ofShortColor_lime_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "limeGreen", _wrap_ofShortColor_limeGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "linen", _wrap_ofShortColor_linen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "maroon", _wrap_ofShortColor_maroon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mediumAquaMarine", _wrap_ofShortColor_mediumAquaMarine_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mediumBlue", _wrap_ofShortColor_mediumBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mediumOrchid", _wrap_ofShortColor_mediumOrchid_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mediumPurple", _wrap_ofShortColor_mediumPurple_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mediumSeaGreen", _wrap_ofShortColor_mediumSeaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mediumSlateBlue", _wrap_ofShortColor_mediumSlateBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mediumSpringGreen", _wrap_ofShortColor_mediumSpringGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mediumTurquoise", _wrap_ofShortColor_mediumTurquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mediumVioletRed", _wrap_ofShortColor_mediumVioletRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "midnightBlue", _wrap_ofShortColor_midnightBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mintCream", _wrap_ofShortColor_mintCream_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "mistyRose", _wrap_ofShortColor_mistyRose_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "moccasin", _wrap_ofShortColor_moccasin_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "navajoWhite", _wrap_ofShortColor_navajoWhite_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "navy", _wrap_ofShortColor_navy_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "oldLace", _wrap_ofShortColor_oldLace_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "olive", _wrap_ofShortColor_olive_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "oliveDrab", _wrap_ofShortColor_oliveDrab_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "orange", _wrap_ofShortColor_orange_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "orangeRed", _wrap_ofShortColor_orangeRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "orchid", _wrap_ofShortColor_orchid_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "paleGoldenRod", _wrap_ofShortColor_paleGoldenRod_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "paleGreen", _wrap_ofShortColor_paleGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "paleTurquoise", _wrap_ofShortColor_paleTurquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "paleVioletRed", _wrap_ofShortColor_paleVioletRed_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "papayaWhip", _wrap_ofShortColor_papayaWhip_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "peachPuff", _wrap_ofShortColor_peachPuff_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "peru", _wrap_ofShortColor_peru_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "pink", _wrap_ofShortColor_pink_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "plum", _wrap_ofShortColor_plum_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "powderBlue", _wrap_ofShortColor_powderBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "purple", _wrap_ofShortColor_purple_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "rosyBrown", _wrap_ofShortColor_rosyBrown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "royalBlue", _wrap_ofShortColor_royalBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "saddleBrown", _wrap_ofShortColor_saddleBrown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "salmon", _wrap_ofShortColor_salmon_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "sandyBrown", _wrap_ofShortColor_sandyBrown_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "seaGreen", _wrap_ofShortColor_seaGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "seaShell", _wrap_ofShortColor_seaShell_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "sienna", _wrap_ofShortColor_sienna_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "silver", _wrap_ofShortColor_silver_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "skyBlue", _wrap_ofShortColor_skyBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "slateBlue", _wrap_ofShortColor_slateBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "slateGray", _wrap_ofShortColor_slateGray_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "slateGrey", _wrap_ofShortColor_slateGrey_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "snow", _wrap_ofShortColor_snow_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "springGreen", _wrap_ofShortColor_springGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "steelBlue", _wrap_ofShortColor_steelBlue_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "tan", _wrap_ofShortColor_tan_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "teal", _wrap_ofShortColor_teal_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "thistle", _wrap_ofShortColor_thistle_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "tomato", _wrap_ofShortColor_tomato_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "turquoise", _wrap_ofShortColor_turquoise_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "violet", _wrap_ofShortColor_violet_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "wheat", _wrap_ofShortColor_wheat_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "whiteSmoke", _wrap_ofShortColor_whiteSmoke_get, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofColor_T_unsigned_short_t_obj, "yellowGreen", _wrap_ofShortColor_yellowGreen_get, JS_veto_set_variable);
    SWIGV8_AddStaticFunction(_ofColor_T_unsigned_short_t_obj, "limit", _wrap_ofShortColor_limit);
    SWIGV8_AddStaticFunction(of_obj, "ofLoadImage", _wrap__ofLoadImage);
    SWIGV8_AddStaticFunction(of_obj, "ofSaveImage", _wrap__ofSaveImage);
    SWIGV8_AddStaticFunction(of_obj, "ofCloseFreeImage", _wrap_ofCloseFreeImage);
    SWIGV8_AddStaticFunction(of_obj, "ofGetMousePressed", _wrap__ofGetMousePressed);
    SWIGV8_AddStaticFunction(of_obj, "ofGetKeyPressed", _wrap__ofGetKeyPressed);
    SWIGV8_AddStaticFunction(of_obj, "ofGetMouseX", _wrap_ofGetMouseX);
    SWIGV8_AddStaticFunction(of_obj, "ofGetMouseY", _wrap_ofGetMouseY);
    SWIGV8_AddStaticFunction(of_obj, "ofGetPreviousMouseX", _wrap_ofGetPreviousMouseX);
    SWIGV8_AddStaticFunction(of_obj, "ofGetPreviousMouseY", _wrap_ofGetPreviousMouseY);
    SWIGV8_AddStaticFunction(of_obj, "ofSetEscapeQuitsApp", _wrap_ofSetEscapeQuitsApp);
    SWIGV8_AddStaticVariable(_ofTouchEventArgs_obj, "down", _wrap_ofTouchEventArgs_down, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofTouchEventArgs_obj, "up", _wrap_ofTouchEventArgs_up, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofTouchEventArgs_obj, "move", _wrap_ofTouchEventArgs_move, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofTouchEventArgs_obj, "doubleTap", _wrap_ofTouchEventArgs_doubleTap, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofTouchEventArgs_obj, "cancel", _wrap_ofTouchEventArgs_cancel, JS_veto_set_variable);
    SWIGV8_AddStaticFunction(of_obj, "ofSendMessage", _wrap__ofSendMessage);
    SWIGV8_AddStaticFunction(of_obj, "ofEvents", _wrap_ofEvents);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifySetup", _wrap_ofNotifySetup);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyUpdate", _wrap_ofNotifyUpdate);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyDraw", _wrap_ofNotifyDraw);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyKeyPressed", _wrap_ofNotifyKeyPressed);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyKeyReleased", _wrap_ofNotifyKeyReleased);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyMousePressed", _wrap_ofNotifyMousePressed);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyMouseReleased", _wrap_ofNotifyMouseReleased);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyMouseDragged", _wrap_ofNotifyMouseDragged);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyMouseMoved", _wrap_ofNotifyMouseMoved);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyExit", _wrap_ofNotifyExit);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyWindowResized", _wrap_ofNotifyWindowResized);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyWindowEntry", _wrap_ofNotifyWindowEntry);
    SWIGV8_AddStaticFunction(of_obj, "ofNotifyDragEvent", _wrap_ofNotifyDragEvent);
    SWIGV8_AddStaticFunction(of_obj, "ofDrawAxis", _wrap_ofDrawAxis);
    SWIGV8_AddStaticFunction(of_obj, "ofDrawGrid", _wrap__ofDrawGrid);
    SWIGV8_AddStaticFunction(of_obj, "ofDrawGridPlane", _wrap__ofDrawGridPlane);
    SWIGV8_AddStaticFunction(of_obj, "ofDrawArrow", _wrap__ofDrawArrow);
    SWIGV8_AddStaticFunction(of_obj, "ofDrawRotationAxes", _wrap__ofDrawRotationAxes);
    SWIGV8_AddStaticFunction(_ofFbo_obj, "checkGLSupport", _wrap_ofFbo_checkGLSupport);
    SWIGV8_AddStaticFunction(_ofFbo_obj, "maxColorAttachments", _wrap_ofFbo_maxColorAttachments);
    SWIGV8_AddStaticFunction(_ofFbo_obj, "maxDrawBuffers", _wrap_ofFbo_maxDrawBuffers);
    SWIGV8_AddStaticFunction(_ofFbo_obj, "maxSamples", _wrap_ofFbo_maxSamples);
    SWIGV8_AddStaticFunction(of_obj, "ofGetGLPolyMode", _wrap_ofGetGLPolyMode);
    SWIGV8_AddStaticFunction(of_obj, "ofGetOFPolyMode", _wrap_ofGetOFPolyMode);
    SWIGV8_AddStaticFunction(of_obj, "ofGetGLPrimitiveMode", _wrap_ofGetGLPrimitiveMode);
    SWIGV8_AddStaticFunction(of_obj, "ofGetOFPrimitiveMode", _wrap_ofGetOFPrimitiveMode);
    SWIGV8_AddStaticFunction(of_obj, "ofGetGLTypeFromPixelFormat", _wrap_ofGetGLTypeFromPixelFormat);
    SWIGV8_AddStaticFunction(of_obj, "ofEnableLighting", _wrap_ofEnableLighting);
    SWIGV8_AddStaticFunction(of_obj, "ofDisableLighting", _wrap_ofDisableLighting);
    SWIGV8_AddStaticFunction(of_obj, "ofEnableSeparateSpecularLight", _wrap_ofEnableSeparateSpecularLight);
    SWIGV8_AddStaticFunction(of_obj, "ofDisableSeparateSpecularLight", _wrap_ofDisableSeparateSpecularLight);
    SWIGV8_AddStaticFunction(of_obj, "ofGetLightingEnabled", _wrap_ofGetLightingEnabled);
    SWIGV8_AddStaticFunction(of_obj, "ofSetSmoothLighting", _wrap_ofSetSmoothLighting);
    SWIGV8_AddStaticFunction(of_obj, "ofSetGlobalAmbientColor", _wrap_ofSetGlobalAmbientColor);
    SWIGV8_AddStaticFunction(of_obj, "ofGetGlInternalFormat", _wrap__ofGetGlInternalFormat);
    SWIGV8_AddStaticFunction(of_obj, "ofGetGlFormatAndType", _wrap_ofGetGlFormatAndType);
    SWIGV8_AddStaticFunction(of_obj, "ofGetImageTypeFromGLType", _wrap_ofGetImageTypeFromGLType);
    SWIGV8_AddStaticFunction(of_obj, "ofGetUsingArbTex", _wrap_ofGetUsingArbTex);
    SWIGV8_AddStaticFunction(of_obj, "ofEnableArbTex", _wrap_ofEnableArbTex);
    SWIGV8_AddStaticFunction(of_obj, "ofDisableArbTex", _wrap_ofDisableArbTex);
    SWIGV8_AddStaticFunction(of_obj, "ofGetUsingNormalizedTexCoords", _wrap_ofGetUsingNormalizedTexCoords);
    SWIGV8_AddStaticFunction(of_obj, "ofEnableNormalizedTexCoords", _wrap_ofEnableNormalizedTexCoords);
    SWIGV8_AddStaticFunction(of_obj, "ofDisableNormalizedTexCoords", _wrap_ofDisableNormalizedTexCoords);
    SWIGV8_AddStaticFunction(of_obj, "ofSetTextureWrap", _wrap__ofSetTextureWrap);
    SWIGV8_AddStaticFunction(of_obj, "ofGetUsingCustomTextureWrap", _wrap_ofGetUsingCustomTextureWrap);
    SWIGV8_AddStaticFunction(of_obj, "ofRestoreTextureWrap", _wrap_ofRestoreTextureWrap);
    SWIGV8_AddStaticFunction(of_obj, "ofSetMinMagFilters", _wrap__ofSetMinMagFilters);
    SWIGV8_AddStaticFunction(of_obj, "ofGetUsingCustomMinMagFilters", _wrap_ofGetUsingCustomMinMagFilters);
    SWIGV8_AddStaticFunction(of_obj, "ofRestoreMinMagFilters", _wrap_ofRestoreMinMagFilters);
    SWIGV8_AddStaticFunction(of_obj, "ofEnableTextureEdgeHack", _wrap_ofEnableTextureEdgeHack);
    SWIGV8_AddStaticFunction(of_obj, "ofDisableTextureEdgeHack", _wrap_ofDisableTextureEdgeHack);
    SWIGV8_AddStaticFunction(of_obj, "ofSetCurrentRenderer", _wrap_ofSetCurrentRenderer);
    SWIGV8_AddStaticFunction(of_obj, "ofGetCurrentRenderer", _wrap_ofGetCurrentRenderer);
    SWIGV8_AddStaticFunction(of_obj, "ofGetGLRenderer", _wrap_ofGetGLRenderer);
    SWIGV8_AddStaticFunction(of_obj, "ofBeginSaveScreenAsPDF", _wrap__ofBeginSaveScreenAsPDF);
    SWIGV8_AddStaticFunction(of_obj, "ofEndSaveScreenAsPDF", _wrap_ofEndSaveScreenAsPDF);
    SWIGV8_AddStaticFunction(of_obj, "ofPushView", _wrap_ofPushView);
    SWIGV8_AddStaticFunction(of_obj, "ofPopView", _wrap_ofPopView);
    SWIGV8_AddStaticFunction(of_obj, "ofViewport", _wrap__ofViewport);
    SWIGV8_AddStaticFunction(of_obj, "ofSetupScreenPerspective", _wrap__ofSetupScreenPerspective);
    SWIGV8_AddStaticFunction(of_obj, "ofSetupScreenOrtho", _wrap__ofSetupScreenOrtho);
    SWIGV8_AddStaticFunction(of_obj, "ofGetCurrentViewport", _wrap_ofGetCurrentViewport);
    SWIGV8_AddStaticFunction(of_obj, "ofGetViewportWidth", _wrap_ofGetViewportWidth);
    SWIGV8_AddStaticFunction(of_obj, "ofGetViewportHeight", _wrap_ofGetViewportHeight);
    SWIGV8_AddStaticFunction(of_obj, "ofOrientationToDegrees", _wrap_ofOrientationToDegrees);
    SWIGV8_AddStaticFunction(of_obj, "ofSetCoordHandedness", _wrap_ofSetCoordHandedness);
    SWIGV8_AddStaticFunction(of_obj, "ofGetCoordHandedness", _wrap_ofGetCoordHandedness);
    SWIGV8_AddStaticFunction(of_obj, "ofPushMatrix", _wrap_ofPushMatrix);
    SWIGV8_AddStaticFunction(of_obj, "ofPopMatrix", _wrap_ofPopMatrix);
    SWIGV8_AddStaticFunction(of_obj, "ofTranslate", _wrap__ofTranslate);
    SWIGV8_AddStaticFunction(of_obj, "ofScale", _wrap__ofScale);
    SWIGV8_AddStaticFunction(of_obj, "ofRotateX", _wrap_ofRotateX);
    SWIGV8_AddStaticFunction(of_obj, "ofRotateY", _wrap_ofRotateY);
    SWIGV8_AddStaticFunction(of_obj, "ofRotateZ", _wrap_ofRotateZ);
    SWIGV8_AddStaticFunction(of_obj, "ofRotate", _wrap__ofRotate);
    SWIGV8_AddStaticFunction(of_obj, "ofLoadIdentityMatrix", _wrap_ofLoadIdentityMatrix);
    SWIGV8_AddStaticFunction(of_obj, "ofLoadMatrix", _wrap__ofLoadMatrix);
    SWIGV8_AddStaticFunction(of_obj, "ofMultMatrix", _wrap__ofMultMatrix);
    SWIGV8_AddStaticFunction(of_obj, "ofSetMatrixMode", _wrap_ofSetMatrixMode);
    SWIGV8_AddStaticFunction(of_obj, "ofSetupGraphicDefaults", _wrap_ofSetupGraphicDefaults);
    SWIGV8_AddStaticFunction(of_obj, "ofSetupScreen", _wrap_ofSetupScreen);
    SWIGV8_AddStaticFunction(of_obj, "ofGetRectMode", _wrap_ofGetRectMode);
    SWIGV8_AddStaticFunction(of_obj, "ofSetCircleResolution", _wrap_ofSetCircleResolution);
    SWIGV8_AddStaticFunction(of_obj, "ofSetCurveResolution", _wrap_ofSetCurveResolution);
    SWIGV8_AddStaticFunction(of_obj, "ofSetSphereResolution", _wrap_ofSetSphereResolution);
    SWIGV8_AddStaticFunction(of_obj, "ofNoFill", _wrap_ofNoFill);
    SWIGV8_AddStaticFunction(of_obj, "ofFill", _wrap_ofFill);
    SWIGV8_AddStaticFunction(of_obj, "ofGetFill", _wrap_ofGetFill);
    SWIGV8_AddStaticFunction(of_obj, "ofSetLineWidth", _wrap_ofSetLineWidth);
    SWIGV8_AddStaticFunction(of_obj, "ofSetColor", _wrap__ofSetColor);
    SWIGV8_AddStaticFunction(of_obj, "ofSetHexColor", _wrap_ofSetHexColor);
    SWIGV8_AddStaticFunction(of_obj, "ofEnableBlendMode", _wrap_ofEnableBlendMode);
    SWIGV8_AddStaticFunction(of_obj, "ofDisableBlendMode", _wrap_ofDisableBlendMode);
    SWIGV8_AddStaticFunction(of_obj, "ofEnablePointSprites", _wrap_ofEnablePointSprites);
    SWIGV8_AddStaticFunction(of_obj, "ofDisablePointSprites", _wrap_ofDisablePointSprites);
    SWIGV8_AddStaticFunction(of_obj, "ofEnableAlphaBlending", _wrap_ofEnableAlphaBlending);
    SWIGV8_AddStaticFunction(of_obj, "ofDisableAlphaBlending", _wrap_ofDisableAlphaBlending);
    SWIGV8_AddStaticFunction(of_obj, "ofEnableSmoothing", _wrap_ofEnableSmoothing);
    SWIGV8_AddStaticFunction(of_obj, "ofDisableSmoothing", _wrap_ofDisableSmoothing);
    SWIGV8_AddStaticFunction(of_obj, "ofGetStyle", _wrap_ofGetStyle);
    SWIGV8_AddStaticFunction(of_obj, "ofSetStyle", _wrap_ofSetStyle);
    SWIGV8_AddStaticFunction(of_obj, "ofPushStyle", _wrap_ofPushStyle);
    SWIGV8_AddStaticFunction(of_obj, "ofPopStyle", _wrap_ofPopStyle);
    SWIGV8_AddStaticFunction(of_obj, "ofSetPolyMode", _wrap_ofSetPolyMode);
    SWIGV8_AddStaticFunction(of_obj, "ofSetRectMode", _wrap_ofSetRectMode);
    SWIGV8_AddStaticFunction(of_obj, "ofBgColorPtr", _wrap_ofBgColorPtr);
    SWIGV8_AddStaticFunction(of_obj, "ofBackground", _wrap__ofBackground);
    SWIGV8_AddStaticFunction(of_obj, "ofBackgroundHex", _wrap__ofBackgroundHex);
    SWIGV8_AddStaticFunction(of_obj, "ofBackgroundGradient", _wrap__ofBackgroundGradient);
    SWIGV8_AddStaticFunction(of_obj, "ofSetBackgroundColor", _wrap__ofSetBackgroundColor);
    SWIGV8_AddStaticFunction(of_obj, "ofSetBackgroundColorHex", _wrap__ofSetBackgroundColorHex);
    SWIGV8_AddStaticFunction(of_obj, "ofSetBackgroundAuto", _wrap_ofSetBackgroundAuto);
    SWIGV8_AddStaticFunction(of_obj, "ofClear", _wrap__ofClear);
    SWIGV8_AddStaticFunction(of_obj, "ofClearAlpha", _wrap_ofClearAlpha);
    SWIGV8_AddStaticFunction(of_obj, "ofbClearBg", _wrap_ofbClearBg);
    SWIGV8_AddStaticFunction(of_obj, "ofTriangle", _wrap__ofTriangle);
    SWIGV8_AddStaticFunction(of_obj, "ofCircle", _wrap__ofCircle);
    SWIGV8_AddStaticFunction(of_obj, "ofEllipse", _wrap__ofEllipse);
    SWIGV8_AddStaticFunction(of_obj, "ofLine", _wrap__ofLine);
    SWIGV8_AddStaticFunction(of_obj, "ofRect", _wrap__ofRect);
    SWIGV8_AddStaticFunction(of_obj, "ofRectRounded", _wrap__ofRectRounded);
    SWIGV8_AddStaticFunction(of_obj, "ofCurve", _wrap__ofCurve);
    SWIGV8_AddStaticFunction(of_obj, "ofBezier", _wrap__ofBezier);
    SWIGV8_AddStaticFunction(of_obj, "ofBeginShape", _wrap_ofBeginShape);
    SWIGV8_AddStaticFunction(of_obj, "ofVertex", _wrap__ofVertex);
    SWIGV8_AddStaticFunction(of_obj, "ofVertices", _wrap_ofVertices);
    SWIGV8_AddStaticFunction(of_obj, "ofVertexes", _wrap_ofVertexes);
    SWIGV8_AddStaticFunction(of_obj, "ofCurveVertex", _wrap__ofCurveVertex);
    SWIGV8_AddStaticFunction(of_obj, "ofCurveVertices", _wrap_ofCurveVertices);
    SWIGV8_AddStaticFunction(of_obj, "ofCurveVertexes", _wrap_ofCurveVertexes);
    SWIGV8_AddStaticFunction(of_obj, "ofBezierVertex", _wrap__ofBezierVertex);
    SWIGV8_AddStaticFunction(of_obj, "ofEndShape", _wrap__ofEndShape);
    SWIGV8_AddStaticFunction(of_obj, "ofNextContour", _wrap__ofNextContour);
    SWIGV8_AddStaticFunction(of_obj, "ofSphere", _wrap__ofSphere);
    SWIGV8_AddStaticFunction(of_obj, "ofBox", _wrap__ofBox);
    SWIGV8_AddStaticFunction(of_obj, "ofCone", _wrap__ofCone);
    SWIGV8_AddStaticFunction(of_obj, "ofSetDrawBitmapMode", _wrap_ofSetDrawBitmapMode);
    SWIGV8_AddStaticFunction(of_obj, "ofDrawBitmapString", _wrap__ofDrawBitmapString);
    SWIGV8_AddStaticFunction(of_obj, "ofDrawBitmapStringHighlight", _wrap__ofDrawBitmapStringHighlight);
    SWIGV8_AddStaticVariable(_ofPath_obj, "PATHS", _wrap_ofPath_PATHS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofPath_obj, "POLYLINES", _wrap_ofPath_POLYLINES, JS_veto_set_variable);
    SWIGV8_AddStaticFunction(_ofPolyline_obj, "fromRectangle", _wrap_ofPolyline_fromRectangle);
    SWIGV8_AddStaticFunction(_ofTrueTypeFont_obj, "setGlobalDpi", _wrap_ofTrueTypeFont_setGlobalDpi);
    SWIGV8_AddStaticFunction(of_obj, "ofNextPow2", _wrap_ofNextPow2);
    SWIGV8_AddStaticFunction(of_obj, "ofSeedRandom", _wrap__ofSeedRandom);
    SWIGV8_AddStaticFunction(of_obj, "ofRandom", _wrap__ofRandom);
    SWIGV8_AddStaticFunction(of_obj, "ofRandomf", _wrap_ofRandomf);
    SWIGV8_AddStaticFunction(of_obj, "ofRandomuf", _wrap_ofRandomuf);
    SWIGV8_AddStaticFunction(of_obj, "ofNormalize", _wrap_ofNormalize);
    SWIGV8_AddStaticFunction(of_obj, "ofMap", _wrap__ofMap);
    SWIGV8_AddStaticFunction(of_obj, "ofClamp", _wrap_ofClamp);
    SWIGV8_AddStaticFunction(of_obj, "ofLerp", _wrap_ofLerp);
    SWIGV8_AddStaticFunction(of_obj, "ofDist", _wrap_ofDist);
    SWIGV8_AddStaticFunction(of_obj, "ofDistSquared", _wrap_ofDistSquared);
    SWIGV8_AddStaticFunction(of_obj, "ofSign", _wrap_ofSign);
    SWIGV8_AddStaticFunction(of_obj, "ofInRange", _wrap_ofInRange);
    SWIGV8_AddStaticFunction(of_obj, "ofRadToDeg", _wrap_ofRadToDeg);
    SWIGV8_AddStaticFunction(of_obj, "ofDegToRad", _wrap_ofDegToRad);
    SWIGV8_AddStaticFunction(of_obj, "ofLerpDegrees", _wrap_ofLerpDegrees);
    SWIGV8_AddStaticFunction(of_obj, "ofLerpRadians", _wrap_ofLerpRadians);
    SWIGV8_AddStaticFunction(of_obj, "ofAngleDifferenceDegrees", _wrap_ofAngleDifferenceDegrees);
    SWIGV8_AddStaticFunction(of_obj, "ofAngleDifferenceRadians", _wrap_ofAngleDifferenceRadians);
    SWIGV8_AddStaticFunction(of_obj, "ofWrapRadians", _wrap__ofWrapRadians);
    SWIGV8_AddStaticFunction(of_obj, "ofWrapDegrees", _wrap__ofWrapDegrees);
    SWIGV8_AddStaticFunction(of_obj, "ofRandomWidth", _wrap_ofRandomWidth);
    SWIGV8_AddStaticFunction(of_obj, "ofRandomHeight", _wrap_ofRandomHeight);
    SWIGV8_AddStaticFunction(of_obj, "ofNoise", _wrap__ofNoise);
    SWIGV8_AddStaticFunction(of_obj, "ofSignedNoise", _wrap__ofSignedNoise);
    SWIGV8_AddStaticFunction(of_obj, "ofInsidePoly", _wrap__ofInsidePoly);
    SWIGV8_AddStaticFunction(of_obj, "ofLineSegmentIntersection", _wrap_ofLineSegmentIntersection);
    SWIGV8_AddStaticFunction(of_obj, "ofBezierPoint", _wrap_ofBezierPoint);
    SWIGV8_AddStaticFunction(of_obj, "ofCurvePoint", _wrap_ofCurvePoint);
    SWIGV8_AddStaticFunction(of_obj, "ofBezierTangent", _wrap_ofBezierTangent);
    SWIGV8_AddStaticFunction(of_obj, "ofCurveTangent", _wrap_ofCurveTangent);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "newIdentityMatrix", _wrap_ofMatrix4x4_newIdentityMatrix);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "newScaleMatrix", _wrap_ofMatrix4x4_newScaleMatrix);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "newTranslationMatrix", _wrap_ofMatrix4x4_newTranslationMatrix);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "newRotationMatrix", _wrap_ofMatrix4x4_newRotationMatrix);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "getInverseOf", _wrap_ofMatrix4x4_getInverseOf);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "getTransposedOf", _wrap_ofMatrix4x4_getTransposedOf);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "getOrthoNormalOf", _wrap_ofMatrix4x4_getOrthoNormalOf);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "newOrthoMatrix", _wrap_ofMatrix4x4_newOrthoMatrix);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "newOrtho2DMatrix", _wrap_ofMatrix4x4_newOrtho2DMatrix);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "newFrustumMatrix", _wrap_ofMatrix4x4_newFrustumMatrix);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "newPerspectiveMatrix", _wrap_ofMatrix4x4_newPerspectiveMatrix);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "newLookAtMatrix", _wrap_ofMatrix4x4_newLookAtMatrix);
    SWIGV8_AddStaticFunction(_ofMatrix4x4_obj, "transform3x3", _wrap_ofMatrix4x4_transform3x3);
    SWIGV8_AddStaticVariable(_ofVec2f_obj, "DIM", _wrap_ofVec2f_DIM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofVec2f_obj, "DIM", _wrap_ofVec2f_DIM, JS_veto_set_variable);
    SWIGV8_AddStaticFunction(_ofVec2f_obj, "zero", _wrap_ofVec2f_zero);
    SWIGV8_AddStaticFunction(_ofVec2f_obj, "one", _wrap_ofVec2f_one);
    SWIGV8_AddStaticVariable(_ofVec3f_obj, "DIM", _wrap_ofVec3f_DIM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofVec3f_obj, "DIM", _wrap_ofVec3f_DIM, JS_veto_set_variable);
    SWIGV8_AddStaticFunction(_ofVec3f_obj, "zero", _wrap_ofVec3f_zero);
    SWIGV8_AddStaticFunction(_ofVec3f_obj, "one", _wrap_ofVec3f_one);
    SWIGV8_AddStaticVariable(_ofVec4f_obj, "DIM", _wrap_ofVec4f_DIM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(_ofVec4f_obj, "DIM", _wrap_ofVec4f_DIM, JS_veto_set_variable);
    SWIGV8_AddStaticFunction(_ofVec4f_obj, "zero", _wrap_ofVec4f_zero);
    SWIGV8_AddStaticFunction(_ofVec4f_obj, "one", _wrap_ofVec4f_one);
    SWIGV8_AddStaticFunction(of_obj, "ofSoundStopAll", _wrap_ofSoundStopAll);
    SWIGV8_AddStaticFunction(of_obj, "ofSoundSetVolume", _wrap_ofSoundSetVolume);
    SWIGV8_AddStaticFunction(of_obj, "ofSoundUpdate", _wrap_ofSoundUpdate);
    SWIGV8_AddStaticFunction(of_obj, "ofSoundGetSpectrum", _wrap_ofSoundGetSpectrum);
    SWIGV8_AddStaticFunction(of_obj, "ofSoundShutdown", _wrap_ofSoundShutdown);
    SWIGV8_AddStaticFunction(of_obj, "ofSetLogLevel", _wrap__ofSetLogLevel);
    SWIGV8_AddStaticFunction(of_obj, "ofGetLogLevel", _wrap_ofGetLogLevel);
    SWIGV8_AddStaticFunction(of_obj, "ofSetLoggerChannel", _wrap_ofSetLoggerChannel);
    SWIGV8_AddStaticFunction(of_obj, "ofGetLogLevelName", _wrap_ofGetLogLevelName);
    SWIGV8_AddStaticFunction(of_obj, "ofLogToFile", _wrap__ofLogToFile);
    SWIGV8_AddStaticFunction(of_obj, "ofLogToConsole", _wrap_ofLogToConsole);
    SWIGV8_AddStaticFunction(_ofLog_obj, "setAutoSpace", _wrap_ofLog_setAutoSpace);
    SWIGV8_AddStaticFunction(_ofLog_obj, "setChannel", _wrap_ofLog_setChannel);
    SWIGV8_AddStaticFunction(of_obj, "ofSystemAlertDialog", _wrap_ofSystemAlertDialog);
    SWIGV8_AddStaticFunction(of_obj, "ofSystemLoadDialog", _wrap__ofSystemLoadDialog);
    SWIGV8_AddStaticFunction(of_obj, "ofSystemSaveDialog", _wrap_ofSystemSaveDialog);
    SWIGV8_AddStaticFunction(of_obj, "ofSystemTextBoxDialog", _wrap__ofSystemTextBoxDialog);
    SWIGV8_AddStaticFunction(of_obj, "ofResetElapsedTimeCounter", _wrap_ofResetElapsedTimeCounter);
    SWIGV8_AddStaticFunction(of_obj, "ofGetElapsedTimef", _wrap_ofGetElapsedTimef);
    SWIGV8_AddStaticFunction(of_obj, "ofGetFrameNum", _wrap_ofGetFrameNum);
    SWIGV8_AddStaticFunction(of_obj, "ofGetSeconds", _wrap_ofGetSeconds);
    SWIGV8_AddStaticFunction(of_obj, "ofGetMinutes", _wrap_ofGetMinutes);
    SWIGV8_AddStaticFunction(of_obj, "ofGetHours", _wrap_ofGetHours);
    SWIGV8_AddStaticFunction(of_obj, "ofGetUnixTime", _wrap_ofGetUnixTime);
    SWIGV8_AddStaticFunction(of_obj, "ofGetTimestampString", _wrap__ofGetTimestampString);
    SWIGV8_AddStaticFunction(of_obj, "ofGetYear", _wrap_ofGetYear);
    SWIGV8_AddStaticFunction(of_obj, "ofGetMonth", _wrap_ofGetMonth);
    SWIGV8_AddStaticFunction(of_obj, "ofGetDay", _wrap_ofGetDay);
    SWIGV8_AddStaticFunction(of_obj, "ofGetWeekday", _wrap_ofGetWeekday);
    SWIGV8_AddStaticFunction(of_obj, "ofLaunchBrowser", _wrap_ofLaunchBrowser);
    SWIGV8_AddStaticFunction(of_obj, "ofEnableDataPath", _wrap_ofEnableDataPath);
    SWIGV8_AddStaticFunction(of_obj, "ofDisableDataPath", _wrap_ofDisableDataPath);
    SWIGV8_AddStaticFunction(of_obj, "ofToDataPath", _wrap__ofToDataPath);
    SWIGV8_AddStaticFunction(of_obj, "ofSetDataPathRoot", _wrap_ofSetDataPathRoot);
    SWIGV8_AddStaticFunction(of_obj, "ofToHex", _wrap_ofToHex);
    SWIGV8_AddStaticFunction(of_obj, "ofHexToInt", _wrap_ofHexToInt);
    SWIGV8_AddStaticFunction(of_obj, "ofHexToChar", _wrap_ofHexToChar);
    SWIGV8_AddStaticFunction(of_obj, "ofHexToFloat", _wrap_ofHexToFloat);
    SWIGV8_AddStaticFunction(of_obj, "ofHexToString", _wrap_ofHexToString);
    SWIGV8_AddStaticFunction(of_obj, "ofToInt", _wrap_ofToInt);
    SWIGV8_AddStaticFunction(of_obj, "ofToChar", _wrap_ofToChar);
    SWIGV8_AddStaticFunction(of_obj, "ofToFloat", _wrap_ofToFloat);
    SWIGV8_AddStaticFunction(of_obj, "ofToDouble", _wrap_ofToDouble);
    SWIGV8_AddStaticFunction(of_obj, "ofToBool", _wrap_ofToBool);
    SWIGV8_AddStaticFunction(of_obj, "ofToBinary", _wrap_ofToBinary);
    SWIGV8_AddStaticFunction(of_obj, "ofBinaryToInt", _wrap_ofBinaryToInt);
    SWIGV8_AddStaticFunction(of_obj, "ofBinaryToChar", _wrap_ofBinaryToChar);
    SWIGV8_AddStaticFunction(of_obj, "ofBinaryToFloat", _wrap_ofBinaryToFloat);
    SWIGV8_AddStaticFunction(of_obj, "ofBinaryToString", _wrap_ofBinaryToString);
    SWIGV8_AddStaticFunction(of_obj, "ofGetVersionInfo", _wrap_ofGetVersionInfo);
    SWIGV8_AddStaticFunction(of_obj, "ofSaveScreen", _wrap_ofSaveScreen);
    SWIGV8_AddStaticFunction(of_obj, "ofSaveFrame", _wrap__ofSaveFrame);
    SWIGV8_AddStaticFunction(of_obj, "ofSaveViewport", _wrap_ofSaveViewport);
    SWIGV8_AddStaticFunction(of_obj, "ofSplitString", _wrap__ofSplitString);
    SWIGV8_AddStaticFunction(of_obj, "ofJoinString", _wrap_ofJoinString);
    SWIGV8_AddStaticFunction(of_obj, "ofStringReplace", _wrap_ofStringReplace);
    SWIGV8_AddStaticFunction(of_obj, "ofIsStringInString", _wrap_ofIsStringInString);
    SWIGV8_AddStaticFunction(of_obj, "ofToLower", _wrap_ofToLower);
    SWIGV8_AddStaticFunction(of_obj, "ofToUpper", _wrap_ofToUpper);
    SWIGV8_AddStaticFunction(of_obj, "ofVAArgsToString", _wrap__ofVAArgsToString);
    SWIGV8_AddStaticFunction(of_obj, "ofSystem", _wrap_ofSystem);
    SWIGV8_AddStaticFunction(of_obj, "ofGetTargetPlatform", _wrap_ofGetTargetPlatform);
    
    
    /* register classes */
    of_obj->Set(v8::String::NewSymbol("ofBuffer"), _ofBuffer_obj);
    of_obj->Set(v8::String::NewSymbol("ofFilePath"), _ofFilePath_obj);
    of_obj->Set(v8::String::NewSymbol("ofFile"), _ofFile_obj);
    of_obj->Set(v8::String::NewSymbol("ofDirectory"), _ofDirectory_obj);
    of_obj->Set(v8::String::NewSymbol("ofRectangle"), _ofRectangle_obj);
    of_obj->Set(v8::String::NewSymbol("ofSerialDeviceInfo"), _ofSerialDeviceInfo_obj);
    of_obj->Set(v8::String::NewSymbol("ofStyle"), _ofStyle_obj);
    of_obj->Set(v8::String::NewSymbol("ofColor"), _ofColor_T_unsigned_char_t_obj);
    of_obj->Set(v8::String::NewSymbol("ofFloatColor"), _ofColor_T_float_t_obj);
    of_obj->Set(v8::String::NewSymbol("ofShortColor"), _ofColor_T_unsigned_short_t_obj);
    of_obj->Set(v8::String::NewSymbol("ofImage"), _ofImage_T_unsigned_char_t_obj);
    of_obj->Set(v8::String::NewSymbol("ofFloatImage"), _ofImage_T_float_t_obj);
    of_obj->Set(v8::String::NewSymbol("ofShortImage"), _ofImage_T_unsigned_short_t_obj);
    of_obj->Set(v8::String::NewSymbol("ofPixels"), _ofPixels_T_unsigned_char_t_obj);
    of_obj->Set(v8::String::NewSymbol("ofFloatPixels"), _ofPixels_T_float_t_obj);
    of_obj->Set(v8::String::NewSymbol("ofShortPixels"), _ofPixels_T_unsigned_short_t_obj);
    of_obj->Set(v8::String::NewSymbol("ofDragInfo"), _ofDragInfo_obj);
    of_obj->Set(v8::String::NewSymbol("ofEventArgs"), _ofEventArgs_obj);
    of_obj->Set(v8::String::NewSymbol("ofEntryEventArgs"), _ofEntryEventArgs_obj);
    of_obj->Set(v8::String::NewSymbol("ofKeyEventArgs"), _ofKeyEventArgs_obj);
    of_obj->Set(v8::String::NewSymbol("ofMouseEventArgs"), _ofMouseEventArgs_obj);
    of_obj->Set(v8::String::NewSymbol("ofTouchEventArgs"), _ofTouchEventArgs_obj);
    of_obj->Set(v8::String::NewSymbol("ofAudioEventArgs"), _ofAudioEventArgs_obj);
    of_obj->Set(v8::String::NewSymbol("ofResizeEventArgs"), _ofResizeEventArgs_obj);
    of_obj->Set(v8::String::NewSymbol("ofMessage"), _ofMessage_obj);
    of_obj->Set(v8::String::NewSymbol("ofCoreEvents"), _ofCoreEvents_obj);
    of_obj->Set(v8::String::NewSymbol("ofNode"), _ofNode_obj);
    of_obj->Set(v8::String::NewSymbol("ofCamera"), _ofCamera_obj);
    of_obj->Set(v8::String::NewSymbol("ofEasyCam"), _ofEasyCam_obj);
    of_obj->Set(v8::String::NewSymbol("ofMesh"), _ofMesh_obj);
    of_obj->Set(v8::String::NewSymbol("ofFbo"), _ofFbo_obj);
    of_obj->Set(v8::String::NewSymbol("ofLight"), _ofLight_obj);
    of_obj->Set(v8::String::NewSymbol("ofMaterial"), _ofMaterial_obj);
    of_obj->Set(v8::String::NewSymbol("ofShader"), _ofShader_obj);
    of_obj->Set(v8::String::NewSymbol("ofTextureData"), _ofTextureData_obj);
    of_obj->Set(v8::String::NewSymbol("ofTexture"), _ofTexture_obj);
    of_obj->Set(v8::String::NewSymbol("ofVbo"), _ofVbo_obj);
    of_obj->Set(v8::String::NewSymbol("ofVboMesh"), _ofVboMesh_obj);
    of_obj->Set(v8::String::NewSymbol("ofPath"), _ofPath_obj);
    of_obj->Set(v8::String::NewSymbol("ofSubPath"), _ofSubPath_obj);
    of_obj->Set(v8::String::NewSymbol("ofPolyline"), _ofPolyline_obj);
    of_obj->Set(v8::String::NewSymbol("ofTessellator"), _ofTessellator_obj);
    of_obj->Set(v8::String::NewSymbol("charProps"), _charProps_obj);
    of_obj->Set(v8::String::NewSymbol("ofTrueTypeFont"), _ofTrueTypeFont_obj);
    of_obj->Set(v8::String::NewSymbol("ofMatrix3x3"), _ofMatrix3x3_obj);
    of_obj->Set(v8::String::NewSymbol("ofMatrix4x4"), _ofMatrix4x4_obj);
    of_obj->Set(v8::String::NewSymbol("ofQuaternion"), _ofQuaternion_obj);
    of_obj->Set(v8::String::NewSymbol("ofVec2f"), _ofVec2f_obj);
    of_obj->Set(v8::String::NewSymbol("ofVec3f"), _ofVec3f_obj);
    of_obj->Set(v8::String::NewSymbol("ofVec4f"), _ofVec4f_obj);
    of_obj->Set(v8::String::NewSymbol("ofSoundPlayer"), _ofSoundPlayer_obj);
    of_obj->Set(v8::String::NewSymbol("ofLog"), _ofLog_obj);
    of_obj->Set(v8::String::NewSymbol("ofLogVerbose"), _ofLogVerbose_obj);
    of_obj->Set(v8::String::NewSymbol("ofLogNotice"), _ofLogNotice_obj);
    of_obj->Set(v8::String::NewSymbol("ofLogWarning"), _ofLogWarning_obj);
    of_obj->Set(v8::String::NewSymbol("ofLogError"), _ofLogError_obj);
    of_obj->Set(v8::String::NewSymbol("ofLogFatalError"), _ofLogFatalError_obj);
    of_obj->Set(v8::String::NewSymbol("ofBaseLoggerChannel"), _ofBaseLoggerChannel_obj);
    of_obj->Set(v8::String::NewSymbol("ofConsoleLoggerChannel"), _ofConsoleLoggerChannel_obj);
    of_obj->Set(v8::String::NewSymbol("ofFileLoggerChannel"), _ofFileLoggerChannel_obj);
    of_obj->Set(v8::String::NewSymbol("ofFileDialogResult"), _ofFileDialogResult_obj);
    of_obj->Set(v8::String::NewSymbol("ofVideoGrabber"), _ofVideoGrabber_obj);
    of_obj->Set(v8::String::NewSymbol("ofVideoPlayer"), _ofVideoPlayer_obj);
    
    
    /* create and register namespace objects */
    // global_obj->Set(v8::String::NewSymbol("of"), of_obj);
  }
  
#ifdef BUILDING_NODE_EXTENSION
  NODE_MODULE(of, of_initialize);
#endif
  
  
  
} // extern "C"

